(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ethereum_web3/dist/web3.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports=[                                                                                                       // 2
  {                                                                                                                    // 3
    "constant": true,                                                                                                  // 4
    "inputs": [                                                                                                        // 5
      {                                                                                                                // 6
        "name": "_owner",                                                                                              // 7
        "type": "address"                                                                                              // 8
      }                                                                                                                // 9
    ],                                                                                                                 // 10
    "name": "name",                                                                                                    // 11
    "outputs": [                                                                                                       // 12
      {                                                                                                                // 13
        "name": "o_name",                                                                                              // 14
        "type": "bytes32"                                                                                              // 15
      }                                                                                                                // 16
    ],                                                                                                                 // 17
    "type": "function"                                                                                                 // 18
  },                                                                                                                   // 19
  {                                                                                                                    // 20
    "constant": true,                                                                                                  // 21
    "inputs": [                                                                                                        // 22
      {                                                                                                                // 23
        "name": "_name",                                                                                               // 24
        "type": "bytes32"                                                                                              // 25
      }                                                                                                                // 26
    ],                                                                                                                 // 27
    "name": "owner",                                                                                                   // 28
    "outputs": [                                                                                                       // 29
      {                                                                                                                // 30
        "name": "",                                                                                                    // 31
        "type": "address"                                                                                              // 32
      }                                                                                                                // 33
    ],                                                                                                                 // 34
    "type": "function"                                                                                                 // 35
  },                                                                                                                   // 36
  {                                                                                                                    // 37
    "constant": true,                                                                                                  // 38
    "inputs": [                                                                                                        // 39
      {                                                                                                                // 40
        "name": "_name",                                                                                               // 41
        "type": "bytes32"                                                                                              // 42
      }                                                                                                                // 43
    ],                                                                                                                 // 44
    "name": "content",                                                                                                 // 45
    "outputs": [                                                                                                       // 46
      {                                                                                                                // 47
        "name": "",                                                                                                    // 48
        "type": "bytes32"                                                                                              // 49
      }                                                                                                                // 50
    ],                                                                                                                 // 51
    "type": "function"                                                                                                 // 52
  },                                                                                                                   // 53
  {                                                                                                                    // 54
    "constant": true,                                                                                                  // 55
    "inputs": [                                                                                                        // 56
      {                                                                                                                // 57
        "name": "_name",                                                                                               // 58
        "type": "bytes32"                                                                                              // 59
      }                                                                                                                // 60
    ],                                                                                                                 // 61
    "name": "addr",                                                                                                    // 62
    "outputs": [                                                                                                       // 63
      {                                                                                                                // 64
        "name": "",                                                                                                    // 65
        "type": "address"                                                                                              // 66
      }                                                                                                                // 67
    ],                                                                                                                 // 68
    "type": "function"                                                                                                 // 69
  },                                                                                                                   // 70
  {                                                                                                                    // 71
    "constant": false,                                                                                                 // 72
    "inputs": [                                                                                                        // 73
      {                                                                                                                // 74
        "name": "_name",                                                                                               // 75
        "type": "bytes32"                                                                                              // 76
      }                                                                                                                // 77
    ],                                                                                                                 // 78
    "name": "reserve",                                                                                                 // 79
    "outputs": [],                                                                                                     // 80
    "type": "function"                                                                                                 // 81
  },                                                                                                                   // 82
  {                                                                                                                    // 83
    "constant": true,                                                                                                  // 84
    "inputs": [                                                                                                        // 85
      {                                                                                                                // 86
        "name": "_name",                                                                                               // 87
        "type": "bytes32"                                                                                              // 88
      }                                                                                                                // 89
    ],                                                                                                                 // 90
    "name": "subRegistrar",                                                                                            // 91
    "outputs": [                                                                                                       // 92
      {                                                                                                                // 93
        "name": "",                                                                                                    // 94
        "type": "address"                                                                                              // 95
      }                                                                                                                // 96
    ],                                                                                                                 // 97
    "type": "function"                                                                                                 // 98
  },                                                                                                                   // 99
  {                                                                                                                    // 100
    "constant": false,                                                                                                 // 101
    "inputs": [                                                                                                        // 102
      {                                                                                                                // 103
        "name": "_name",                                                                                               // 104
        "type": "bytes32"                                                                                              // 105
      },                                                                                                               // 106
      {                                                                                                                // 107
        "name": "_newOwner",                                                                                           // 108
        "type": "address"                                                                                              // 109
      }                                                                                                                // 110
    ],                                                                                                                 // 111
    "name": "transfer",                                                                                                // 112
    "outputs": [],                                                                                                     // 113
    "type": "function"                                                                                                 // 114
  },                                                                                                                   // 115
  {                                                                                                                    // 116
    "constant": false,                                                                                                 // 117
    "inputs": [                                                                                                        // 118
      {                                                                                                                // 119
        "name": "_name",                                                                                               // 120
        "type": "bytes32"                                                                                              // 121
      },                                                                                                               // 122
      {                                                                                                                // 123
        "name": "_registrar",                                                                                          // 124
        "type": "address"                                                                                              // 125
      }                                                                                                                // 126
    ],                                                                                                                 // 127
    "name": "setSubRegistrar",                                                                                         // 128
    "outputs": [],                                                                                                     // 129
    "type": "function"                                                                                                 // 130
  },                                                                                                                   // 131
  {                                                                                                                    // 132
    "constant": false,                                                                                                 // 133
    "inputs": [],                                                                                                      // 134
    "name": "Registrar",                                                                                               // 135
    "outputs": [],                                                                                                     // 136
    "type": "function"                                                                                                 // 137
  },                                                                                                                   // 138
  {                                                                                                                    // 139
    "constant": false,                                                                                                 // 140
    "inputs": [                                                                                                        // 141
      {                                                                                                                // 142
        "name": "_name",                                                                                               // 143
        "type": "bytes32"                                                                                              // 144
      },                                                                                                               // 145
      {                                                                                                                // 146
        "name": "_a",                                                                                                  // 147
        "type": "address"                                                                                              // 148
      },                                                                                                               // 149
      {                                                                                                                // 150
        "name": "_primary",                                                                                            // 151
        "type": "bool"                                                                                                 // 152
      }                                                                                                                // 153
    ],                                                                                                                 // 154
    "name": "setAddress",                                                                                              // 155
    "outputs": [],                                                                                                     // 156
    "type": "function"                                                                                                 // 157
  },                                                                                                                   // 158
  {                                                                                                                    // 159
    "constant": false,                                                                                                 // 160
    "inputs": [                                                                                                        // 161
      {                                                                                                                // 162
        "name": "_name",                                                                                               // 163
        "type": "bytes32"                                                                                              // 164
      },                                                                                                               // 165
      {                                                                                                                // 166
        "name": "_content",                                                                                            // 167
        "type": "bytes32"                                                                                              // 168
      }                                                                                                                // 169
    ],                                                                                                                 // 170
    "name": "setContent",                                                                                              // 171
    "outputs": [],                                                                                                     // 172
    "type": "function"                                                                                                 // 173
  },                                                                                                                   // 174
  {                                                                                                                    // 175
    "constant": false,                                                                                                 // 176
    "inputs": [                                                                                                        // 177
      {                                                                                                                // 178
        "name": "_name",                                                                                               // 179
        "type": "bytes32"                                                                                              // 180
      }                                                                                                                // 181
    ],                                                                                                                 // 182
    "name": "disown",                                                                                                  // 183
    "outputs": [],                                                                                                     // 184
    "type": "function"                                                                                                 // 185
  },                                                                                                                   // 186
  {                                                                                                                    // 187
    "anonymous": false,                                                                                                // 188
    "inputs": [                                                                                                        // 189
      {                                                                                                                // 190
        "indexed": true,                                                                                               // 191
        "name": "_name",                                                                                               // 192
        "type": "bytes32"                                                                                              // 193
      },                                                                                                               // 194
      {                                                                                                                // 195
        "indexed": false,                                                                                              // 196
        "name": "_winner",                                                                                             // 197
        "type": "address"                                                                                              // 198
      }                                                                                                                // 199
    ],                                                                                                                 // 200
    "name": "AuctionEnded",                                                                                            // 201
    "type": "event"                                                                                                    // 202
  },                                                                                                                   // 203
  {                                                                                                                    // 204
    "anonymous": false,                                                                                                // 205
    "inputs": [                                                                                                        // 206
      {                                                                                                                // 207
        "indexed": true,                                                                                               // 208
        "name": "_name",                                                                                               // 209
        "type": "bytes32"                                                                                              // 210
      },                                                                                                               // 211
      {                                                                                                                // 212
        "indexed": false,                                                                                              // 213
        "name": "_bidder",                                                                                             // 214
        "type": "address"                                                                                              // 215
      },                                                                                                               // 216
      {                                                                                                                // 217
        "indexed": false,                                                                                              // 218
        "name": "_value",                                                                                              // 219
        "type": "uint256"                                                                                              // 220
      }                                                                                                                // 221
    ],                                                                                                                 // 222
    "name": "NewBid",                                                                                                  // 223
    "type": "event"                                                                                                    // 224
  },                                                                                                                   // 225
  {                                                                                                                    // 226
    "anonymous": false,                                                                                                // 227
    "inputs": [                                                                                                        // 228
      {                                                                                                                // 229
        "indexed": true,                                                                                               // 230
        "name": "name",                                                                                                // 231
        "type": "bytes32"                                                                                              // 232
      }                                                                                                                // 233
    ],                                                                                                                 // 234
    "name": "Changed",                                                                                                 // 235
    "type": "event"                                                                                                    // 236
  },                                                                                                                   // 237
  {                                                                                                                    // 238
    "anonymous": false,                                                                                                // 239
    "inputs": [                                                                                                        // 240
      {                                                                                                                // 241
        "indexed": true,                                                                                               // 242
        "name": "name",                                                                                                // 243
        "type": "bytes32"                                                                                              // 244
      },                                                                                                               // 245
      {                                                                                                                // 246
        "indexed": true,                                                                                               // 247
        "name": "addr",                                                                                                // 248
        "type": "address"                                                                                              // 249
      }                                                                                                                // 250
    ],                                                                                                                 // 251
    "name": "PrimaryChanged",                                                                                          // 252
    "type": "event"                                                                                                    // 253
  }                                                                                                                    // 254
]                                                                                                                      // 255
                                                                                                                       // 256
},{}],2:[function(require,module,exports){                                                                             // 257
module.exports=[                                                                                                       // 258
  {                                                                                                                    // 259
    "constant": true,                                                                                                  // 260
    "inputs": [                                                                                                        // 261
      {                                                                                                                // 262
        "name": "_name",                                                                                               // 263
        "type": "bytes32"                                                                                              // 264
      }                                                                                                                // 265
    ],                                                                                                                 // 266
    "name": "owner",                                                                                                   // 267
    "outputs": [                                                                                                       // 268
      {                                                                                                                // 269
        "name": "",                                                                                                    // 270
        "type": "address"                                                                                              // 271
      }                                                                                                                // 272
    ],                                                                                                                 // 273
    "type": "function"                                                                                                 // 274
  },                                                                                                                   // 275
  {                                                                                                                    // 276
    "constant": false,                                                                                                 // 277
    "inputs": [                                                                                                        // 278
      {                                                                                                                // 279
        "name": "_name",                                                                                               // 280
        "type": "bytes32"                                                                                              // 281
      },                                                                                                               // 282
      {                                                                                                                // 283
        "name": "_refund",                                                                                             // 284
        "type": "address"                                                                                              // 285
      }                                                                                                                // 286
    ],                                                                                                                 // 287
    "name": "disown",                                                                                                  // 288
    "outputs": [],                                                                                                     // 289
    "type": "function"                                                                                                 // 290
  },                                                                                                                   // 291
  {                                                                                                                    // 292
    "constant": true,                                                                                                  // 293
    "inputs": [                                                                                                        // 294
      {                                                                                                                // 295
        "name": "_name",                                                                                               // 296
        "type": "bytes32"                                                                                              // 297
      }                                                                                                                // 298
    ],                                                                                                                 // 299
    "name": "addr",                                                                                                    // 300
    "outputs": [                                                                                                       // 301
      {                                                                                                                // 302
        "name": "",                                                                                                    // 303
        "type": "address"                                                                                              // 304
      }                                                                                                                // 305
    ],                                                                                                                 // 306
    "type": "function"                                                                                                 // 307
  },                                                                                                                   // 308
  {                                                                                                                    // 309
    "constant": false,                                                                                                 // 310
    "inputs": [                                                                                                        // 311
      {                                                                                                                // 312
        "name": "_name",                                                                                               // 313
        "type": "bytes32"                                                                                              // 314
      }                                                                                                                // 315
    ],                                                                                                                 // 316
    "name": "reserve",                                                                                                 // 317
    "outputs": [],                                                                                                     // 318
    "type": "function"                                                                                                 // 319
  },                                                                                                                   // 320
  {                                                                                                                    // 321
    "constant": false,                                                                                                 // 322
    "inputs": [                                                                                                        // 323
      {                                                                                                                // 324
        "name": "_name",                                                                                               // 325
        "type": "bytes32"                                                                                              // 326
      },                                                                                                               // 327
      {                                                                                                                // 328
        "name": "_newOwner",                                                                                           // 329
        "type": "address"                                                                                              // 330
      }                                                                                                                // 331
    ],                                                                                                                 // 332
    "name": "transfer",                                                                                                // 333
    "outputs": [],                                                                                                     // 334
    "type": "function"                                                                                                 // 335
  },                                                                                                                   // 336
  {                                                                                                                    // 337
    "constant": false,                                                                                                 // 338
    "inputs": [                                                                                                        // 339
      {                                                                                                                // 340
        "name": "_name",                                                                                               // 341
        "type": "bytes32"                                                                                              // 342
      },                                                                                                               // 343
      {                                                                                                                // 344
        "name": "_a",                                                                                                  // 345
        "type": "address"                                                                                              // 346
      }                                                                                                                // 347
    ],                                                                                                                 // 348
    "name": "setAddr",                                                                                                 // 349
    "outputs": [],                                                                                                     // 350
    "type": "function"                                                                                                 // 351
  },                                                                                                                   // 352
  {                                                                                                                    // 353
    "anonymous": false,                                                                                                // 354
    "inputs": [                                                                                                        // 355
      {                                                                                                                // 356
        "indexed": true,                                                                                               // 357
        "name": "name",                                                                                                // 358
        "type": "bytes32"                                                                                              // 359
      }                                                                                                                // 360
    ],                                                                                                                 // 361
    "name": "Changed",                                                                                                 // 362
    "type": "event"                                                                                                    // 363
  }                                                                                                                    // 364
]                                                                                                                      // 365
                                                                                                                       // 366
},{}],3:[function(require,module,exports){                                                                             // 367
module.exports=[                                                                                                       // 368
  {                                                                                                                    // 369
    "constant": false,                                                                                                 // 370
    "inputs": [                                                                                                        // 371
      {                                                                                                                // 372
        "name": "from",                                                                                                // 373
        "type": "bytes32"                                                                                              // 374
      },                                                                                                               // 375
      {                                                                                                                // 376
        "name": "to",                                                                                                  // 377
        "type": "address"                                                                                              // 378
      },                                                                                                               // 379
      {                                                                                                                // 380
        "name": "value",                                                                                               // 381
        "type": "uint256"                                                                                              // 382
      }                                                                                                                // 383
    ],                                                                                                                 // 384
    "name": "transfer",                                                                                                // 385
    "outputs": [],                                                                                                     // 386
    "type": "function"                                                                                                 // 387
  },                                                                                                                   // 388
  {                                                                                                                    // 389
    "constant": false,                                                                                                 // 390
    "inputs": [                                                                                                        // 391
      {                                                                                                                // 392
        "name": "from",                                                                                                // 393
        "type": "bytes32"                                                                                              // 394
      },                                                                                                               // 395
      {                                                                                                                // 396
        "name": "to",                                                                                                  // 397
        "type": "address"                                                                                              // 398
      },                                                                                                               // 399
      {                                                                                                                // 400
        "name": "indirectId",                                                                                          // 401
        "type": "bytes32"                                                                                              // 402
      },                                                                                                               // 403
      {                                                                                                                // 404
        "name": "value",                                                                                               // 405
        "type": "uint256"                                                                                              // 406
      }                                                                                                                // 407
    ],                                                                                                                 // 408
    "name": "icapTransfer",                                                                                            // 409
    "outputs": [],                                                                                                     // 410
    "type": "function"                                                                                                 // 411
  },                                                                                                                   // 412
  {                                                                                                                    // 413
    "constant": false,                                                                                                 // 414
    "inputs": [                                                                                                        // 415
      {                                                                                                                // 416
        "name": "to",                                                                                                  // 417
        "type": "bytes32"                                                                                              // 418
      }                                                                                                                // 419
    ],                                                                                                                 // 420
    "name": "deposit",                                                                                                 // 421
    "outputs": [],                                                                                                     // 422
    "type": "function"                                                                                                 // 423
  },                                                                                                                   // 424
  {                                                                                                                    // 425
    "anonymous": false,                                                                                                // 426
    "inputs": [                                                                                                        // 427
      {                                                                                                                // 428
        "indexed": true,                                                                                               // 429
        "name": "from",                                                                                                // 430
        "type": "address"                                                                                              // 431
      },                                                                                                               // 432
      {                                                                                                                // 433
        "indexed": false,                                                                                              // 434
        "name": "value",                                                                                               // 435
        "type": "uint256"                                                                                              // 436
      }                                                                                                                // 437
    ],                                                                                                                 // 438
    "name": "AnonymousDeposit",                                                                                        // 439
    "type": "event"                                                                                                    // 440
  },                                                                                                                   // 441
  {                                                                                                                    // 442
    "anonymous": false,                                                                                                // 443
    "inputs": [                                                                                                        // 444
      {                                                                                                                // 445
        "indexed": true,                                                                                               // 446
        "name": "from",                                                                                                // 447
        "type": "address"                                                                                              // 448
      },                                                                                                               // 449
      {                                                                                                                // 450
        "indexed": true,                                                                                               // 451
        "name": "to",                                                                                                  // 452
        "type": "bytes32"                                                                                              // 453
      },                                                                                                               // 454
      {                                                                                                                // 455
        "indexed": false,                                                                                              // 456
        "name": "value",                                                                                               // 457
        "type": "uint256"                                                                                              // 458
      }                                                                                                                // 459
    ],                                                                                                                 // 460
    "name": "Deposit",                                                                                                 // 461
    "type": "event"                                                                                                    // 462
  },                                                                                                                   // 463
  {                                                                                                                    // 464
    "anonymous": false,                                                                                                // 465
    "inputs": [                                                                                                        // 466
      {                                                                                                                // 467
        "indexed": true,                                                                                               // 468
        "name": "from",                                                                                                // 469
        "type": "bytes32"                                                                                              // 470
      },                                                                                                               // 471
      {                                                                                                                // 472
        "indexed": true,                                                                                               // 473
        "name": "to",                                                                                                  // 474
        "type": "address"                                                                                              // 475
      },                                                                                                               // 476
      {                                                                                                                // 477
        "indexed": false,                                                                                              // 478
        "name": "value",                                                                                               // 479
        "type": "uint256"                                                                                              // 480
      }                                                                                                                // 481
    ],                                                                                                                 // 482
    "name": "Transfer",                                                                                                // 483
    "type": "event"                                                                                                    // 484
  },                                                                                                                   // 485
  {                                                                                                                    // 486
    "anonymous": false,                                                                                                // 487
    "inputs": [                                                                                                        // 488
      {                                                                                                                // 489
        "indexed": true,                                                                                               // 490
        "name": "from",                                                                                                // 491
        "type": "bytes32"                                                                                              // 492
      },                                                                                                               // 493
      {                                                                                                                // 494
        "indexed": true,                                                                                               // 495
        "name": "to",                                                                                                  // 496
        "type": "address"                                                                                              // 497
      },                                                                                                               // 498
      {                                                                                                                // 499
        "indexed": false,                                                                                              // 500
        "name": "indirectId",                                                                                          // 501
        "type": "bytes32"                                                                                              // 502
      },                                                                                                               // 503
      {                                                                                                                // 504
        "indexed": false,                                                                                              // 505
        "name": "value",                                                                                               // 506
        "type": "uint256"                                                                                              // 507
      }                                                                                                                // 508
    ],                                                                                                                 // 509
    "name": "IcapTransfer",                                                                                            // 510
    "type": "event"                                                                                                    // 511
  }                                                                                                                    // 512
]                                                                                                                      // 513
                                                                                                                       // 514
},{}],4:[function(require,module,exports){                                                                             // 515
var f = require('./formatters');                                                                                       // 516
var SolidityType = require('./type');                                                                                  // 517
                                                                                                                       // 518
/**                                                                                                                    // 519
 * SolidityTypeAddress is a prootype that represents address type                                                      // 520
 * It matches:                                                                                                         // 521
 * address                                                                                                             // 522
 * address[]                                                                                                           // 523
 * address[4]                                                                                                          // 524
 * address[][]                                                                                                         // 525
 * address[3][]                                                                                                        // 526
 * address[][6][], ...                                                                                                 // 527
 */                                                                                                                    // 528
var SolidityTypeAddress = function () {                                                                                // 529
    this._inputFormatter = f.formatInputInt;                                                                           // 530
    this._outputFormatter = f.formatOutputAddress;                                                                     // 531
};                                                                                                                     // 532
                                                                                                                       // 533
SolidityTypeAddress.prototype = new SolidityType({});                                                                  // 534
SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;                                                       // 535
                                                                                                                       // 536
SolidityTypeAddress.prototype.isType = function (name) {                                                               // 537
    return !!name.match(/address(\[([0-9]*)\])?/);                                                                     // 538
};                                                                                                                     // 539
                                                                                                                       // 540
SolidityTypeAddress.prototype.staticPartLength = function (name) {                                                     // 541
    return 32 * this.staticArrayLength(name);                                                                          // 542
};                                                                                                                     // 543
                                                                                                                       // 544
module.exports = SolidityTypeAddress;                                                                                  // 545
                                                                                                                       // 546
                                                                                                                       // 547
},{"./formatters":9,"./type":14}],5:[function(require,module,exports){                                                 // 548
var f = require('./formatters');                                                                                       // 549
var SolidityType = require('./type');                                                                                  // 550
                                                                                                                       // 551
/**                                                                                                                    // 552
 * SolidityTypeBool is a prootype that represents bool type                                                            // 553
 * It matches:                                                                                                         // 554
 * bool                                                                                                                // 555
 * bool[]                                                                                                              // 556
 * bool[4]                                                                                                             // 557
 * bool[][]                                                                                                            // 558
 * bool[3][]                                                                                                           // 559
 * bool[][6][], ...                                                                                                    // 560
 */                                                                                                                    // 561
var SolidityTypeBool = function () {                                                                                   // 562
    this._inputFormatter = f.formatInputBool;                                                                          // 563
    this._outputFormatter = f.formatOutputBool;                                                                        // 564
};                                                                                                                     // 565
                                                                                                                       // 566
SolidityTypeBool.prototype = new SolidityType({});                                                                     // 567
SolidityTypeBool.prototype.constructor = SolidityTypeBool;                                                             // 568
                                                                                                                       // 569
SolidityTypeBool.prototype.isType = function (name) {                                                                  // 570
    return !!name.match(/^bool(\[([0-9]*)\])*$/);                                                                      // 571
};                                                                                                                     // 572
                                                                                                                       // 573
SolidityTypeBool.prototype.staticPartLength = function (name) {                                                        // 574
    return 32 * this.staticArrayLength(name);                                                                          // 575
};                                                                                                                     // 576
                                                                                                                       // 577
module.exports = SolidityTypeBool;                                                                                     // 578
                                                                                                                       // 579
},{"./formatters":9,"./type":14}],6:[function(require,module,exports){                                                 // 580
var f = require('./formatters');                                                                                       // 581
var SolidityType = require('./type');                                                                                  // 582
                                                                                                                       // 583
/**                                                                                                                    // 584
 * SolidityTypeBytes is a prootype that represents bytes type                                                          // 585
 * It matches:                                                                                                         // 586
 * bytes                                                                                                               // 587
 * bytes[]                                                                                                             // 588
 * bytes[4]                                                                                                            // 589
 * bytes[][]                                                                                                           // 590
 * bytes[3][]                                                                                                          // 591
 * bytes[][6][], ...                                                                                                   // 592
 * bytes32                                                                                                             // 593
 * bytes64[]                                                                                                           // 594
 * bytes8[4]                                                                                                           // 595
 * bytes256[][]                                                                                                        // 596
 * bytes[3][]                                                                                                          // 597
 * bytes64[][6][], ...                                                                                                 // 598
 */                                                                                                                    // 599
var SolidityTypeBytes = function () {                                                                                  // 600
    this._inputFormatter = f.formatInputBytes;                                                                         // 601
    this._outputFormatter = f.formatOutputBytes;                                                                       // 602
};                                                                                                                     // 603
                                                                                                                       // 604
SolidityTypeBytes.prototype = new SolidityType({});                                                                    // 605
SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;                                                           // 606
                                                                                                                       // 607
SolidityTypeBytes.prototype.isType = function (name) {                                                                 // 608
    return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);                                                          // 609
};                                                                                                                     // 610
                                                                                                                       // 611
SolidityTypeBytes.prototype.staticPartLength = function (name) {                                                       // 612
    var matches = name.match(/^bytes([0-9]*)/);                                                                        // 613
    var size = parseInt(matches[1]);                                                                                   // 614
    return size * this.staticArrayLength(name);                                                                        // 615
};                                                                                                                     // 616
                                                                                                                       // 617
module.exports = SolidityTypeBytes;                                                                                    // 618
                                                                                                                       // 619
},{"./formatters":9,"./type":14}],7:[function(require,module,exports){                                                 // 620
/*                                                                                                                     // 621
    This file is part of web3.js.                                                                                      // 622
                                                                                                                       // 623
    web3.js is free software: you can redistribute it and/or modify                                                    // 624
    it under the terms of the GNU Lesser General Public License as published by                                        // 625
    the Free Software Foundation, either version 3 of the License, or                                                  // 626
    (at your option) any later version.                                                                                // 627
                                                                                                                       // 628
    web3.js is distributed in the hope that it will be useful,                                                         // 629
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 630
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 631
    GNU Lesser General Public License for more details.                                                                // 632
                                                                                                                       // 633
    You should have received a copy of the GNU Lesser General Public License                                           // 634
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 635
*/                                                                                                                     // 636
/**                                                                                                                    // 637
 * @file coder.js                                                                                                      // 638
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 639
 * @date 2015                                                                                                          // 640
 */                                                                                                                    // 641
                                                                                                                       // 642
var f = require('./formatters');                                                                                       // 643
                                                                                                                       // 644
var SolidityTypeAddress = require('./address');                                                                        // 645
var SolidityTypeBool = require('./bool');                                                                              // 646
var SolidityTypeInt = require('./int');                                                                                // 647
var SolidityTypeUInt = require('./uint');                                                                              // 648
var SolidityTypeDynamicBytes = require('./dynamicbytes');                                                              // 649
var SolidityTypeString = require('./string');                                                                          // 650
var SolidityTypeReal = require('./real');                                                                              // 651
var SolidityTypeUReal = require('./ureal');                                                                            // 652
var SolidityTypeBytes = require('./bytes');                                                                            // 653
                                                                                                                       // 654
/**                                                                                                                    // 655
 * SolidityCoder prototype should be used to encode/decode solidity params of any type                                 // 656
 */                                                                                                                    // 657
var SolidityCoder = function (types) {                                                                                 // 658
    this._types = types;                                                                                               // 659
};                                                                                                                     // 660
                                                                                                                       // 661
/**                                                                                                                    // 662
 * This method should be used to transform type to SolidityType                                                        // 663
 *                                                                                                                     // 664
 * @method _requireType                                                                                                // 665
 * @param {String} type                                                                                                // 666
 * @returns {SolidityType}                                                                                             // 667
 * @throws {Error} throws if no matching type is found                                                                 // 668
 */                                                                                                                    // 669
SolidityCoder.prototype._requireType = function (type) {                                                               // 670
    var solidityType = this._types.filter(function (t) {                                                               // 671
        return t.isType(type);                                                                                         // 672
    })[0];                                                                                                             // 673
                                                                                                                       // 674
    if (!solidityType) {                                                                                               // 675
        throw Error('invalid solidity type!: ' + type);                                                                // 676
    }                                                                                                                  // 677
                                                                                                                       // 678
    return solidityType;                                                                                               // 679
};                                                                                                                     // 680
                                                                                                                       // 681
/**                                                                                                                    // 682
 * Should be used to encode plain param                                                                                // 683
 *                                                                                                                     // 684
 * @method encodeParam                                                                                                 // 685
 * @param {String} type                                                                                                // 686
 * @param {Object} plain param                                                                                         // 687
 * @return {String} encoded plain param                                                                                // 688
 */                                                                                                                    // 689
SolidityCoder.prototype.encodeParam = function (type, param) {                                                         // 690
    return this.encodeParams([type], [param]);                                                                         // 691
};                                                                                                                     // 692
                                                                                                                       // 693
/**                                                                                                                    // 694
 * Should be used to encode list of params                                                                             // 695
 *                                                                                                                     // 696
 * @method encodeParams                                                                                                // 697
 * @param {Array} types                                                                                                // 698
 * @param {Array} params                                                                                               // 699
 * @return {String} encoded list of params                                                                             // 700
 */                                                                                                                    // 701
SolidityCoder.prototype.encodeParams = function (types, params) {                                                      // 702
    var solidityTypes = this.getSolidityTypes(types);                                                                  // 703
                                                                                                                       // 704
    var encodeds = solidityTypes.map(function (solidityType, index) {                                                  // 705
        return solidityType.encode(params[index], types[index]);                                                       // 706
    });                                                                                                                // 707
                                                                                                                       // 708
    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {                                     // 709
        var staticPartLength = solidityType.staticPartLength(types[index]);                                            // 710
        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;                                   // 711
        return acc + roundedStaticPartLength;                                                                          // 712
    }, 0);                                                                                                             // 713
                                                                                                                       // 714
    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);                            // 715
                                                                                                                       // 716
    return result;                                                                                                     // 717
};                                                                                                                     // 718
                                                                                                                       // 719
SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {             // 720
    var result = "";                                                                                                   // 721
    var self = this;                                                                                                   // 722
                                                                                                                       // 723
    var isDynamic = function (i) {                                                                                     // 724
       return solidityTypes[i].isDynamicArray(types[i]) || solidityTypes[i].isDynamicType(types[i]);                   // 725
    };                                                                                                                 // 726
                                                                                                                       // 727
    types.forEach(function (type, i) {                                                                                 // 728
        if (isDynamic(i)) {                                                                                            // 729
            result += f.formatInputInt(dynamicOffset).encode();                                                        // 730
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 731
            dynamicOffset += e.length / 2;                                                                             // 732
        } else {                                                                                                       // 733
            // don't add length to dynamicOffset. it's already counted                                                 // 734
            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                   // 735
        }                                                                                                              // 736
                                                                                                                       // 737
        // TODO: figure out nested arrays                                                                              // 738
    });                                                                                                                // 739
                                                                                                                       // 740
    types.forEach(function (type, i) {                                                                                 // 741
        if (isDynamic(i)) {                                                                                            // 742
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 743
            dynamicOffset += e.length / 2;                                                                             // 744
            result += e;                                                                                               // 745
        }                                                                                                              // 746
    });                                                                                                                // 747
    return result;                                                                                                     // 748
};                                                                                                                     // 749
                                                                                                                       // 750
// TODO: refactor whole encoding!                                                                                      // 751
SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {                            // 752
    var self = this;                                                                                                   // 753
    if (solidityType.isDynamicArray(type)) {                                                                           // 754
        return (function () {                                                                                          // 755
            // offset was already set                                                                                  // 756
            var nestedName = solidityType.nestedName(type);                                                            // 757
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 758
            var result = encoded[0];                                                                                   // 759
                                                                                                                       // 760
            (function () {                                                                                             // 761
                var previousLength = 2; // in int                                                                      // 762
                if (solidityType.isDynamicArray(nestedName)) {                                                         // 763
                    for (var i = 1; i < encoded.length; i++) {                                                         // 764
                        previousLength += +(encoded[i - 1])[0] || 0;                                                   // 765
                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                    }                                                                                                  // 767
                }                                                                                                      // 768
            })();                                                                                                      // 769
                                                                                                                       // 770
            // first element is length, skip it                                                                        // 771
            (function () {                                                                                             // 772
                for (var i = 0; i < encoded.length - 1; i++) {                                                         // 773
                    var additionalOffset = result / 2;                                                                 // 774
                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);
                }                                                                                                      // 776
            })();                                                                                                      // 777
                                                                                                                       // 778
            return result;                                                                                             // 779
        })();                                                                                                          // 780
                                                                                                                       // 781
    } else if (solidityType.isStaticArray(type)) {                                                                     // 782
        return (function () {                                                                                          // 783
            var nestedName = solidityType.nestedName(type);                                                            // 784
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 785
            var result = "";                                                                                           // 786
                                                                                                                       // 787
                                                                                                                       // 788
            if (solidityType.isDynamicArray(nestedName)) {                                                             // 789
                (function () {                                                                                         // 790
                    var previousLength = 0; // in int                                                                  // 791
                    for (var i = 0; i < encoded.length; i++) {                                                         // 792
                        // calculate length of previous item                                                           // 793
                        previousLength += +(encoded[i - 1] || [])[0] || 0;                                             // 794
                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                    }                                                                                                  // 796
                })();                                                                                                  // 797
            }                                                                                                          // 798
                                                                                                                       // 799
            (function () {                                                                                             // 800
                for (var i = 0; i < encoded.length; i++) {                                                             // 801
                    var additionalOffset = result / 2;                                                                 // 802
                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);  // 803
                }                                                                                                      // 804
            })();                                                                                                      // 805
                                                                                                                       // 806
            return result;                                                                                             // 807
        })();                                                                                                          // 808
    }                                                                                                                  // 809
                                                                                                                       // 810
    return encoded;                                                                                                    // 811
};                                                                                                                     // 812
                                                                                                                       // 813
/**                                                                                                                    // 814
 * Should be used to decode bytes to plain param                                                                       // 815
 *                                                                                                                     // 816
 * @method decodeParam                                                                                                 // 817
 * @param {String} type                                                                                                // 818
 * @param {String} bytes                                                                                               // 819
 * @return {Object} plain param                                                                                        // 820
 */                                                                                                                    // 821
SolidityCoder.prototype.decodeParam = function (type, bytes) {                                                         // 822
    return this.decodeParams([type], bytes)[0];                                                                        // 823
};                                                                                                                     // 824
                                                                                                                       // 825
/**                                                                                                                    // 826
 * Should be used to decode list of params                                                                             // 827
 *                                                                                                                     // 828
 * @method decodeParam                                                                                                 // 829
 * @param {Array} types                                                                                                // 830
 * @param {String} bytes                                                                                               // 831
 * @return {Array} array of plain params                                                                               // 832
 */                                                                                                                    // 833
SolidityCoder.prototype.decodeParams = function (types, bytes) {                                                       // 834
    var solidityTypes = this.getSolidityTypes(types);                                                                  // 835
    var offsets = this.getOffsets(types, solidityTypes);                                                               // 836
                                                                                                                       // 837
    return solidityTypes.map(function (solidityType, index) {                                                          // 838
        return solidityType.decode(bytes, offsets[index],  types[index], index);                                       // 839
    });                                                                                                                // 840
};                                                                                                                     // 841
                                                                                                                       // 842
SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {                                                 // 843
    var lengths =  solidityTypes.map(function (solidityType, index) {                                                  // 844
        return solidityType.staticPartLength(types[index]);                                                            // 845
    });                                                                                                                // 846
                                                                                                                       // 847
    for (var i = 1; i < lengths.length; i++) {                                                                         // 848
         // sum with length of previous element                                                                        // 849
        lengths[i] += lengths[i - 1];                                                                                  // 850
    }                                                                                                                  // 851
                                                                                                                       // 852
    return lengths.map(function (length, index) {                                                                      // 853
        // remove the current length, so the length is sum of previous elements                                        // 854
        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);                                    // 855
        return length - staticPartLength;                                                                              // 856
    });                                                                                                                // 857
};                                                                                                                     // 858
                                                                                                                       // 859
SolidityCoder.prototype.getSolidityTypes = function (types) {                                                          // 860
    var self = this;                                                                                                   // 861
    return types.map(function (type) {                                                                                 // 862
        return self._requireType(type);                                                                                // 863
    });                                                                                                                // 864
};                                                                                                                     // 865
                                                                                                                       // 866
var coder = new SolidityCoder([                                                                                        // 867
    new SolidityTypeAddress(),                                                                                         // 868
    new SolidityTypeBool(),                                                                                            // 869
    new SolidityTypeInt(),                                                                                             // 870
    new SolidityTypeUInt(),                                                                                            // 871
    new SolidityTypeDynamicBytes(),                                                                                    // 872
    new SolidityTypeBytes(),                                                                                           // 873
    new SolidityTypeString(),                                                                                          // 874
    new SolidityTypeReal(),                                                                                            // 875
    new SolidityTypeUReal()                                                                                            // 876
]);                                                                                                                    // 877
                                                                                                                       // 878
module.exports = coder;                                                                                                // 879
                                                                                                                       // 880
                                                                                                                       // 881
},{"./address":4,"./bool":5,"./bytes":6,"./dynamicbytes":8,"./formatters":9,"./int":10,"./real":12,"./string":13,"./uint":15,"./ureal":16}],8:[function(require,module,exports){
var f = require('./formatters');                                                                                       // 883
var SolidityType = require('./type');                                                                                  // 884
                                                                                                                       // 885
var SolidityTypeDynamicBytes = function () {                                                                           // 886
    this._inputFormatter = f.formatInputDynamicBytes;                                                                  // 887
    this._outputFormatter = f.formatOutputDynamicBytes;                                                                // 888
};                                                                                                                     // 889
                                                                                                                       // 890
SolidityTypeDynamicBytes.prototype = new SolidityType({});                                                             // 891
SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;                                             // 892
                                                                                                                       // 893
SolidityTypeDynamicBytes.prototype.isType = function (name) {                                                          // 894
    return !!name.match(/^bytes(\[([0-9]*)\])*$/);                                                                     // 895
};                                                                                                                     // 896
                                                                                                                       // 897
SolidityTypeDynamicBytes.prototype.staticPartLength = function (name) {                                                // 898
    return 32 * this.staticArrayLength(name);                                                                          // 899
};                                                                                                                     // 900
                                                                                                                       // 901
SolidityTypeDynamicBytes.prototype.isDynamicType = function () {                                                       // 902
    return true;                                                                                                       // 903
};                                                                                                                     // 904
                                                                                                                       // 905
module.exports = SolidityTypeDynamicBytes;                                                                             // 906
                                                                                                                       // 907
                                                                                                                       // 908
},{"./formatters":9,"./type":14}],9:[function(require,module,exports){                                                 // 909
/*                                                                                                                     // 910
    This file is part of web3.js.                                                                                      // 911
                                                                                                                       // 912
    web3.js is free software: you can redistribute it and/or modify                                                    // 913
    it under the terms of the GNU Lesser General Public License as published by                                        // 914
    the Free Software Foundation, either version 3 of the License, or                                                  // 915
    (at your option) any later version.                                                                                // 916
                                                                                                                       // 917
    web3.js is distributed in the hope that it will be useful,                                                         // 918
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 919
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 920
    GNU Lesser General Public License for more details.                                                                // 921
                                                                                                                       // 922
    You should have received a copy of the GNU Lesser General Public License                                           // 923
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 924
*/                                                                                                                     // 925
/**                                                                                                                    // 926
 * @file formatters.js                                                                                                 // 927
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 928
 * @date 2015                                                                                                          // 929
 */                                                                                                                    // 930
                                                                                                                       // 931
var BigNumber = require('bignumber.js');                                                                               // 932
var utils = require('../utils/utils');                                                                                 // 933
var c = require('../utils/config');                                                                                    // 934
var SolidityParam = require('./param');                                                                                // 935
                                                                                                                       // 936
                                                                                                                       // 937
/**                                                                                                                    // 938
 * Formats input value to byte representation of int                                                                   // 939
 * If value is negative, return it's two's complement                                                                  // 940
 * If the value is floating point, round it down                                                                       // 941
 *                                                                                                                     // 942
 * @method formatInputInt                                                                                              // 943
 * @param {String|Number|BigNumber} value that needs to be formatted                                                   // 944
 * @returns {SolidityParam}                                                                                            // 945
 */                                                                                                                    // 946
var formatInputInt = function (value) {                                                                                // 947
    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);                                                                   // 948
    var result = utils.padLeft(utils.toTwosComplement(value).round().toString(16), 64);                                // 949
    return new SolidityParam(result);                                                                                  // 950
};                                                                                                                     // 951
                                                                                                                       // 952
/**                                                                                                                    // 953
 * Formats input bytes                                                                                                 // 954
 *                                                                                                                     // 955
 * @method formatInputBytes                                                                                            // 956
 * @param {String}                                                                                                     // 957
 * @returns {SolidityParam}                                                                                            // 958
 */                                                                                                                    // 959
var formatInputBytes = function (value) {                                                                              // 960
    var result = utils.toHex(value).substr(2);                                                                         // 961
    var l = Math.floor((result.length + 63) / 64);                                                                     // 962
    result = utils.padRight(result, l * 64);                                                                           // 963
    return new SolidityParam(result);                                                                                  // 964
};                                                                                                                     // 965
                                                                                                                       // 966
/**                                                                                                                    // 967
 * Formats input bytes                                                                                                 // 968
 *                                                                                                                     // 969
 * @method formatDynamicInputBytes                                                                                     // 970
 * @param {String}                                                                                                     // 971
 * @returns {SolidityParam}                                                                                            // 972
 */                                                                                                                    // 973
var formatInputDynamicBytes = function (value) {                                                                       // 974
    var result = utils.toHex(value).substr(2);                                                                         // 975
    var length = result.length / 2;                                                                                    // 976
    var l = Math.floor((result.length + 63) / 64);                                                                     // 977
    result = utils.padRight(result, l * 64);                                                                           // 978
    return new SolidityParam(formatInputInt(length).value + result);                                                   // 979
};                                                                                                                     // 980
                                                                                                                       // 981
/**                                                                                                                    // 982
 * Formats input value to byte representation of string                                                                // 983
 *                                                                                                                     // 984
 * @method formatInputString                                                                                           // 985
 * @param {String}                                                                                                     // 986
 * @returns {SolidityParam}                                                                                            // 987
 */                                                                                                                    // 988
var formatInputString = function (value) {                                                                             // 989
    var result = utils.fromUtf8(value).substr(2);                                                                      // 990
    var length = result.length / 2;                                                                                    // 991
    var l = Math.floor((result.length + 63) / 64);                                                                     // 992
    result = utils.padRight(result, l * 64);                                                                           // 993
    return new SolidityParam(formatInputInt(length).value + result);                                                   // 994
};                                                                                                                     // 995
                                                                                                                       // 996
/**                                                                                                                    // 997
 * Formats input value to byte representation of bool                                                                  // 998
 *                                                                                                                     // 999
 * @method formatInputBool                                                                                             // 1000
 * @param {Boolean}                                                                                                    // 1001
 * @returns {SolidityParam}                                                                                            // 1002
 */                                                                                                                    // 1003
var formatInputBool = function (value) {                                                                               // 1004
    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');             // 1005
    return new SolidityParam(result);                                                                                  // 1006
};                                                                                                                     // 1007
                                                                                                                       // 1008
/**                                                                                                                    // 1009
 * Formats input value to byte representation of real                                                                  // 1010
 * Values are multiplied by 2^m and encoded as integers                                                                // 1011
 *                                                                                                                     // 1012
 * @method formatInputReal                                                                                             // 1013
 * @param {String|Number|BigNumber}                                                                                    // 1014
 * @returns {SolidityParam}                                                                                            // 1015
 */                                                                                                                    // 1016
var formatInputReal = function (value) {                                                                               // 1017
    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));                                      // 1018
};                                                                                                                     // 1019
                                                                                                                       // 1020
/**                                                                                                                    // 1021
 * Check if input value is negative                                                                                    // 1022
 *                                                                                                                     // 1023
 * @method signedIsNegative                                                                                            // 1024
 * @param {String} value is hex format                                                                                 // 1025
 * @returns {Boolean} true if it is negative, otherwise false                                                          // 1026
 */                                                                                                                    // 1027
var signedIsNegative = function (value) {                                                                              // 1028
    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';                                   // 1029
};                                                                                                                     // 1030
                                                                                                                       // 1031
/**                                                                                                                    // 1032
 * Formats right-aligned output bytes to int                                                                           // 1033
 *                                                                                                                     // 1034
 * @method formatOutputInt                                                                                             // 1035
 * @param {SolidityParam} param                                                                                        // 1036
 * @returns {BigNumber} right-aligned output bytes formatted to big number                                             // 1037
 */                                                                                                                    // 1038
var formatOutputInt = function (param) {                                                                               // 1039
    var value = param.staticPart() || "0";                                                                             // 1040
                                                                                                                       // 1041
    // check if it's negative number                                                                                   // 1042
    // it it is, return two's complement                                                                               // 1043
    if (signedIsNegative(value)) {                                                                                     // 1044
        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
    }                                                                                                                  // 1046
    return new BigNumber(value, 16);                                                                                   // 1047
};                                                                                                                     // 1048
                                                                                                                       // 1049
/**                                                                                                                    // 1050
 * Formats right-aligned output bytes to uint                                                                          // 1051
 *                                                                                                                     // 1052
 * @method formatOutputUInt                                                                                            // 1053
 * @param {SolidityParam}                                                                                              // 1054
 * @returns {BigNumeber} right-aligned output bytes formatted to uint                                                  // 1055
 */                                                                                                                    // 1056
var formatOutputUInt = function (param) {                                                                              // 1057
    var value = param.staticPart() || "0";                                                                             // 1058
    return new BigNumber(value, 16);                                                                                   // 1059
};                                                                                                                     // 1060
                                                                                                                       // 1061
/**                                                                                                                    // 1062
 * Formats right-aligned output bytes to real                                                                          // 1063
 *                                                                                                                     // 1064
 * @method formatOutputReal                                                                                            // 1065
 * @param {SolidityParam}                                                                                              // 1066
 * @returns {BigNumber} input bytes formatted to real                                                                  // 1067
 */                                                                                                                    // 1068
var formatOutputReal = function (param) {                                                                              // 1069
    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));                                                // 1070
};                                                                                                                     // 1071
                                                                                                                       // 1072
/**                                                                                                                    // 1073
 * Formats right-aligned output bytes to ureal                                                                         // 1074
 *                                                                                                                     // 1075
 * @method formatOutputUReal                                                                                           // 1076
 * @param {SolidityParam}                                                                                              // 1077
 * @returns {BigNumber} input bytes formatted to ureal                                                                 // 1078
 */                                                                                                                    // 1079
var formatOutputUReal = function (param) {                                                                             // 1080
    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));                                               // 1081
};                                                                                                                     // 1082
                                                                                                                       // 1083
/**                                                                                                                    // 1084
 * Should be used to format output bool                                                                                // 1085
 *                                                                                                                     // 1086
 * @method formatOutputBool                                                                                            // 1087
 * @param {SolidityParam}                                                                                              // 1088
 * @returns {Boolean} right-aligned input bytes formatted to bool                                                      // 1089
 */                                                                                                                    // 1090
var formatOutputBool = function (param) {                                                                              // 1091
    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;   // 1092
};                                                                                                                     // 1093
                                                                                                                       // 1094
/**                                                                                                                    // 1095
 * Should be used to format output bytes                                                                               // 1096
 *                                                                                                                     // 1097
 * @method formatOutputBytes                                                                                           // 1098
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1099
 * @returns {String} hex string                                                                                        // 1100
 */                                                                                                                    // 1101
var formatOutputBytes = function (param) {                                                                             // 1102
    return '0x' + param.staticPart();                                                                                  // 1103
};                                                                                                                     // 1104
                                                                                                                       // 1105
/**                                                                                                                    // 1106
 * Should be used to format output bytes                                                                               // 1107
 *                                                                                                                     // 1108
 * @method formatOutputDynamicBytes                                                                                    // 1109
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1110
 * @returns {String} hex string                                                                                        // 1111
 */                                                                                                                    // 1112
var formatOutputDynamicBytes = function (param) {                                                                      // 1113
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1114
    return '0x' + param.dynamicPart().substr(64, length);                                                              // 1115
};                                                                                                                     // 1116
                                                                                                                       // 1117
/**                                                                                                                    // 1118
 * Should be used to format output string                                                                              // 1119
 *                                                                                                                     // 1120
 * @method formatOutputString                                                                                          // 1121
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1122
 * @returns {String} ascii string                                                                                      // 1123
 */                                                                                                                    // 1124
var formatOutputString = function (param) {                                                                            // 1125
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1126
    return utils.toUtf8(param.dynamicPart().substr(64, length));                                                       // 1127
};                                                                                                                     // 1128
                                                                                                                       // 1129
/**                                                                                                                    // 1130
 * Should be used to format output address                                                                             // 1131
 *                                                                                                                     // 1132
 * @method formatOutputAddress                                                                                         // 1133
 * @param {SolidityParam} right-aligned input bytes                                                                    // 1134
 * @returns {String} address                                                                                           // 1135
 */                                                                                                                    // 1136
var formatOutputAddress = function (param) {                                                                           // 1137
    var value = param.staticPart();                                                                                    // 1138
    return "0x" + value.slice(value.length - 40, value.length);                                                        // 1139
};                                                                                                                     // 1140
                                                                                                                       // 1141
module.exports = {                                                                                                     // 1142
    formatInputInt: formatInputInt,                                                                                    // 1143
    formatInputBytes: formatInputBytes,                                                                                // 1144
    formatInputDynamicBytes: formatInputDynamicBytes,                                                                  // 1145
    formatInputString: formatInputString,                                                                              // 1146
    formatInputBool: formatInputBool,                                                                                  // 1147
    formatInputReal: formatInputReal,                                                                                  // 1148
    formatOutputInt: formatOutputInt,                                                                                  // 1149
    formatOutputUInt: formatOutputUInt,                                                                                // 1150
    formatOutputReal: formatOutputReal,                                                                                // 1151
    formatOutputUReal: formatOutputUReal,                                                                              // 1152
    formatOutputBool: formatOutputBool,                                                                                // 1153
    formatOutputBytes: formatOutputBytes,                                                                              // 1154
    formatOutputDynamicBytes: formatOutputDynamicBytes,                                                                // 1155
    formatOutputString: formatOutputString,                                                                            // 1156
    formatOutputAddress: formatOutputAddress                                                                           // 1157
};                                                                                                                     // 1158
                                                                                                                       // 1159
                                                                                                                       // 1160
},{"../utils/config":18,"../utils/utils":20,"./param":11,"bignumber.js":"bignumber.js"}],10:[function(require,module,exports){
var f = require('./formatters');                                                                                       // 1162
var SolidityType = require('./type');                                                                                  // 1163
                                                                                                                       // 1164
/**                                                                                                                    // 1165
 * SolidityTypeInt is a prootype that represents int type                                                              // 1166
 * It matches:                                                                                                         // 1167
 * int                                                                                                                 // 1168
 * int[]                                                                                                               // 1169
 * int[4]                                                                                                              // 1170
 * int[][]                                                                                                             // 1171
 * int[3][]                                                                                                            // 1172
 * int[][6][], ...                                                                                                     // 1173
 * int32                                                                                                               // 1174
 * int64[]                                                                                                             // 1175
 * int8[4]                                                                                                             // 1176
 * int256[][]                                                                                                          // 1177
 * int[3][]                                                                                                            // 1178
 * int64[][6][], ...                                                                                                   // 1179
 */                                                                                                                    // 1180
var SolidityTypeInt = function () {                                                                                    // 1181
    this._inputFormatter = f.formatInputInt;                                                                           // 1182
    this._outputFormatter = f.formatOutputInt;                                                                         // 1183
};                                                                                                                     // 1184
                                                                                                                       // 1185
SolidityTypeInt.prototype = new SolidityType({});                                                                      // 1186
SolidityTypeInt.prototype.constructor = SolidityTypeInt;                                                               // 1187
                                                                                                                       // 1188
SolidityTypeInt.prototype.isType = function (name) {                                                                   // 1189
    return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);                                                              // 1190
};                                                                                                                     // 1191
                                                                                                                       // 1192
SolidityTypeInt.prototype.staticPartLength = function (name) {                                                         // 1193
    return 32 * this.staticArrayLength(name);                                                                          // 1194
};                                                                                                                     // 1195
                                                                                                                       // 1196
module.exports = SolidityTypeInt;                                                                                      // 1197
                                                                                                                       // 1198
},{"./formatters":9,"./type":14}],11:[function(require,module,exports){                                                // 1199
/*                                                                                                                     // 1200
    This file is part of web3.js.                                                                                      // 1201
                                                                                                                       // 1202
    web3.js is free software: you can redistribute it and/or modify                                                    // 1203
    it under the terms of the GNU Lesser General Public License as published by                                        // 1204
    the Free Software Foundation, either version 3 of the License, or                                                  // 1205
    (at your option) any later version.                                                                                // 1206
                                                                                                                       // 1207
    web3.js is distributed in the hope that it will be useful,                                                         // 1208
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1209
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1210
    GNU Lesser General Public License for more details.                                                                // 1211
                                                                                                                       // 1212
    You should have received a copy of the GNU Lesser General Public License                                           // 1213
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1214
*/                                                                                                                     // 1215
/**                                                                                                                    // 1216
 * @file param.js                                                                                                      // 1217
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1218
 * @date 2015                                                                                                          // 1219
 */                                                                                                                    // 1220
                                                                                                                       // 1221
var utils = require('../utils/utils');                                                                                 // 1222
                                                                                                                       // 1223
/**                                                                                                                    // 1224
 * SolidityParam object prototype.                                                                                     // 1225
 * Should be used when encoding, decoding solidity bytes                                                               // 1226
 */                                                                                                                    // 1227
var SolidityParam = function (value, offset) {                                                                         // 1228
    this.value = value || '';                                                                                          // 1229
    this.offset = offset; // offset in bytes                                                                           // 1230
};                                                                                                                     // 1231
                                                                                                                       // 1232
/**                                                                                                                    // 1233
 * This method should be used to get length of params's dynamic part                                                   // 1234
 *                                                                                                                     // 1235
 * @method dynamicPartLength                                                                                           // 1236
 * @returns {Number} length of dynamic part (in bytes)                                                                 // 1237
 */                                                                                                                    // 1238
SolidityParam.prototype.dynamicPartLength = function () {                                                              // 1239
    return this.dynamicPart().length / 2;                                                                              // 1240
};                                                                                                                     // 1241
                                                                                                                       // 1242
/**                                                                                                                    // 1243
 * This method should be used to create copy of solidity param with different offset                                   // 1244
 *                                                                                                                     // 1245
 * @method withOffset                                                                                                  // 1246
 * @param {Number} offset length in bytes                                                                              // 1247
 * @returns {SolidityParam} new solidity param with applied offset                                                     // 1248
 */                                                                                                                    // 1249
SolidityParam.prototype.withOffset = function (offset) {                                                               // 1250
    return new SolidityParam(this.value, offset);                                                                      // 1251
};                                                                                                                     // 1252
                                                                                                                       // 1253
/**                                                                                                                    // 1254
 * This method should be used to combine solidity params together                                                      // 1255
 * eg. when appending an array                                                                                         // 1256
 *                                                                                                                     // 1257
 * @method combine                                                                                                     // 1258
 * @param {SolidityParam} param with which we should combine                                                           // 1259
 * @param {SolidityParam} result of combination                                                                        // 1260
 */                                                                                                                    // 1261
SolidityParam.prototype.combine = function (param) {                                                                   // 1262
    return new SolidityParam(this.value + param.value);                                                                // 1263
};                                                                                                                     // 1264
                                                                                                                       // 1265
/**                                                                                                                    // 1266
 * This method should be called to check if param has dynamic size.                                                    // 1267
 * If it has, it returns true, otherwise false                                                                         // 1268
 *                                                                                                                     // 1269
 * @method isDynamic                                                                                                   // 1270
 * @returns {Boolean}                                                                                                  // 1271
 */                                                                                                                    // 1272
SolidityParam.prototype.isDynamic = function () {                                                                      // 1273
    return this.offset !== undefined;                                                                                  // 1274
};                                                                                                                     // 1275
                                                                                                                       // 1276
/**                                                                                                                    // 1277
 * This method should be called to transform offset to bytes                                                           // 1278
 *                                                                                                                     // 1279
 * @method offsetAsBytes                                                                                               // 1280
 * @returns {String} bytes representation of offset                                                                    // 1281
 */                                                                                                                    // 1282
SolidityParam.prototype.offsetAsBytes = function () {                                                                  // 1283
    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);               // 1284
};                                                                                                                     // 1285
                                                                                                                       // 1286
/**                                                                                                                    // 1287
 * This method should be called to get static part of param                                                            // 1288
 *                                                                                                                     // 1289
 * @method staticPart                                                                                                  // 1290
 * @returns {String} offset if it is a dynamic param, otherwise value                                                  // 1291
 */                                                                                                                    // 1292
SolidityParam.prototype.staticPart = function () {                                                                     // 1293
    if (!this.isDynamic()) {                                                                                           // 1294
        return this.value;                                                                                             // 1295
    }                                                                                                                  // 1296
    return this.offsetAsBytes();                                                                                       // 1297
};                                                                                                                     // 1298
                                                                                                                       // 1299
/**                                                                                                                    // 1300
 * This method should be called to get dynamic part of param                                                           // 1301
 *                                                                                                                     // 1302
 * @method dynamicPart                                                                                                 // 1303
 * @returns {String} returns a value if it is a dynamic param, otherwise empty string                                  // 1304
 */                                                                                                                    // 1305
SolidityParam.prototype.dynamicPart = function () {                                                                    // 1306
    return this.isDynamic() ? this.value : '';                                                                         // 1307
};                                                                                                                     // 1308
                                                                                                                       // 1309
/**                                                                                                                    // 1310
 * This method should be called to encode param                                                                        // 1311
 *                                                                                                                     // 1312
 * @method encode                                                                                                      // 1313
 * @returns {String}                                                                                                   // 1314
 */                                                                                                                    // 1315
SolidityParam.prototype.encode = function () {                                                                         // 1316
    return this.staticPart() + this.dynamicPart();                                                                     // 1317
};                                                                                                                     // 1318
                                                                                                                       // 1319
/**                                                                                                                    // 1320
 * This method should be called to encode array of params                                                              // 1321
 *                                                                                                                     // 1322
 * @method encodeList                                                                                                  // 1323
 * @param {Array[SolidityParam]} params                                                                                // 1324
 * @returns {String}                                                                                                   // 1325
 */                                                                                                                    // 1326
SolidityParam.encodeList = function (params) {                                                                         // 1327
                                                                                                                       // 1328
    // updating offsets                                                                                                // 1329
    var totalOffset = params.length * 32;                                                                              // 1330
    var offsetParams = params.map(function (param) {                                                                   // 1331
        if (!param.isDynamic()) {                                                                                      // 1332
            return param;                                                                                              // 1333
        }                                                                                                              // 1334
        var offset = totalOffset;                                                                                      // 1335
        totalOffset += param.dynamicPartLength();                                                                      // 1336
        return param.withOffset(offset);                                                                               // 1337
    });                                                                                                                // 1338
                                                                                                                       // 1339
    // encode everything!                                                                                              // 1340
    return offsetParams.reduce(function (result, param) {                                                              // 1341
        return result + param.dynamicPart();                                                                           // 1342
    }, offsetParams.reduce(function (result, param) {                                                                  // 1343
        return result + param.staticPart();                                                                            // 1344
    }, ''));                                                                                                           // 1345
};                                                                                                                     // 1346
                                                                                                                       // 1347
                                                                                                                       // 1348
                                                                                                                       // 1349
module.exports = SolidityParam;                                                                                        // 1350
                                                                                                                       // 1351
                                                                                                                       // 1352
},{"../utils/utils":20}],12:[function(require,module,exports){                                                         // 1353
var f = require('./formatters');                                                                                       // 1354
var SolidityType = require('./type');                                                                                  // 1355
                                                                                                                       // 1356
/**                                                                                                                    // 1357
 * SolidityTypeReal is a prootype that represents real type                                                            // 1358
 * It matches:                                                                                                         // 1359
 * real                                                                                                                // 1360
 * real[]                                                                                                              // 1361
 * real[4]                                                                                                             // 1362
 * real[][]                                                                                                            // 1363
 * real[3][]                                                                                                           // 1364
 * real[][6][], ...                                                                                                    // 1365
 * real32                                                                                                              // 1366
 * real64[]                                                                                                            // 1367
 * real8[4]                                                                                                            // 1368
 * real256[][]                                                                                                         // 1369
 * real[3][]                                                                                                           // 1370
 * real64[][6][], ...                                                                                                  // 1371
 */                                                                                                                    // 1372
var SolidityTypeReal = function () {                                                                                   // 1373
    this._inputFormatter = f.formatInputReal;                                                                          // 1374
    this._outputFormatter = f.formatOutputReal;                                                                        // 1375
};                                                                                                                     // 1376
                                                                                                                       // 1377
SolidityTypeReal.prototype = new SolidityType({});                                                                     // 1378
SolidityTypeReal.prototype.constructor = SolidityTypeReal;                                                             // 1379
                                                                                                                       // 1380
SolidityTypeReal.prototype.isType = function (name) {                                                                  // 1381
    return !!name.match(/real([0-9]*)?(\[([0-9]*)\])?/);                                                               // 1382
};                                                                                                                     // 1383
                                                                                                                       // 1384
SolidityTypeReal.prototype.staticPartLength = function (name) {                                                        // 1385
    return 32 * this.staticArrayLength(name);                                                                          // 1386
};                                                                                                                     // 1387
                                                                                                                       // 1388
module.exports = SolidityTypeReal;                                                                                     // 1389
                                                                                                                       // 1390
},{"./formatters":9,"./type":14}],13:[function(require,module,exports){                                                // 1391
var f = require('./formatters');                                                                                       // 1392
var SolidityType = require('./type');                                                                                  // 1393
                                                                                                                       // 1394
var SolidityTypeString = function () {                                                                                 // 1395
    this._inputFormatter = f.formatInputString;                                                                        // 1396
    this._outputFormatter = f.formatOutputString;                                                                      // 1397
};                                                                                                                     // 1398
                                                                                                                       // 1399
SolidityTypeString.prototype = new SolidityType({});                                                                   // 1400
SolidityTypeString.prototype.constructor = SolidityTypeString;                                                         // 1401
                                                                                                                       // 1402
SolidityTypeString.prototype.isType = function (name) {                                                                // 1403
    return !!name.match(/^string(\[([0-9]*)\])*$/);                                                                    // 1404
};                                                                                                                     // 1405
                                                                                                                       // 1406
SolidityTypeString.prototype.staticPartLength = function (name) {                                                      // 1407
    return 32 * this.staticArrayLength(name);                                                                          // 1408
};                                                                                                                     // 1409
                                                                                                                       // 1410
SolidityTypeString.prototype.isDynamicType = function () {                                                             // 1411
    return true;                                                                                                       // 1412
};                                                                                                                     // 1413
                                                                                                                       // 1414
module.exports = SolidityTypeString;                                                                                   // 1415
                                                                                                                       // 1416
                                                                                                                       // 1417
},{"./formatters":9,"./type":14}],14:[function(require,module,exports){                                                // 1418
var f = require('./formatters');                                                                                       // 1419
var SolidityParam = require('./param');                                                                                // 1420
                                                                                                                       // 1421
/**                                                                                                                    // 1422
 * SolidityType prototype is used to encode/decode solidity params of certain type                                     // 1423
 */                                                                                                                    // 1424
var SolidityType = function (config) {                                                                                 // 1425
    this._inputFormatter = config.inputFormatter;                                                                      // 1426
    this._outputFormatter = config.outputFormatter;                                                                    // 1427
};                                                                                                                     // 1428
                                                                                                                       // 1429
/**                                                                                                                    // 1430
 * Should be used to determine if this SolidityType do match given name                                                // 1431
 *                                                                                                                     // 1432
 * @method isType                                                                                                      // 1433
 * @param {String} name                                                                                                // 1434
 * @return {Bool} true if type match this SolidityType, otherwise false                                                // 1435
 */                                                                                                                    // 1436
SolidityType.prototype.isType = function (name) {                                                                      // 1437
    throw "this method should be overrwritten for type " + name;                                                       // 1438
};                                                                                                                     // 1439
                                                                                                                       // 1440
/**                                                                                                                    // 1441
 * Should be used to determine what is the length of static part in given type                                         // 1442
 *                                                                                                                     // 1443
 * @method staticPartLength                                                                                            // 1444
 * @param {String} name                                                                                                // 1445
 * @return {Number} length of static part in bytes                                                                     // 1446
 */                                                                                                                    // 1447
SolidityType.prototype.staticPartLength = function (name) {                                                            // 1448
    throw "this method should be overrwritten for type: " + name;                                                      // 1449
};                                                                                                                     // 1450
                                                                                                                       // 1451
/**                                                                                                                    // 1452
 * Should be used to determine if type is dynamic array                                                                // 1453
 * eg:                                                                                                                 // 1454
 * "type[]" => true                                                                                                    // 1455
 * "type[4]" => false                                                                                                  // 1456
 *                                                                                                                     // 1457
 * @method isDynamicArray                                                                                              // 1458
 * @param {String} name                                                                                                // 1459
 * @return {Bool} true if the type is dynamic array                                                                    // 1460
 */                                                                                                                    // 1461
SolidityType.prototype.isDynamicArray = function (name) {                                                              // 1462
    var nestedTypes = this.nestedTypes(name);                                                                          // 1463
    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                  // 1464
};                                                                                                                     // 1465
                                                                                                                       // 1466
/**                                                                                                                    // 1467
 * Should be used to determine if type is static array                                                                 // 1468
 * eg:                                                                                                                 // 1469
 * "type[]" => false                                                                                                   // 1470
 * "type[4]" => true                                                                                                   // 1471
 *                                                                                                                     // 1472
 * @method isStaticArray                                                                                               // 1473
 * @param {String} name                                                                                                // 1474
 * @return {Bool} true if the type is static array                                                                     // 1475
 */                                                                                                                    // 1476
SolidityType.prototype.isStaticArray = function (name) {                                                               // 1477
    var nestedTypes = this.nestedTypes(name);                                                                          // 1478
    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                 // 1479
};                                                                                                                     // 1480
                                                                                                                       // 1481
/**                                                                                                                    // 1482
 * Should return length of static array                                                                                // 1483
 * eg.                                                                                                                 // 1484
 * "int[32]" => 32                                                                                                     // 1485
 * "int256[14]" => 14                                                                                                  // 1486
 * "int[2][3]" => 3                                                                                                    // 1487
 * "int" => 1                                                                                                          // 1488
 * "int[1]" => 1                                                                                                       // 1489
 * "int[]" => 1                                                                                                        // 1490
 *                                                                                                                     // 1491
 * @method staticArrayLength                                                                                           // 1492
 * @param {String} name                                                                                                // 1493
 * @return {Number} static array length                                                                                // 1494
 */                                                                                                                    // 1495
SolidityType.prototype.staticArrayLength = function (name) {                                                           // 1496
    var nestedTypes = this.nestedTypes(name);                                                                          // 1497
    if (nestedTypes) {                                                                                                 // 1498
       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);                                  // 1499
    }                                                                                                                  // 1500
    return 1;                                                                                                          // 1501
};                                                                                                                     // 1502
                                                                                                                       // 1503
/**                                                                                                                    // 1504
 * Should return nested type                                                                                           // 1505
 * eg.                                                                                                                 // 1506
 * "int[32]" => "int"                                                                                                  // 1507
 * "int256[14]" => "int256"                                                                                            // 1508
 * "int[2][3]" => "int[2]"                                                                                             // 1509
 * "int" => "int"                                                                                                      // 1510
 * "int[]" => "int"                                                                                                    // 1511
 *                                                                                                                     // 1512
 * @method nestedName                                                                                                  // 1513
 * @param {String} name                                                                                                // 1514
 * @return {String} nested name                                                                                        // 1515
 */                                                                                                                    // 1516
SolidityType.prototype.nestedName = function (name) {                                                                  // 1517
    // remove last [] in name                                                                                          // 1518
    var nestedTypes = this.nestedTypes(name);                                                                          // 1519
    if (!nestedTypes) {                                                                                                // 1520
        return name;                                                                                                   // 1521
    }                                                                                                                  // 1522
                                                                                                                       // 1523
    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);                                   // 1524
};                                                                                                                     // 1525
                                                                                                                       // 1526
/**                                                                                                                    // 1527
 * Should return true if type has dynamic size by default                                                              // 1528
 * such types are "string", "bytes"                                                                                    // 1529
 *                                                                                                                     // 1530
 * @method isDynamicType                                                                                               // 1531
 * @param {String} name                                                                                                // 1532
 * @return {Bool} true if is dynamic, otherwise false                                                                  // 1533
 */                                                                                                                    // 1534
SolidityType.prototype.isDynamicType = function () {                                                                   // 1535
    return false;                                                                                                      // 1536
};                                                                                                                     // 1537
                                                                                                                       // 1538
/**                                                                                                                    // 1539
 * Should return array of nested types                                                                                 // 1540
 * eg.                                                                                                                 // 1541
 * "int[2][3][]" => ["[2]", "[3]", "[]"]                                                                               // 1542
 * "int[] => ["[]"]                                                                                                    // 1543
 * "int" => null                                                                                                       // 1544
 *                                                                                                                     // 1545
 * @method nestedTypes                                                                                                 // 1546
 * @param {String} name                                                                                                // 1547
 * @return {Array} array of nested types                                                                               // 1548
 */                                                                                                                    // 1549
SolidityType.prototype.nestedTypes = function (name) {                                                                 // 1550
    // return list of strings eg. "[]", "[3]", "[]", "[2]"                                                             // 1551
    return name.match(/(\[[0-9]*\])/g);                                                                                // 1552
};                                                                                                                     // 1553
                                                                                                                       // 1554
/**                                                                                                                    // 1555
 * Should be used to encode the value                                                                                  // 1556
 *                                                                                                                     // 1557
 * @method encode                                                                                                      // 1558
 * @param {Object} value                                                                                               // 1559
 * @param {String} name                                                                                                // 1560
 * @return {String} encoded value                                                                                      // 1561
 */                                                                                                                    // 1562
SolidityType.prototype.encode = function (value, name) {                                                               // 1563
    var self = this;                                                                                                   // 1564
    if (this.isDynamicArray(name)) {                                                                                   // 1565
                                                                                                                       // 1566
        return (function () {                                                                                          // 1567
            var length = value.length;                          // in int                                              // 1568
            var nestedName = self.nestedName(name);                                                                    // 1569
                                                                                                                       // 1570
            var result = [];                                                                                           // 1571
            result.push(f.formatInputInt(length).encode());                                                            // 1572
                                                                                                                       // 1573
            value.forEach(function (v) {                                                                               // 1574
                result.push(self.encode(v, nestedName));                                                               // 1575
            });                                                                                                        // 1576
                                                                                                                       // 1577
            return result;                                                                                             // 1578
        })();                                                                                                          // 1579
                                                                                                                       // 1580
    } else if (this.isStaticArray(name)) {                                                                             // 1581
                                                                                                                       // 1582
        return (function () {                                                                                          // 1583
            var length = self.staticArrayLength(name);          // in int                                              // 1584
            var nestedName = self.nestedName(name);                                                                    // 1585
                                                                                                                       // 1586
            var result = [];                                                                                           // 1587
            for (var i = 0; i < length; i++) {                                                                         // 1588
                result.push(self.encode(value[i], nestedName));                                                        // 1589
            }                                                                                                          // 1590
                                                                                                                       // 1591
            return result;                                                                                             // 1592
        })();                                                                                                          // 1593
                                                                                                                       // 1594
    }                                                                                                                  // 1595
                                                                                                                       // 1596
    return this._inputFormatter(value, name).encode();                                                                 // 1597
};                                                                                                                     // 1598
                                                                                                                       // 1599
/**                                                                                                                    // 1600
 * Should be used to decode value from bytes                                                                           // 1601
 *                                                                                                                     // 1602
 * @method decode                                                                                                      // 1603
 * @param {String} bytes                                                                                               // 1604
 * @param {Number} offset in bytes                                                                                     // 1605
 * @param {String} name type name                                                                                      // 1606
 * @returns {Object} decoded value                                                                                     // 1607
 */                                                                                                                    // 1608
SolidityType.prototype.decode = function (bytes, offset, name) {                                                       // 1609
    var self = this;                                                                                                   // 1610
                                                                                                                       // 1611
    if (this.isDynamicArray(name)) {                                                                                   // 1612
                                                                                                                       // 1613
        return (function () {                                                                                          // 1614
            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes                               // 1615
            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int                                 // 1616
            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes                               // 1617
                                                                                                                       // 1618
            var nestedName = self.nestedName(name);                                                                    // 1619
            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes                               // 1620
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1621
            var result = [];                                                                                           // 1622
                                                                                                                       // 1623
            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1624
                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1625
            }                                                                                                          // 1626
                                                                                                                       // 1627
            return result;                                                                                             // 1628
        })();                                                                                                          // 1629
                                                                                                                       // 1630
    } else if (this.isStaticArray(name)) {                                                                             // 1631
                                                                                                                       // 1632
        return (function () {                                                                                          // 1633
            var length = self.staticArrayLength(name);                      // in int                                  // 1634
            var arrayStart = offset;                                        // in bytes                                // 1635
                                                                                                                       // 1636
            var nestedName = self.nestedName(name);                                                                    // 1637
            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes                                // 1638
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1639
            var result = [];                                                                                           // 1640
                                                                                                                       // 1641
            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1642
                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1643
            }                                                                                                          // 1644
                                                                                                                       // 1645
            return result;                                                                                             // 1646
        })();                                                                                                          // 1647
    } else if (this.isDynamicType(name)) {                                                                             // 1648
                                                                                                                       // 1649
        return (function () {                                                                                          // 1650
            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes                        // 1651
            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes                        // 1652
            var roundedLength = Math.floor((length + 31) / 32);                     // in int                          // 1653
                                                                                                                       // 1654
            return self._outputFormatter(new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0));
        })();                                                                                                          // 1656
    }                                                                                                                  // 1657
                                                                                                                       // 1658
    var length = this.staticPartLength(name);                                                                          // 1659
    return this._outputFormatter(new SolidityParam(bytes.substr(offset * 2, length * 2)));                             // 1660
};                                                                                                                     // 1661
                                                                                                                       // 1662
module.exports = SolidityType;                                                                                         // 1663
                                                                                                                       // 1664
},{"./formatters":9,"./param":11}],15:[function(require,module,exports){                                               // 1665
var f = require('./formatters');                                                                                       // 1666
var SolidityType = require('./type');                                                                                  // 1667
                                                                                                                       // 1668
/**                                                                                                                    // 1669
 * SolidityTypeUInt is a prootype that represents uint type                                                            // 1670
 * It matches:                                                                                                         // 1671
 * uint                                                                                                                // 1672
 * uint[]                                                                                                              // 1673
 * uint[4]                                                                                                             // 1674
 * uint[][]                                                                                                            // 1675
 * uint[3][]                                                                                                           // 1676
 * uint[][6][], ...                                                                                                    // 1677
 * uint32                                                                                                              // 1678
 * uint64[]                                                                                                            // 1679
 * uint8[4]                                                                                                            // 1680
 * uint256[][]                                                                                                         // 1681
 * uint[3][]                                                                                                           // 1682
 * uint64[][6][], ...                                                                                                  // 1683
 */                                                                                                                    // 1684
var SolidityTypeUInt = function () {                                                                                   // 1685
    this._inputFormatter = f.formatInputInt;                                                                           // 1686
    this._outputFormatter = f.formatOutputUInt;                                                                        // 1687
};                                                                                                                     // 1688
                                                                                                                       // 1689
SolidityTypeUInt.prototype = new SolidityType({});                                                                     // 1690
SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;                                                             // 1691
                                                                                                                       // 1692
SolidityTypeUInt.prototype.isType = function (name) {                                                                  // 1693
    return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);                                                             // 1694
};                                                                                                                     // 1695
                                                                                                                       // 1696
SolidityTypeUInt.prototype.staticPartLength = function (name) {                                                        // 1697
    return 32 * this.staticArrayLength(name);                                                                          // 1698
};                                                                                                                     // 1699
                                                                                                                       // 1700
module.exports = SolidityTypeUInt;                                                                                     // 1701
                                                                                                                       // 1702
},{"./formatters":9,"./type":14}],16:[function(require,module,exports){                                                // 1703
var f = require('./formatters');                                                                                       // 1704
var SolidityType = require('./type');                                                                                  // 1705
                                                                                                                       // 1706
/**                                                                                                                    // 1707
 * SolidityTypeUReal is a prootype that represents ureal type                                                          // 1708
 * It matches:                                                                                                         // 1709
 * ureal                                                                                                               // 1710
 * ureal[]                                                                                                             // 1711
 * ureal[4]                                                                                                            // 1712
 * ureal[][]                                                                                                           // 1713
 * ureal[3][]                                                                                                          // 1714
 * ureal[][6][], ...                                                                                                   // 1715
 * ureal32                                                                                                             // 1716
 * ureal64[]                                                                                                           // 1717
 * ureal8[4]                                                                                                           // 1718
 * ureal256[][]                                                                                                        // 1719
 * ureal[3][]                                                                                                          // 1720
 * ureal64[][6][], ...                                                                                                 // 1721
 */                                                                                                                    // 1722
var SolidityTypeUReal = function () {                                                                                  // 1723
    this._inputFormatter = f.formatInputReal;                                                                          // 1724
    this._outputFormatter = f.formatOutputUReal;                                                                       // 1725
};                                                                                                                     // 1726
                                                                                                                       // 1727
SolidityTypeUReal.prototype = new SolidityType({});                                                                    // 1728
SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;                                                           // 1729
                                                                                                                       // 1730
SolidityTypeUReal.prototype.isType = function (name) {                                                                 // 1731
    return !!name.match(/^ureal([0-9]*)?(\[([0-9]*)\])*$/);                                                            // 1732
};                                                                                                                     // 1733
                                                                                                                       // 1734
SolidityTypeUReal.prototype.staticPartLength = function (name) {                                                       // 1735
    return 32 * this.staticArrayLength(name);                                                                          // 1736
};                                                                                                                     // 1737
                                                                                                                       // 1738
module.exports = SolidityTypeUReal;                                                                                    // 1739
                                                                                                                       // 1740
},{"./formatters":9,"./type":14}],17:[function(require,module,exports){                                                // 1741
'use strict';                                                                                                          // 1742
                                                                                                                       // 1743
// go env doesn't have and need XMLHttpRequest                                                                         // 1744
if (typeof XMLHttpRequest === 'undefined') {                                                                           // 1745
    exports.XMLHttpRequest = {};                                                                                       // 1746
} else {                                                                                                               // 1747
    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line                                                     // 1748
}                                                                                                                      // 1749
                                                                                                                       // 1750
                                                                                                                       // 1751
},{}],18:[function(require,module,exports){                                                                            // 1752
/*                                                                                                                     // 1753
    This file is part of web3.js.                                                                                      // 1754
                                                                                                                       // 1755
    web3.js is free software: you can redistribute it and/or modify                                                    // 1756
    it under the terms of the GNU Lesser General Public License as published by                                        // 1757
    the Free Software Foundation, either version 3 of the License, or                                                  // 1758
    (at your option) any later version.                                                                                // 1759
                                                                                                                       // 1760
    web3.js is distributed in the hope that it will be useful,                                                         // 1761
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1762
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1763
    GNU Lesser General Public License for more details.                                                                // 1764
                                                                                                                       // 1765
    You should have received a copy of the GNU Lesser General Public License                                           // 1766
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1767
*/                                                                                                                     // 1768
/** @file config.js                                                                                                    // 1769
 * @authors:                                                                                                           // 1770
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 1771
 * @date 2015                                                                                                          // 1772
 */                                                                                                                    // 1773
                                                                                                                       // 1774
/**                                                                                                                    // 1775
 * Utils                                                                                                               // 1776
 *                                                                                                                     // 1777
 * @module utils                                                                                                       // 1778
 */                                                                                                                    // 1779
                                                                                                                       // 1780
/**                                                                                                                    // 1781
 * Utility functions                                                                                                   // 1782
 *                                                                                                                     // 1783
 * @class [utils] config                                                                                               // 1784
 * @constructor                                                                                                        // 1785
 */                                                                                                                    // 1786
                                                                                                                       // 1787
                                                                                                                       // 1788
/// required to define ETH_BIGNUMBER_ROUNDING_MODE                                                                     // 1789
var BigNumber = require('bignumber.js');                                                                               // 1790
                                                                                                                       // 1791
var ETH_UNITS = [                                                                                                      // 1792
    'wei',                                                                                                             // 1793
    'kwei',                                                                                                            // 1794
    'Mwei',                                                                                                            // 1795
    'Gwei',                                                                                                            // 1796
    'szabo',                                                                                                           // 1797
    'finney',                                                                                                          // 1798
    'femtoether',                                                                                                      // 1799
    'picoether',                                                                                                       // 1800
    'nanoether',                                                                                                       // 1801
    'microether',                                                                                                      // 1802
    'milliether',                                                                                                      // 1803
    'nano',                                                                                                            // 1804
    'micro',                                                                                                           // 1805
    'milli',                                                                                                           // 1806
    'ether',                                                                                                           // 1807
    'grand',                                                                                                           // 1808
    'Mether',                                                                                                          // 1809
    'Gether',                                                                                                          // 1810
    'Tether',                                                                                                          // 1811
    'Pether',                                                                                                          // 1812
    'Eether',                                                                                                          // 1813
    'Zether',                                                                                                          // 1814
    'Yether',                                                                                                          // 1815
    'Nether',                                                                                                          // 1816
    'Dether',                                                                                                          // 1817
    'Vether',                                                                                                          // 1818
    'Uether'                                                                                                           // 1819
];                                                                                                                     // 1820
                                                                                                                       // 1821
module.exports = {                                                                                                     // 1822
    ETH_PADDING: 32,                                                                                                   // 1823
    ETH_SIGNATURE_LENGTH: 4,                                                                                           // 1824
    ETH_UNITS: ETH_UNITS,                                                                                              // 1825
    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },                                              // 1826
    ETH_POLLING_TIMEOUT: 1000/2,                                                                                       // 1827
    defaultBlock: 'latest',                                                                                            // 1828
    defaultAccount: undefined                                                                                          // 1829
};                                                                                                                     // 1830
                                                                                                                       // 1831
                                                                                                                       // 1832
},{"bignumber.js":"bignumber.js"}],19:[function(require,module,exports){                                               // 1833
/*                                                                                                                     // 1834
    This file is part of web3.js.                                                                                      // 1835
                                                                                                                       // 1836
    web3.js is free software: you can redistribute it and/or modify                                                    // 1837
    it under the terms of the GNU Lesser General Public License as published by                                        // 1838
    the Free Software Foundation, either version 3 of the License, or                                                  // 1839
    (at your option) any later version.                                                                                // 1840
                                                                                                                       // 1841
    web3.js is distributed in the hope that it will be useful,                                                         // 1842
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1843
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1844
    GNU Lesser General Public License for more details.                                                                // 1845
                                                                                                                       // 1846
    You should have received a copy of the GNU Lesser General Public License                                           // 1847
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1848
*/                                                                                                                     // 1849
/**                                                                                                                    // 1850
 * @file sha3.js                                                                                                       // 1851
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1852
 * @date 2015                                                                                                          // 1853
 */                                                                                                                    // 1854
                                                                                                                       // 1855
var CryptoJS = require('crypto-js');                                                                                   // 1856
var sha3 = require('crypto-js/sha3');                                                                                  // 1857
                                                                                                                       // 1858
module.exports = function (value, options) {                                                                           // 1859
    if (options && options.encoding === 'hex') {                                                                       // 1860
        if (value.length > 2 && value.substr(0, 2) === '0x') {                                                         // 1861
            value = value.substr(2);                                                                                   // 1862
        }                                                                                                              // 1863
        value = CryptoJS.enc.Hex.parse(value);                                                                         // 1864
    }                                                                                                                  // 1865
                                                                                                                       // 1866
    return sha3(value, {                                                                                               // 1867
        outputLength: 256                                                                                              // 1868
    }).toString();                                                                                                     // 1869
};                                                                                                                     // 1870
                                                                                                                       // 1871
                                                                                                                       // 1872
},{"crypto-js":58,"crypto-js/sha3":79}],20:[function(require,module,exports){                                          // 1873
/*                                                                                                                     // 1874
    This file is part of web3.js.                                                                                      // 1875
                                                                                                                       // 1876
    web3.js is free software: you can redistribute it and/or modify                                                    // 1877
    it under the terms of the GNU Lesser General Public License as published by                                        // 1878
    the Free Software Foundation, either version 3 of the License, or                                                  // 1879
    (at your option) any later version.                                                                                // 1880
                                                                                                                       // 1881
    web3.js is distributed in the hope that it will be useful,                                                         // 1882
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1883
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1884
    GNU Lesser General Public License for more details.                                                                // 1885
                                                                                                                       // 1886
    You should have received a copy of the GNU Lesser General Public License                                           // 1887
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1888
*/                                                                                                                     // 1889
/**                                                                                                                    // 1890
 * @file utils.js                                                                                                      // 1891
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1892
 * @date 2015                                                                                                          // 1893
 */                                                                                                                    // 1894
                                                                                                                       // 1895
/**                                                                                                                    // 1896
 * Utils                                                                                                               // 1897
 *                                                                                                                     // 1898
 * @module utils                                                                                                       // 1899
 */                                                                                                                    // 1900
                                                                                                                       // 1901
/**                                                                                                                    // 1902
 * Utility functions                                                                                                   // 1903
 *                                                                                                                     // 1904
 * @class [utils] utils                                                                                                // 1905
 * @constructor                                                                                                        // 1906
 */                                                                                                                    // 1907
                                                                                                                       // 1908
                                                                                                                       // 1909
var BigNumber = require('bignumber.js');                                                                               // 1910
var sha3 = require('./sha3.js');                                                                                       // 1911
var utf8 = require('utf8');                                                                                            // 1912
                                                                                                                       // 1913
var unitMap = {                                                                                                        // 1914
    'noether':      '0',                                                                                               // 1915
    'wei':          '1',                                                                                               // 1916
    'kwei':         '1000',                                                                                            // 1917
    'Kwei':         '1000',                                                                                            // 1918
    'babbage':      '1000',                                                                                            // 1919
    'femtoether':   '1000',                                                                                            // 1920
    'mwei':         '1000000',                                                                                         // 1921
    'Mwei':         '1000000',                                                                                         // 1922
    'lovelace':     '1000000',                                                                                         // 1923
    'picoether':    '1000000',                                                                                         // 1924
    'gwei':         '1000000000',                                                                                      // 1925
    'Gwei':         '1000000000',                                                                                      // 1926
    'shannon':      '1000000000',                                                                                      // 1927
    'nanoether':    '1000000000',                                                                                      // 1928
    'nano':         '1000000000',                                                                                      // 1929
    'szabo':        '1000000000000',                                                                                   // 1930
    'microether':   '1000000000000',                                                                                   // 1931
    'micro':        '1000000000000',                                                                                   // 1932
    'finney':       '1000000000000000',                                                                                // 1933
    'milliether':    '1000000000000000',                                                                               // 1934
    'milli':         '1000000000000000',                                                                               // 1935
    'ether':        '1000000000000000000',                                                                             // 1936
    'kether':       '1000000000000000000000',                                                                          // 1937
    'grand':        '1000000000000000000000',                                                                          // 1938
    'mether':       '1000000000000000000000000',                                                                       // 1939
    'gether':       '1000000000000000000000000000',                                                                    // 1940
    'tether':       '1000000000000000000000000000000'                                                                  // 1941
};                                                                                                                     // 1942
                                                                                                                       // 1943
/**                                                                                                                    // 1944
 * Should be called to pad string to expected length                                                                   // 1945
 *                                                                                                                     // 1946
 * @method padLeft                                                                                                     // 1947
 * @param {String} string to be padded                                                                                 // 1948
 * @param {Number} characters that result string should have                                                           // 1949
 * @param {String} sign, by default 0                                                                                  // 1950
 * @returns {String} right aligned string                                                                              // 1951
 */                                                                                                                    // 1952
var padLeft = function (string, chars, sign) {                                                                         // 1953
    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;                                      // 1954
};                                                                                                                     // 1955
                                                                                                                       // 1956
/**                                                                                                                    // 1957
 * Should be called to pad string to expected length                                                                   // 1958
 *                                                                                                                     // 1959
 * @method padRight                                                                                                    // 1960
 * @param {String} string to be padded                                                                                 // 1961
 * @param {Number} characters that result string should have                                                           // 1962
 * @param {String} sign, by default 0                                                                                  // 1963
 * @returns {String} right aligned string                                                                              // 1964
 */                                                                                                                    // 1965
var padRight = function (string, chars, sign) {                                                                        // 1966
    return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));                                    // 1967
};                                                                                                                     // 1968
                                                                                                                       // 1969
/**                                                                                                                    // 1970
 * Should be called to get utf8 from it's hex representation                                                           // 1971
 *                                                                                                                     // 1972
 * @method toUtf8                                                                                                      // 1973
 * @param {String} string in hex                                                                                       // 1974
 * @returns {String} ascii string representation of hex value                                                          // 1975
 */                                                                                                                    // 1976
var toUtf8 = function(hex) {                                                                                           // 1977
// Find termination                                                                                                    // 1978
    var str = "";                                                                                                      // 1979
    var i = 0, l = hex.length;                                                                                         // 1980
    if (hex.substring(0, 2) === '0x') {                                                                                // 1981
        i = 2;                                                                                                         // 1982
    }                                                                                                                  // 1983
    for (; i < l; i+=2) {                                                                                              // 1984
        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 1985
        if (code === 0)                                                                                                // 1986
            break;                                                                                                     // 1987
        str += String.fromCharCode(code);                                                                              // 1988
    }                                                                                                                  // 1989
                                                                                                                       // 1990
    return utf8.decode(str);                                                                                           // 1991
};                                                                                                                     // 1992
                                                                                                                       // 1993
/**                                                                                                                    // 1994
 * Should be called to get ascii from it's hex representation                                                          // 1995
 *                                                                                                                     // 1996
 * @method toAscii                                                                                                     // 1997
 * @param {String} string in hex                                                                                       // 1998
 * @returns {String} ascii string representation of hex value                                                          // 1999
 */                                                                                                                    // 2000
var toAscii = function(hex) {                                                                                          // 2001
// Find termination                                                                                                    // 2002
    var str = "";                                                                                                      // 2003
    var i = 0, l = hex.length;                                                                                         // 2004
    if (hex.substring(0, 2) === '0x') {                                                                                // 2005
        i = 2;                                                                                                         // 2006
    }                                                                                                                  // 2007
    for (; i < l; i+=2) {                                                                                              // 2008
        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 2009
        str += String.fromCharCode(code);                                                                              // 2010
    }                                                                                                                  // 2011
                                                                                                                       // 2012
    return str;                                                                                                        // 2013
};                                                                                                                     // 2014
                                                                                                                       // 2015
/**                                                                                                                    // 2016
 * Should be called to get hex representation (prefixed by 0x) of utf8 string                                          // 2017
 *                                                                                                                     // 2018
 * @method fromUtf8                                                                                                    // 2019
 * @param {String} string                                                                                              // 2020
 * @param {Number} optional padding                                                                                    // 2021
 * @returns {String} hex representation of input string                                                                // 2022
 */                                                                                                                    // 2023
var fromUtf8 = function(str) {                                                                                         // 2024
    str = utf8.encode(str);                                                                                            // 2025
    var hex = "";                                                                                                      // 2026
    for(var i = 0; i < str.length; i++) {                                                                              // 2027
        var code = str.charCodeAt(i);                                                                                  // 2028
        if (code === 0)                                                                                                // 2029
            break;                                                                                                     // 2030
        var n = code.toString(16);                                                                                     // 2031
        hex += n.length < 2 ? '0' + n : n;                                                                             // 2032
    }                                                                                                                  // 2033
                                                                                                                       // 2034
    return "0x" + hex;                                                                                                 // 2035
};                                                                                                                     // 2036
                                                                                                                       // 2037
/**                                                                                                                    // 2038
 * Should be called to get hex representation (prefixed by 0x) of ascii string                                         // 2039
 *                                                                                                                     // 2040
 * @method fromAscii                                                                                                   // 2041
 * @param {String} string                                                                                              // 2042
 * @param {Number} optional padding                                                                                    // 2043
 * @returns {String} hex representation of input string                                                                // 2044
 */                                                                                                                    // 2045
var fromAscii = function(str) {                                                                                        // 2046
    var hex = "";                                                                                                      // 2047
    for(var i = 0; i < str.length; i++) {                                                                              // 2048
        var code = str.charCodeAt(i);                                                                                  // 2049
        var n = code.toString(16);                                                                                     // 2050
        hex += n.length < 2 ? '0' + n : n;                                                                             // 2051
    }                                                                                                                  // 2052
                                                                                                                       // 2053
    return "0x" + hex;                                                                                                 // 2054
};                                                                                                                     // 2055
                                                                                                                       // 2056
/**                                                                                                                    // 2057
 * Should be used to create full function/event name from json abi                                                     // 2058
 *                                                                                                                     // 2059
 * @method transformToFullName                                                                                         // 2060
 * @param {Object} json-abi                                                                                            // 2061
 * @return {String} full fnction/event name                                                                            // 2062
 */                                                                                                                    // 2063
var transformToFullName = function (json) {                                                                            // 2064
    if (json.name.indexOf('(') !== -1) {                                                                               // 2065
        return json.name;                                                                                              // 2066
    }                                                                                                                  // 2067
                                                                                                                       // 2068
    var typeName = json.inputs.map(function(i){return i.type; }).join();                                               // 2069
    return json.name + '(' + typeName + ')';                                                                           // 2070
};                                                                                                                     // 2071
                                                                                                                       // 2072
/**                                                                                                                    // 2073
 * Should be called to get display name of contract function                                                           // 2074
 *                                                                                                                     // 2075
 * @method extractDisplayName                                                                                          // 2076
 * @param {String} name of function/event                                                                              // 2077
 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply                                 // 2078
 */                                                                                                                    // 2079
var extractDisplayName = function (name) {                                                                             // 2080
    var length = name.indexOf('(');                                                                                    // 2081
    return length !== -1 ? name.substr(0, length) : name;                                                              // 2082
};                                                                                                                     // 2083
                                                                                                                       // 2084
/// @returns overloaded part of function/event name                                                                    // 2085
var extractTypeName = function (name) {                                                                                // 2086
    /// TODO: make it invulnerable                                                                                     // 2087
    var length = name.indexOf('(');                                                                                    // 2088
    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : "";              // 2089
};                                                                                                                     // 2090
                                                                                                                       // 2091
/**                                                                                                                    // 2092
 * Converts value to it's decimal representation in string                                                             // 2093
 *                                                                                                                     // 2094
 * @method toDecimal                                                                                                   // 2095
 * @param {String|Number|BigNumber}                                                                                    // 2096
 * @return {String}                                                                                                    // 2097
 */                                                                                                                    // 2098
var toDecimal = function (value) {                                                                                     // 2099
    return toBigNumber(value).toNumber();                                                                              // 2100
};                                                                                                                     // 2101
                                                                                                                       // 2102
/**                                                                                                                    // 2103
 * Converts value to it's hex representation                                                                           // 2104
 *                                                                                                                     // 2105
 * @method fromDecimal                                                                                                 // 2106
 * @param {String|Number|BigNumber}                                                                                    // 2107
 * @return {String}                                                                                                    // 2108
 */                                                                                                                    // 2109
var fromDecimal = function (value) {                                                                                   // 2110
    var number = toBigNumber(value);                                                                                   // 2111
    var result = number.toString(16);                                                                                  // 2112
                                                                                                                       // 2113
    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;                                              // 2114
};                                                                                                                     // 2115
                                                                                                                       // 2116
/**                                                                                                                    // 2117
 * Auto converts any given value into it's hex representation.                                                         // 2118
 *                                                                                                                     // 2119
 * And even stringifys objects before.                                                                                 // 2120
 *                                                                                                                     // 2121
 * @method toHex                                                                                                       // 2122
 * @param {String|Number|BigNumber|Object}                                                                             // 2123
 * @return {String}                                                                                                    // 2124
 */                                                                                                                    // 2125
var toHex = function (val) {                                                                                           // 2126
    /*jshint maxcomplexity: 8 */                                                                                       // 2127
                                                                                                                       // 2128
    if (isBoolean(val))                                                                                                // 2129
        return fromDecimal(+val);                                                                                      // 2130
                                                                                                                       // 2131
    if (isBigNumber(val))                                                                                              // 2132
        return fromDecimal(val);                                                                                       // 2133
                                                                                                                       // 2134
    if (isObject(val))                                                                                                 // 2135
        return fromUtf8(JSON.stringify(val));                                                                          // 2136
                                                                                                                       // 2137
    // if its a negative number, pass it through fromDecimal                                                           // 2138
    if (isString(val)) {                                                                                               // 2139
        if (val.indexOf('-0x') === 0)                                                                                  // 2140
            return fromDecimal(val);                                                                                   // 2141
        else if(val.indexOf('0x') === 0)                                                                               // 2142
            return val;                                                                                                // 2143
        else if (!isFinite(val))                                                                                       // 2144
            return fromAscii(val);                                                                                     // 2145
    }                                                                                                                  // 2146
                                                                                                                       // 2147
    return fromDecimal(val);                                                                                           // 2148
};                                                                                                                     // 2149
                                                                                                                       // 2150
/**                                                                                                                    // 2151
 * Returns value of unit in Wei                                                                                        // 2152
 *                                                                                                                     // 2153
 * @method getValueOfUnit                                                                                              // 2154
 * @param {String} unit the unit to convert to, default ether                                                          // 2155
 * @returns {BigNumber} value of the unit (in Wei)                                                                     // 2156
 * @throws error if the unit is not correct:w                                                                          // 2157
 */                                                                                                                    // 2158
var getValueOfUnit = function (unit) {                                                                                 // 2159
    unit = unit ? unit.toLowerCase() : 'ether';                                                                        // 2160
    var unitValue = unitMap[unit];                                                                                     // 2161
    if (unitValue === undefined) {                                                                                     // 2162
        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
    }                                                                                                                  // 2164
    return new BigNumber(unitValue, 10);                                                                               // 2165
};                                                                                                                     // 2166
                                                                                                                       // 2167
/**                                                                                                                    // 2168
 * Takes a number of wei and converts it to any other ether unit.                                                      // 2169
 *                                                                                                                     // 2170
 * Possible units are:                                                                                                 // 2171
 *   SI Short   SI Full        Effigy       Other                                                                      // 2172
 * - kwei       femtoether     babbage                                                                                 // 2173
 * - mwei       picoether      lovelace                                                                                // 2174
 * - gwei       nanoether      shannon      nano                                                                       // 2175
 * - --         microether     szabo        micro                                                                      // 2176
 * - --         milliether     finney       milli                                                                      // 2177
 * - ether      --             --                                                                                      // 2178
 * - kether                    --           grand                                                                      // 2179
 * - mether                                                                                                            // 2180
 * - gether                                                                                                            // 2181
 * - tether                                                                                                            // 2182
 *                                                                                                                     // 2183
 * @method fromWei                                                                                                     // 2184
 * @param {Number|String} number can be a number, number string or a HEX of a decimal                                  // 2185
 * @param {String} unit the unit to convert to, default ether                                                          // 2186
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2187
*/                                                                                                                     // 2188
var fromWei = function(number, unit) {                                                                                 // 2189
    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));                                             // 2190
                                                                                                                       // 2191
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2192
};                                                                                                                     // 2193
                                                                                                                       // 2194
/**                                                                                                                    // 2195
 * Takes a number of a unit and converts it to wei.                                                                    // 2196
 *                                                                                                                     // 2197
 * Possible units are:                                                                                                 // 2198
 *   SI Short   SI Full        Effigy       Other                                                                      // 2199
 * - kwei       femtoether     babbage                                                                                 // 2200
 * - mwei       picoether      lovelace                                                                                // 2201
 * - gwei       nanoether      shannon      nano                                                                       // 2202
 * - --         microether     szabo        micro                                                                      // 2203
 * - --         microether     szabo        micro                                                                      // 2204
 * - --         milliether     finney       milli                                                                      // 2205
 * - ether      --             --                                                                                      // 2206
 * - kether                    --           grand                                                                      // 2207
 * - mether                                                                                                            // 2208
 * - gether                                                                                                            // 2209
 * - tether                                                                                                            // 2210
 *                                                                                                                     // 2211
 * @method toWei                                                                                                       // 2212
 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal                        // 2213
 * @param {String} unit the unit to convert from, default ether                                                        // 2214
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2215
*/                                                                                                                     // 2216
var toWei = function(number, unit) {                                                                                   // 2217
    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));                                                 // 2218
                                                                                                                       // 2219
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2220
};                                                                                                                     // 2221
                                                                                                                       // 2222
/**                                                                                                                    // 2223
 * Takes an input and transforms it into an bignumber                                                                  // 2224
 *                                                                                                                     // 2225
 * @method toBigNumber                                                                                                 // 2226
 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber                                          // 2227
 * @return {BigNumber} BigNumber                                                                                       // 2228
*/                                                                                                                     // 2229
var toBigNumber = function(number) {                                                                                   // 2230
    /*jshint maxcomplexity:5 */                                                                                        // 2231
    number = number || 0;                                                                                              // 2232
    if (isBigNumber(number))                                                                                           // 2233
        return number;                                                                                                 // 2234
                                                                                                                       // 2235
    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {                             // 2236
        return new BigNumber(number.replace('0x',''), 16);                                                             // 2237
    }                                                                                                                  // 2238
                                                                                                                       // 2239
    return new BigNumber(number.toString(10), 10);                                                                     // 2240
};                                                                                                                     // 2241
                                                                                                                       // 2242
/**                                                                                                                    // 2243
 * Takes and input transforms it into bignumber and if it is negative value, into two's complement                     // 2244
 *                                                                                                                     // 2245
 * @method toTwosComplement                                                                                            // 2246
 * @param {Number|String|BigNumber}                                                                                    // 2247
 * @return {BigNumber}                                                                                                 // 2248
 */                                                                                                                    // 2249
var toTwosComplement = function (number) {                                                                             // 2250
    var bigNumber = toBigNumber(number);                                                                               // 2251
    if (bigNumber.lessThan(0)) {                                                                                       // 2252
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
    }                                                                                                                  // 2254
    return bigNumber;                                                                                                  // 2255
};                                                                                                                     // 2256
                                                                                                                       // 2257
/**                                                                                                                    // 2258
 * Checks if the given string is strictly an address                                                                   // 2259
 *                                                                                                                     // 2260
 * @method isStrictAddress                                                                                             // 2261
 * @param {String} address the given HEX adress                                                                        // 2262
 * @return {Boolean}                                                                                                   // 2263
*/                                                                                                                     // 2264
var isStrictAddress = function (address) {                                                                             // 2265
    return /^0x[0-9a-f]{40}$/i.test(address);                                                                          // 2266
};                                                                                                                     // 2267
                                                                                                                       // 2268
/**                                                                                                                    // 2269
 * Checks if the given string is an address                                                                            // 2270
 *                                                                                                                     // 2271
 * @method isAddress                                                                                                   // 2272
 * @param {String} address the given HEX adress                                                                        // 2273
 * @return {Boolean}                                                                                                   // 2274
*/                                                                                                                     // 2275
var isAddress = function (address) {                                                                                   // 2276
    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {                                                                       // 2277
        // check if it has the basic requirements of an address                                                        // 2278
        return false;                                                                                                  // 2279
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {                           // 2280
        // If it's all small caps or all all caps, return true                                                         // 2281
        return true;                                                                                                   // 2282
    } else {                                                                                                           // 2283
        // Otherwise check each case                                                                                   // 2284
        return isChecksumAddress(address);                                                                             // 2285
    }                                                                                                                  // 2286
};                                                                                                                     // 2287
                                                                                                                       // 2288
                                                                                                                       // 2289
                                                                                                                       // 2290
/**                                                                                                                    // 2291
 * Checks if the given string is a checksummed address                                                                 // 2292
 *                                                                                                                     // 2293
 * @method isChecksumAddress                                                                                           // 2294
 * @param {String} address the given HEX adress                                                                        // 2295
 * @return {Boolean}                                                                                                   // 2296
*/                                                                                                                     // 2297
var isChecksumAddress = function (address) {                                                                           // 2298
    // Check each case                                                                                                 // 2299
    address = address.replace('0x','');                                                                                // 2300
    var addressHash = sha3(address.toLowerCase());                                                                     // 2301
                                                                                                                       // 2302
    for (var i = 0; i < 40; i++ ) {                                                                                    // 2303
        // the nth letter should be uppercase if the nth digit of casemap is 1                                         // 2304
        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
            return false;                                                                                              // 2306
        }                                                                                                              // 2307
    }                                                                                                                  // 2308
    return true;                                                                                                       // 2309
};                                                                                                                     // 2310
                                                                                                                       // 2311
                                                                                                                       // 2312
                                                                                                                       // 2313
/**                                                                                                                    // 2314
 * Makes a checksum address                                                                                            // 2315
 *                                                                                                                     // 2316
 * @method toChecksumAddress                                                                                           // 2317
 * @param {String} address the given HEX adress                                                                        // 2318
 * @return {String}                                                                                                    // 2319
*/                                                                                                                     // 2320
var toChecksumAddress = function (address) {                                                                           // 2321
    if (typeof address === 'undefined') return '';                                                                     // 2322
                                                                                                                       // 2323
    address = address.toLowerCase().replace('0x','');                                                                  // 2324
    var addressHash = sha3(address);                                                                                   // 2325
    var checksumAddress = '0x';                                                                                        // 2326
                                                                                                                       // 2327
    for (var i = 0; i < address.length; i++ ) {                                                                        // 2328
        // If ith character is 9 to f then make it uppercase                                                           // 2329
        if (parseInt(addressHash[i], 16) > 7) {                                                                        // 2330
          checksumAddress += address[i].toUpperCase();                                                                 // 2331
        } else {                                                                                                       // 2332
            checksumAddress += address[i];                                                                             // 2333
        }                                                                                                              // 2334
    }                                                                                                                  // 2335
    return checksumAddress;                                                                                            // 2336
};                                                                                                                     // 2337
                                                                                                                       // 2338
/**                                                                                                                    // 2339
 * Transforms given string to valid 20 bytes-length addres with 0x prefix                                              // 2340
 *                                                                                                                     // 2341
 * @method toAddress                                                                                                   // 2342
 * @param {String} address                                                                                             // 2343
 * @return {String} formatted address                                                                                  // 2344
 */                                                                                                                    // 2345
var toAddress = function (address) {                                                                                   // 2346
    if (isStrictAddress(address)) {                                                                                    // 2347
        return address;                                                                                                // 2348
    }                                                                                                                  // 2349
                                                                                                                       // 2350
    if (/^[0-9a-f]{40}$/.test(address)) {                                                                              // 2351
        return '0x' + address;                                                                                         // 2352
    }                                                                                                                  // 2353
                                                                                                                       // 2354
    return '0x' + padLeft(toHex(address).substr(2), 40);                                                               // 2355
};                                                                                                                     // 2356
                                                                                                                       // 2357
/**                                                                                                                    // 2358
 * Returns true if object is BigNumber, otherwise false                                                                // 2359
 *                                                                                                                     // 2360
 * @method isBigNumber                                                                                                 // 2361
 * @param {Object}                                                                                                     // 2362
 * @return {Boolean}                                                                                                   // 2363
 */                                                                                                                    // 2364
var isBigNumber = function (object) {                                                                                  // 2365
    return object instanceof BigNumber ||                                                                              // 2366
        (object && object.constructor && object.constructor.name === 'BigNumber');                                     // 2367
};                                                                                                                     // 2368
                                                                                                                       // 2369
/**                                                                                                                    // 2370
 * Returns true if object is string, otherwise false                                                                   // 2371
 *                                                                                                                     // 2372
 * @method isString                                                                                                    // 2373
 * @param {Object}                                                                                                     // 2374
 * @return {Boolean}                                                                                                   // 2375
 */                                                                                                                    // 2376
var isString = function (object) {                                                                                     // 2377
    return typeof object === 'string' ||                                                                               // 2378
        (object && object.constructor && object.constructor.name === 'String');                                        // 2379
};                                                                                                                     // 2380
                                                                                                                       // 2381
/**                                                                                                                    // 2382
 * Returns true if object is function, otherwise false                                                                 // 2383
 *                                                                                                                     // 2384
 * @method isFunction                                                                                                  // 2385
 * @param {Object}                                                                                                     // 2386
 * @return {Boolean}                                                                                                   // 2387
 */                                                                                                                    // 2388
var isFunction = function (object) {                                                                                   // 2389
    return typeof object === 'function';                                                                               // 2390
};                                                                                                                     // 2391
                                                                                                                       // 2392
/**                                                                                                                    // 2393
 * Returns true if object is Objet, otherwise false                                                                    // 2394
 *                                                                                                                     // 2395
 * @method isObject                                                                                                    // 2396
 * @param {Object}                                                                                                     // 2397
 * @return {Boolean}                                                                                                   // 2398
 */                                                                                                                    // 2399
var isObject = function (object) {                                                                                     // 2400
    return typeof object === 'object';                                                                                 // 2401
};                                                                                                                     // 2402
                                                                                                                       // 2403
/**                                                                                                                    // 2404
 * Returns true if object is boolean, otherwise false                                                                  // 2405
 *                                                                                                                     // 2406
 * @method isBoolean                                                                                                   // 2407
 * @param {Object}                                                                                                     // 2408
 * @return {Boolean}                                                                                                   // 2409
 */                                                                                                                    // 2410
var isBoolean = function (object) {                                                                                    // 2411
    return typeof object === 'boolean';                                                                                // 2412
};                                                                                                                     // 2413
                                                                                                                       // 2414
/**                                                                                                                    // 2415
 * Returns true if object is array, otherwise false                                                                    // 2416
 *                                                                                                                     // 2417
 * @method isArray                                                                                                     // 2418
 * @param {Object}                                                                                                     // 2419
 * @return {Boolean}                                                                                                   // 2420
 */                                                                                                                    // 2421
var isArray = function (object) {                                                                                      // 2422
    return object instanceof Array;                                                                                    // 2423
};                                                                                                                     // 2424
                                                                                                                       // 2425
/**                                                                                                                    // 2426
 * Returns true if given string is valid json object                                                                   // 2427
 *                                                                                                                     // 2428
 * @method isJson                                                                                                      // 2429
 * @param {String}                                                                                                     // 2430
 * @return {Boolean}                                                                                                   // 2431
 */                                                                                                                    // 2432
var isJson = function (str) {                                                                                          // 2433
    try {                                                                                                              // 2434
        return !!JSON.parse(str);                                                                                      // 2435
    } catch (e) {                                                                                                      // 2436
        return false;                                                                                                  // 2437
    }                                                                                                                  // 2438
};                                                                                                                     // 2439
                                                                                                                       // 2440
module.exports = {                                                                                                     // 2441
    padLeft: padLeft,                                                                                                  // 2442
    padRight: padRight,                                                                                                // 2443
    toHex: toHex,                                                                                                      // 2444
    toDecimal: toDecimal,                                                                                              // 2445
    fromDecimal: fromDecimal,                                                                                          // 2446
    toUtf8: toUtf8,                                                                                                    // 2447
    toAscii: toAscii,                                                                                                  // 2448
    fromUtf8: fromUtf8,                                                                                                // 2449
    fromAscii: fromAscii,                                                                                              // 2450
    transformToFullName: transformToFullName,                                                                          // 2451
    extractDisplayName: extractDisplayName,                                                                            // 2452
    extractTypeName: extractTypeName,                                                                                  // 2453
    toWei: toWei,                                                                                                      // 2454
    fromWei: fromWei,                                                                                                  // 2455
    toBigNumber: toBigNumber,                                                                                          // 2456
    toTwosComplement: toTwosComplement,                                                                                // 2457
    toAddress: toAddress,                                                                                              // 2458
    isBigNumber: isBigNumber,                                                                                          // 2459
    isStrictAddress: isStrictAddress,                                                                                  // 2460
    isAddress: isAddress,                                                                                              // 2461
    isChecksumAddress: isChecksumAddress,                                                                              // 2462
    toChecksumAddress: toChecksumAddress,                                                                              // 2463
    isFunction: isFunction,                                                                                            // 2464
    isString: isString,                                                                                                // 2465
    isObject: isObject,                                                                                                // 2466
    isBoolean: isBoolean,                                                                                              // 2467
    isArray: isArray,                                                                                                  // 2468
    isJson: isJson                                                                                                     // 2469
};                                                                                                                     // 2470
                                                                                                                       // 2471
},{"./sha3.js":19,"bignumber.js":"bignumber.js","utf8":84}],21:[function(require,module,exports){                      // 2472
module.exports={                                                                                                       // 2473
    "version": "0.15.3"                                                                                                // 2474
}                                                                                                                      // 2475
                                                                                                                       // 2476
},{}],22:[function(require,module,exports){                                                                            // 2477
/*                                                                                                                     // 2478
    This file is part of web3.js.                                                                                      // 2479
                                                                                                                       // 2480
    web3.js is free software: you can redistribute it and/or modify                                                    // 2481
    it under the terms of the GNU Lesser General Public License as published by                                        // 2482
    the Free Software Foundation, either version 3 of the License, or                                                  // 2483
    (at your option) any later version.                                                                                // 2484
                                                                                                                       // 2485
    web3.js is distributed in the hope that it will be useful,                                                         // 2486
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2487
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2488
    GNU Lesser General Public License for more details.                                                                // 2489
                                                                                                                       // 2490
    You should have received a copy of the GNU Lesser General Public License                                           // 2491
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2492
*/                                                                                                                     // 2493
/**                                                                                                                    // 2494
 * @file web3.js                                                                                                       // 2495
 * @authors:                                                                                                           // 2496
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 2497
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 2498
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 2499
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 2500
 *   Gav Wood <g@ethdev.com>                                                                                           // 2501
 * @date 2014                                                                                                          // 2502
 */                                                                                                                    // 2503
                                                                                                                       // 2504
var RequestManager = require('./web3/requestmanager');                                                                 // 2505
var Iban = require('./web3/iban');                                                                                     // 2506
var Eth = require('./web3/methods/eth');                                                                               // 2507
var DB = require('./web3/methods/db');                                                                                 // 2508
var Shh = require('./web3/methods/shh');                                                                               // 2509
var Net = require('./web3/methods/net');                                                                               // 2510
var Personal = require('./web3/methods/personal');                                                                     // 2511
var Settings = require('./web3/settings');                                                                             // 2512
var version = require('./version.json');                                                                               // 2513
var utils = require('./utils/utils');                                                                                  // 2514
var sha3 = require('./utils/sha3');                                                                                    // 2515
var extend = require('./web3/extend');                                                                                 // 2516
var Batch = require('./web3/batch');                                                                                   // 2517
var Property = require('./web3/property');                                                                             // 2518
var HttpProvider = require('./web3/httpprovider');                                                                     // 2519
var IpcProvider = require('./web3/ipcprovider');                                                                       // 2520
                                                                                                                       // 2521
                                                                                                                       // 2522
                                                                                                                       // 2523
function Web3 (provider) {                                                                                             // 2524
    this._requestManager = new RequestManager(provider);                                                               // 2525
    this.currentProvider = provider;                                                                                   // 2526
    this.eth = new Eth(this);                                                                                          // 2527
    this.db = new DB(this);                                                                                            // 2528
    this.shh = new Shh(this);                                                                                          // 2529
    this.net = new Net(this);                                                                                          // 2530
    this.personal = new Personal(this);                                                                                // 2531
    this.settings = new Settings();                                                                                    // 2532
    this.version = {                                                                                                   // 2533
        api: version.version                                                                                           // 2534
    };                                                                                                                 // 2535
    this.providers = {                                                                                                 // 2536
        HttpProvider: HttpProvider,                                                                                    // 2537
        IpcProvider: IpcProvider                                                                                       // 2538
    };                                                                                                                 // 2539
    this._extend = extend(this);                                                                                       // 2540
    this._extend({                                                                                                     // 2541
        properties: properties()                                                                                       // 2542
    });                                                                                                                // 2543
}                                                                                                                      // 2544
                                                                                                                       // 2545
// expose providers on the class                                                                                       // 2546
Web3.providers = {                                                                                                     // 2547
    HttpProvider: HttpProvider,                                                                                        // 2548
    IpcProvider: IpcProvider                                                                                           // 2549
};                                                                                                                     // 2550
                                                                                                                       // 2551
Web3.prototype.setProvider = function (provider) {                                                                     // 2552
    this._requestManager.setProvider(provider);                                                                        // 2553
    this.currentProvider = provider;                                                                                   // 2554
};                                                                                                                     // 2555
                                                                                                                       // 2556
Web3.prototype.reset = function (keepIsSyncing) {                                                                      // 2557
    this._requestManager.reset(keepIsSyncing);                                                                         // 2558
    this.settings = new Settings();                                                                                    // 2559
};                                                                                                                     // 2560
                                                                                                                       // 2561
Web3.prototype.toHex = utils.toHex;                                                                                    // 2562
Web3.prototype.toAscii = utils.toAscii;                                                                                // 2563
Web3.prototype.toUtf8 = utils.toUtf8;                                                                                  // 2564
Web3.prototype.fromAscii = utils.fromAscii;                                                                            // 2565
Web3.prototype.fromUtf8 = utils.fromUtf8;                                                                              // 2566
Web3.prototype.toDecimal = utils.toDecimal;                                                                            // 2567
Web3.prototype.fromDecimal = utils.fromDecimal;                                                                        // 2568
Web3.prototype.toBigNumber = utils.toBigNumber;                                                                        // 2569
Web3.prototype.toWei = utils.toWei;                                                                                    // 2570
Web3.prototype.fromWei = utils.fromWei;                                                                                // 2571
Web3.prototype.isAddress = utils.isAddress;                                                                            // 2572
Web3.prototype.isChecksumAddress = utils.isChecksumAddress;                                                            // 2573
Web3.prototype.toChecksumAddress = utils.toChecksumAddress;                                                            // 2574
Web3.prototype.isIBAN = utils.isIBAN;                                                                                  // 2575
Web3.prototype.sha3 = sha3;                                                                                            // 2576
                                                                                                                       // 2577
/**                                                                                                                    // 2578
 * Transforms direct icap to address                                                                                   // 2579
 */                                                                                                                    // 2580
Web3.prototype.fromICAP = function (icap) {                                                                            // 2581
    var iban = new Iban(icap);                                                                                         // 2582
    return iban.address();                                                                                             // 2583
};                                                                                                                     // 2584
                                                                                                                       // 2585
var properties = function () {                                                                                         // 2586
    return [                                                                                                           // 2587
        new Property({                                                                                                 // 2588
            name: 'version.node',                                                                                      // 2589
            getter: 'web3_clientVersion'                                                                               // 2590
        }),                                                                                                            // 2591
        new Property({                                                                                                 // 2592
            name: 'version.network',                                                                                   // 2593
            getter: 'net_version',                                                                                     // 2594
            inputFormatter: utils.toDecimal                                                                            // 2595
        }),                                                                                                            // 2596
        new Property({                                                                                                 // 2597
            name: 'version.ethereum',                                                                                  // 2598
            getter: 'eth_protocolVersion',                                                                             // 2599
            inputFormatter: utils.toDecimal                                                                            // 2600
        }),                                                                                                            // 2601
        new Property({                                                                                                 // 2602
            name: 'version.whisper',                                                                                   // 2603
            getter: 'shh_version',                                                                                     // 2604
            inputFormatter: utils.toDecimal                                                                            // 2605
        })                                                                                                             // 2606
    ];                                                                                                                 // 2607
};                                                                                                                     // 2608
                                                                                                                       // 2609
Web3.prototype.isConnected = function(){                                                                               // 2610
    return (this.currentProvider && this.currentProvider.isConnected());                                               // 2611
};                                                                                                                     // 2612
                                                                                                                       // 2613
Web3.prototype.createBatch = function () {                                                                             // 2614
    return new Batch(this);                                                                                            // 2615
};                                                                                                                     // 2616
                                                                                                                       // 2617
module.exports = Web3;                                                                                                 // 2618
                                                                                                                       // 2619
                                                                                                                       // 2620
},{"./utils/sha3":19,"./utils/utils":20,"./version.json":21,"./web3/batch":24,"./web3/extend":28,"./web3/httpprovider":32,"./web3/iban":33,"./web3/ipcprovider":34,"./web3/methods/db":37,"./web3/methods/eth":38,"./web3/methods/net":39,"./web3/methods/personal":40,"./web3/methods/shh":41,"./web3/property":44,"./web3/requestmanager":45,"./web3/settings":46}],23:[function(require,module,exports){
/*                                                                                                                     // 2622
    This file is part of web3.js.                                                                                      // 2623
                                                                                                                       // 2624
    web3.js is free software: you can redistribute it and/or modify                                                    // 2625
    it under the terms of the GNU Lesser General Public License as published by                                        // 2626
    the Free Software Foundation, either version 3 of the License, or                                                  // 2627
    (at your option) any later version.                                                                                // 2628
                                                                                                                       // 2629
    web3.js is distributed in the hope that it will be useful,                                                         // 2630
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2631
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2632
    GNU Lesser General Public License for more details.                                                                // 2633
                                                                                                                       // 2634
    You should have received a copy of the GNU Lesser General Public License                                           // 2635
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2636
*/                                                                                                                     // 2637
/**                                                                                                                    // 2638
 * @file allevents.js                                                                                                  // 2639
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2640
 * @date 2014                                                                                                          // 2641
 */                                                                                                                    // 2642
                                                                                                                       // 2643
var sha3 = require('../utils/sha3');                                                                                   // 2644
var SolidityEvent = require('./event');                                                                                // 2645
var formatters = require('./formatters');                                                                              // 2646
var utils = require('../utils/utils');                                                                                 // 2647
var Filter = require('./filter');                                                                                      // 2648
var watches = require('./methods/watches');                                                                            // 2649
                                                                                                                       // 2650
var AllSolidityEvents = function (requestManager, json, address) {                                                     // 2651
    this._requestManager = requestManager;                                                                             // 2652
    this._json = json;                                                                                                 // 2653
    this._address = address;                                                                                           // 2654
};                                                                                                                     // 2655
                                                                                                                       // 2656
AllSolidityEvents.prototype.encode = function (options) {                                                              // 2657
    options = options || {};                                                                                           // 2658
    var result = {};                                                                                                   // 2659
                                                                                                                       // 2660
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 2661
        return options[f] !== undefined;                                                                               // 2662
    }).forEach(function (f) {                                                                                          // 2663
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 2664
    });                                                                                                                // 2665
                                                                                                                       // 2666
    result.address = this._address;                                                                                    // 2667
                                                                                                                       // 2668
    return result;                                                                                                     // 2669
};                                                                                                                     // 2670
                                                                                                                       // 2671
AllSolidityEvents.prototype.decode = function (data) {                                                                 // 2672
    data.data = data.data || '';                                                                                       // 2673
    data.topics = data.topics || [];                                                                                   // 2674
                                                                                                                       // 2675
    var eventTopic = data.topics[0].slice(2);                                                                          // 2676
    var match = this._json.filter(function (j) {                                                                       // 2677
        return eventTopic === sha3(utils.transformToFullName(j));                                                      // 2678
    })[0];                                                                                                             // 2679
                                                                                                                       // 2680
    if (!match) { // cannot find matching event?                                                                       // 2681
        console.warn('cannot find event for log');                                                                     // 2682
        return data;                                                                                                   // 2683
    }                                                                                                                  // 2684
                                                                                                                       // 2685
    var event = new SolidityEvent(this._requestManager, match, this._address);                                         // 2686
    return event.decode(data);                                                                                         // 2687
};                                                                                                                     // 2688
                                                                                                                       // 2689
AllSolidityEvents.prototype.execute = function (options, callback) {                                                   // 2690
                                                                                                                       // 2691
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 2692
        callback = arguments[arguments.length - 1];                                                                    // 2693
        if(arguments.length === 1)                                                                                     // 2694
            options = null;                                                                                            // 2695
    }                                                                                                                  // 2696
                                                                                                                       // 2697
    var o = this.encode(options);                                                                                      // 2698
    var formatter = this.decode.bind(this);                                                                            // 2699
    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 2700
};                                                                                                                     // 2701
                                                                                                                       // 2702
AllSolidityEvents.prototype.attachToContract = function (contract) {                                                   // 2703
    var execute = this.execute.bind(this);                                                                             // 2704
    contract.allEvents = execute;                                                                                      // 2705
};                                                                                                                     // 2706
                                                                                                                       // 2707
module.exports = AllSolidityEvents;                                                                                    // 2708
                                                                                                                       // 2709
                                                                                                                       // 2710
},{"../utils/sha3":19,"../utils/utils":20,"./event":27,"./filter":29,"./formatters":30,"./methods/watches":42}],24:[function(require,module,exports){
/*                                                                                                                     // 2712
    This file is part of web3.js.                                                                                      // 2713
                                                                                                                       // 2714
    web3.js is free software: you can redistribute it and/or modify                                                    // 2715
    it under the terms of the GNU Lesser General Public License as published by                                        // 2716
    the Free Software Foundation, either version 3 of the License, or                                                  // 2717
    (at your option) any later version.                                                                                // 2718
                                                                                                                       // 2719
    web3.js is distributed in the hope that it will be useful,                                                         // 2720
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2721
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2722
    GNU Lesser General Public License for more details.                                                                // 2723
                                                                                                                       // 2724
    You should have received a copy of the GNU Lesser General Public License                                           // 2725
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2726
*/                                                                                                                     // 2727
/**                                                                                                                    // 2728
 * @file batch.js                                                                                                      // 2729
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2730
 * @date 2015                                                                                                          // 2731
 */                                                                                                                    // 2732
                                                                                                                       // 2733
var Jsonrpc = require('./jsonrpc');                                                                                    // 2734
var errors = require('./errors');                                                                                      // 2735
                                                                                                                       // 2736
var Batch = function (web3) {                                                                                          // 2737
    this.requestManager = web3._requestManager;                                                                        // 2738
    this.requests = [];                                                                                                // 2739
};                                                                                                                     // 2740
                                                                                                                       // 2741
/**                                                                                                                    // 2742
 * Should be called to add create new request to batch request                                                         // 2743
 *                                                                                                                     // 2744
 * @method add                                                                                                         // 2745
 * @param {Object} jsonrpc requet object                                                                               // 2746
 */                                                                                                                    // 2747
Batch.prototype.add = function (request) {                                                                             // 2748
    this.requests.push(request);                                                                                       // 2749
};                                                                                                                     // 2750
                                                                                                                       // 2751
/**                                                                                                                    // 2752
 * Should be called to execute batch request                                                                           // 2753
 *                                                                                                                     // 2754
 * @method execute                                                                                                     // 2755
 */                                                                                                                    // 2756
Batch.prototype.execute = function () {                                                                                // 2757
    var requests = this.requests;                                                                                      // 2758
    this.requestManager.sendBatch(requests, function (err, results) {                                                  // 2759
        results = results || [];                                                                                       // 2760
        requests.map(function (request, index) {                                                                       // 2761
            return results[index] || {};                                                                               // 2762
        }).forEach(function (result, index) {                                                                          // 2763
            if (requests[index].callback) {                                                                            // 2764
                                                                                                                       // 2765
                if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                  // 2766
                    return requests[index].callback(errors.InvalidResponse(result));                                   // 2767
                }                                                                                                      // 2768
                                                                                                                       // 2769
                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
            }                                                                                                          // 2771
        });                                                                                                            // 2772
    });                                                                                                                // 2773
};                                                                                                                     // 2774
                                                                                                                       // 2775
module.exports = Batch;                                                                                                // 2776
                                                                                                                       // 2777
                                                                                                                       // 2778
},{"./errors":26,"./jsonrpc":35}],25:[function(require,module,exports){                                                // 2779
/*                                                                                                                     // 2780
    This file is part of web3.js.                                                                                      // 2781
                                                                                                                       // 2782
    web3.js is free software: you can redistribute it and/or modify                                                    // 2783
    it under the terms of the GNU Lesser General Public License as published by                                        // 2784
    the Free Software Foundation, either version 3 of the License, or                                                  // 2785
    (at your option) any later version.                                                                                // 2786
                                                                                                                       // 2787
    web3.js is distributed in the hope that it will be useful,                                                         // 2788
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2789
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2790
    GNU Lesser General Public License for more details.                                                                // 2791
                                                                                                                       // 2792
    You should have received a copy of the GNU Lesser General Public License                                           // 2793
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2794
*/                                                                                                                     // 2795
/**                                                                                                                    // 2796
 * @file contract.js                                                                                                   // 2797
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2798
 * @date 2014                                                                                                          // 2799
 */                                                                                                                    // 2800
                                                                                                                       // 2801
var utils = require('../utils/utils');                                                                                 // 2802
var coder = require('../solidity/coder');                                                                              // 2803
var SolidityEvent = require('./event');                                                                                // 2804
var SolidityFunction = require('./function');                                                                          // 2805
var AllEvents = require('./allevents');                                                                                // 2806
                                                                                                                       // 2807
/**                                                                                                                    // 2808
 * Should be called to encode constructor params                                                                       // 2809
 *                                                                                                                     // 2810
 * @method encodeConstructorParams                                                                                     // 2811
 * @param {Array} abi                                                                                                  // 2812
 * @param {Array} constructor params                                                                                   // 2813
 */                                                                                                                    // 2814
var encodeConstructorParams = function (abi, params) {                                                                 // 2815
    return abi.filter(function (json) {                                                                                // 2816
        return json.type === 'constructor' && json.inputs.length === params.length;                                    // 2817
    }).map(function (json) {                                                                                           // 2818
        return json.inputs.map(function (input) {                                                                      // 2819
            return input.type;                                                                                         // 2820
        });                                                                                                            // 2821
    }).map(function (types) {                                                                                          // 2822
        return coder.encodeParams(types, params);                                                                      // 2823
    })[0] || '';                                                                                                       // 2824
};                                                                                                                     // 2825
                                                                                                                       // 2826
/**                                                                                                                    // 2827
 * Should be called to add functions to contract object                                                                // 2828
 *                                                                                                                     // 2829
 * @method addFunctionsToContract                                                                                      // 2830
 * @param {Contract} contract                                                                                          // 2831
 * @param {Array} abi                                                                                                  // 2832
 */                                                                                                                    // 2833
var addFunctionsToContract = function (contract) {                                                                     // 2834
    contract.abi.filter(function (json) {                                                                              // 2835
        return json.type === 'function';                                                                               // 2836
    }).map(function (json) {                                                                                           // 2837
        return new SolidityFunction(contract._eth, json, contract.address);                                            // 2838
    }).forEach(function (f) {                                                                                          // 2839
        f.attachToContract(contract);                                                                                  // 2840
    });                                                                                                                // 2841
};                                                                                                                     // 2842
                                                                                                                       // 2843
/**                                                                                                                    // 2844
 * Should be called to add events to contract object                                                                   // 2845
 *                                                                                                                     // 2846
 * @method addEventsToContract                                                                                         // 2847
 * @param {Contract} contract                                                                                          // 2848
 * @param {Array} abi                                                                                                  // 2849
 */                                                                                                                    // 2850
var addEventsToContract = function (contract) {                                                                        // 2851
    var events = contract.abi.filter(function (json) {                                                                 // 2852
        return json.type === 'event';                                                                                  // 2853
    });                                                                                                                // 2854
                                                                                                                       // 2855
    var All = new AllEvents(contract._eth._requestManager, events, contract.address);                                  // 2856
    All.attachToContract(contract);                                                                                    // 2857
                                                                                                                       // 2858
    events.map(function (json) {                                                                                       // 2859
        return new SolidityEvent(contract._eth._requestManager, json, contract.address);                               // 2860
    }).forEach(function (e) {                                                                                          // 2861
        e.attachToContract(contract);                                                                                  // 2862
    });                                                                                                                // 2863
};                                                                                                                     // 2864
                                                                                                                       // 2865
                                                                                                                       // 2866
/**                                                                                                                    // 2867
 * Should be called to check if the contract gets properly deployed on the blockchain.                                 // 2868
 *                                                                                                                     // 2869
 * @method checkForContractAddress                                                                                     // 2870
 * @param {Object} contract                                                                                            // 2871
 * @param {Function} callback                                                                                          // 2872
 * @returns {Undefined}                                                                                                // 2873
 */                                                                                                                    // 2874
var checkForContractAddress = function(contract, callback){                                                            // 2875
    var count = 0,                                                                                                     // 2876
        callbackFired = false;                                                                                         // 2877
                                                                                                                       // 2878
    // wait for receipt                                                                                                // 2879
    var filter = contract._eth.filter('latest', function(e){                                                           // 2880
        if (!e && !callbackFired) {                                                                                    // 2881
            count++;                                                                                                   // 2882
                                                                                                                       // 2883
            // stop watching after 50 blocks (timeout)                                                                 // 2884
            if (count > 50) {                                                                                          // 2885
                                                                                                                       // 2886
                filter.stopWatching();                                                                                 // 2887
                callbackFired = true;                                                                                  // 2888
                                                                                                                       // 2889
                if (callback)                                                                                          // 2890
                    callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));                    // 2891
                else                                                                                                   // 2892
                    throw new Error('Contract transaction couldn\'t be found after 50 blocks');                        // 2893
                                                                                                                       // 2894
                                                                                                                       // 2895
            } else {                                                                                                   // 2896
                                                                                                                       // 2897
                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){                    // 2898
                    if(receipt && !callbackFired) {                                                                    // 2899
                                                                                                                       // 2900
                        contract._eth.getCode(receipt.contractAddress, function(e, code){                              // 2901
                            /*jshint maxcomplexity: 6 */                                                               // 2902
                                                                                                                       // 2903
                            if(callbackFired || !code)                                                                 // 2904
                                return;                                                                                // 2905
                                                                                                                       // 2906
                            filter.stopWatching();                                                                     // 2907
                            callbackFired = true;                                                                      // 2908
                                                                                                                       // 2909
                            if(code.length > 2) {                                                                      // 2910
                                                                                                                       // 2911
                                // console.log('Contract code deployed!');                                             // 2912
                                                                                                                       // 2913
                                contract.address = receipt.contractAddress;                                            // 2914
                                                                                                                       // 2915
                                // attach events and methods again after we have                                       // 2916
                                addFunctionsToContract(contract);                                                      // 2917
                                addEventsToContract(contract);                                                         // 2918
                                                                                                                       // 2919
                                // call callback for the second time                                                   // 2920
                                if(callback)                                                                           // 2921
                                    callback(null, contract);                                                          // 2922
                                                                                                                       // 2923
                            } else {                                                                                   // 2924
                                if(callback)                                                                           // 2925
                                    callback(new Error('The contract code couldn\'t be stored, please check your gas amount.'));
                                else                                                                                   // 2927
                                    throw new Error('The contract code couldn\'t be stored, please check your gas amount.');
                            }                                                                                          // 2929
                        });                                                                                            // 2930
                    }                                                                                                  // 2931
                });                                                                                                    // 2932
            }                                                                                                          // 2933
        }                                                                                                              // 2934
    });                                                                                                                // 2935
};                                                                                                                     // 2936
                                                                                                                       // 2937
/**                                                                                                                    // 2938
 * Should be called to create new ContractFactory instance                                                             // 2939
 *                                                                                                                     // 2940
 * @method ContractFactory                                                                                             // 2941
 * @param {Array} abi                                                                                                  // 2942
 */                                                                                                                    // 2943
var ContractFactory = function (eth, abi) {                                                                            // 2944
    this.eth = eth;                                                                                                    // 2945
    this.abi = abi;                                                                                                    // 2946
                                                                                                                       // 2947
    /**                                                                                                                // 2948
     * Should be called to create new contract on a blockchain                                                         // 2949
     *                                                                                                                 // 2950
     * @method new                                                                                                     // 2951
     * @param {Any} contract constructor param1 (optional)                                                             // 2952
     * @param {Any} contract constructor param2 (optional)                                                             // 2953
     * @param {Object} contract transaction object (required)                                                          // 2954
     * @param {Function} callback                                                                                      // 2955
     * @returns {Contract} returns contract instance                                                                   // 2956
     */                                                                                                                // 2957
    this.new = function () {                                                                                           // 2958
        var contract = new Contract(this.eth, this.abi);                                                               // 2959
                                                                                                                       // 2960
        // parse arguments                                                                                             // 2961
        var options = {}; // required!                                                                                 // 2962
        var callback;                                                                                                  // 2963
                                                                                                                       // 2964
        var args = Array.prototype.slice.call(arguments);                                                              // 2965
        if (utils.isFunction(args[args.length - 1])) {                                                                 // 2966
            callback = args.pop();                                                                                     // 2967
        }                                                                                                              // 2968
                                                                                                                       // 2969
        var last = args[args.length - 1];                                                                              // 2970
        if (utils.isObject(last) && !utils.isArray(last)) {                                                            // 2971
            options = args.pop();                                                                                      // 2972
        }                                                                                                              // 2973
                                                                                                                       // 2974
        var bytes = encodeConstructorParams(this.abi, args);                                                           // 2975
        options.data += bytes;                                                                                         // 2976
                                                                                                                       // 2977
        if (callback) {                                                                                                // 2978
                                                                                                                       // 2979
            // wait for the contract address adn check if the code was deployed                                        // 2980
            this.eth.sendTransaction(options, function (err, hash) {                                                   // 2981
                if (err) {                                                                                             // 2982
                    callback(err);                                                                                     // 2983
                } else {                                                                                               // 2984
                    // add the transaction hash                                                                        // 2985
                    contract.transactionHash = hash;                                                                   // 2986
                                                                                                                       // 2987
                    // call callback for the first time                                                                // 2988
                    callback(null, contract);                                                                          // 2989
                                                                                                                       // 2990
                    checkForContractAddress(contract, callback);                                                       // 2991
                }                                                                                                      // 2992
            });                                                                                                        // 2993
        } else {                                                                                                       // 2994
            var hash = this.eth.sendTransaction(options);                                                              // 2995
            // add the transaction hash                                                                                // 2996
            contract.transactionHash = hash;                                                                           // 2997
            checkForContractAddress(contract);                                                                         // 2998
        }                                                                                                              // 2999
                                                                                                                       // 3000
        return contract;                                                                                               // 3001
    };                                                                                                                 // 3002
                                                                                                                       // 3003
    this.new.getData = this.getData.bind(this);                                                                        // 3004
};                                                                                                                     // 3005
                                                                                                                       // 3006
/**                                                                                                                    // 3007
 * Should be called to create new ContractFactory                                                                      // 3008
 *                                                                                                                     // 3009
 * @method contract                                                                                                    // 3010
 * @param {Array} abi                                                                                                  // 3011
 * @returns {ContractFactory} new contract factory                                                                     // 3012
 */                                                                                                                    // 3013
//var contract = function (abi) {                                                                                      // 3014
    //return new ContractFactory(abi);                                                                                 // 3015
//};                                                                                                                   // 3016
                                                                                                                       // 3017
                                                                                                                       // 3018
                                                                                                                       // 3019
/**                                                                                                                    // 3020
 * Should be called to get access to existing contract on a blockchain                                                 // 3021
 *                                                                                                                     // 3022
 * @method at                                                                                                          // 3023
 * @param {Address} contract address (required)                                                                        // 3024
 * @param {Function} callback {optional)                                                                               // 3025
 * @returns {Contract} returns contract if no callback was passed,                                                     // 3026
 * otherwise calls callback function (err, contract)                                                                   // 3027
 */                                                                                                                    // 3028
ContractFactory.prototype.at = function (address, callback) {                                                          // 3029
    var contract = new Contract(this.eth, this.abi, address);                                                          // 3030
                                                                                                                       // 3031
    // this functions are not part of prototype,                                                                       // 3032
    // because we dont want to spoil the interface                                                                     // 3033
    addFunctionsToContract(contract);                                                                                  // 3034
    addEventsToContract(contract);                                                                                     // 3035
                                                                                                                       // 3036
    if (callback) {                                                                                                    // 3037
        callback(null, contract);                                                                                      // 3038
    }                                                                                                                  // 3039
    return contract;                                                                                                   // 3040
};                                                                                                                     // 3041
                                                                                                                       // 3042
/**                                                                                                                    // 3043
 * Gets the data, which is data to deploy plus constructor params                                                      // 3044
 *                                                                                                                     // 3045
 * @method getData                                                                                                     // 3046
 */                                                                                                                    // 3047
ContractFactory.prototype.getData = function () {                                                                      // 3048
    var options = {}; // required!                                                                                     // 3049
    var args = Array.prototype.slice.call(arguments);                                                                  // 3050
                                                                                                                       // 3051
    var last = args[args.length - 1];                                                                                  // 3052
    if (utils.isObject(last) && !utils.isArray(last)) {                                                                // 3053
        options = args.pop();                                                                                          // 3054
    }                                                                                                                  // 3055
                                                                                                                       // 3056
    var bytes = encodeConstructorParams(this.abi, args);                                                               // 3057
    options.data += bytes;                                                                                             // 3058
                                                                                                                       // 3059
    return options.data;                                                                                               // 3060
};                                                                                                                     // 3061
                                                                                                                       // 3062
/**                                                                                                                    // 3063
 * Should be called to create new contract instance                                                                    // 3064
 *                                                                                                                     // 3065
 * @method Contract                                                                                                    // 3066
 * @param {Array} abi                                                                                                  // 3067
 * @param {Address} contract address                                                                                   // 3068
 */                                                                                                                    // 3069
var Contract = function (eth, abi, address) {                                                                          // 3070
    this._eth = eth;                                                                                                   // 3071
    this.transactionHash = null;                                                                                       // 3072
    this.address = address;                                                                                            // 3073
    this.abi = abi;                                                                                                    // 3074
};                                                                                                                     // 3075
                                                                                                                       // 3076
module.exports = ContractFactory;                                                                                      // 3077
                                                                                                                       // 3078
},{"../solidity/coder":7,"../utils/utils":20,"./allevents":23,"./event":27,"./function":31}],26:[function(require,module,exports){
/*                                                                                                                     // 3080
    This file is part of web3.js.                                                                                      // 3081
                                                                                                                       // 3082
    web3.js is free software: you can redistribute it and/or modify                                                    // 3083
    it under the terms of the GNU Lesser General Public License as published by                                        // 3084
    the Free Software Foundation, either version 3 of the License, or                                                  // 3085
    (at your option) any later version.                                                                                // 3086
                                                                                                                       // 3087
    web3.js is distributed in the hope that it will be useful,                                                         // 3088
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3089
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3090
    GNU Lesser General Public License for more details.                                                                // 3091
                                                                                                                       // 3092
    You should have received a copy of the GNU Lesser General Public License                                           // 3093
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3094
*/                                                                                                                     // 3095
/**                                                                                                                    // 3096
 * @file errors.js                                                                                                     // 3097
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3098
 * @date 2015                                                                                                          // 3099
 */                                                                                                                    // 3100
                                                                                                                       // 3101
module.exports = {                                                                                                     // 3102
    InvalidNumberOfParams: function () {                                                                               // 3103
        return new Error('Invalid number of input parameters');                                                        // 3104
    },                                                                                                                 // 3105
    InvalidConnection: function (host){                                                                                // 3106
        return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');                                   // 3107
    },                                                                                                                 // 3108
    InvalidProvider: function () {                                                                                     // 3109
        return new Error('Provider not set or invalid');                                                               // 3110
    },                                                                                                                 // 3111
    InvalidResponse: function (result){                                                                                // 3112
        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
        return new Error(message);                                                                                     // 3114
    }                                                                                                                  // 3115
};                                                                                                                     // 3116
                                                                                                                       // 3117
                                                                                                                       // 3118
},{}],27:[function(require,module,exports){                                                                            // 3119
/*                                                                                                                     // 3120
    This file is part of web3.js.                                                                                      // 3121
                                                                                                                       // 3122
    web3.js is free software: you can redistribute it and/or modify                                                    // 3123
    it under the terms of the GNU Lesser General Public License as published by                                        // 3124
    the Free Software Foundation, either version 3 of the License, or                                                  // 3125
    (at your option) any later version.                                                                                // 3126
                                                                                                                       // 3127
    web3.js is distributed in the hope that it will be useful,                                                         // 3128
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3129
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3130
    GNU Lesser General Public License for more details.                                                                // 3131
                                                                                                                       // 3132
    You should have received a copy of the GNU Lesser General Public License                                           // 3133
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3134
*/                                                                                                                     // 3135
/**                                                                                                                    // 3136
 * @file event.js                                                                                                      // 3137
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3138
 * @date 2014                                                                                                          // 3139
 */                                                                                                                    // 3140
                                                                                                                       // 3141
var utils = require('../utils/utils');                                                                                 // 3142
var coder = require('../solidity/coder');                                                                              // 3143
var formatters = require('./formatters');                                                                              // 3144
var sha3 = require('../utils/sha3');                                                                                   // 3145
var Filter = require('./filter');                                                                                      // 3146
var watches = require('./methods/watches');                                                                            // 3147
                                                                                                                       // 3148
/**                                                                                                                    // 3149
 * This prototype should be used to create event filters                                                               // 3150
 */                                                                                                                    // 3151
var SolidityEvent = function (requestManager, json, address) {                                                         // 3152
    this._requestManager = requestManager;                                                                             // 3153
    this._params = json.inputs;                                                                                        // 3154
    this._name = utils.transformToFullName(json);                                                                      // 3155
    this._address = address;                                                                                           // 3156
    this._anonymous = json.anonymous;                                                                                  // 3157
};                                                                                                                     // 3158
                                                                                                                       // 3159
/**                                                                                                                    // 3160
 * Should be used to get filtered param types                                                                          // 3161
 *                                                                                                                     // 3162
 * @method types                                                                                                       // 3163
 * @param {Bool} decide if returned typed should be indexed                                                            // 3164
 * @return {Array} array of types                                                                                      // 3165
 */                                                                                                                    // 3166
SolidityEvent.prototype.types = function (indexed) {                                                                   // 3167
    return this._params.filter(function (i) {                                                                          // 3168
        return i.indexed === indexed;                                                                                  // 3169
    }).map(function (i) {                                                                                              // 3170
        return i.type;                                                                                                 // 3171
    });                                                                                                                // 3172
};                                                                                                                     // 3173
                                                                                                                       // 3174
/**                                                                                                                    // 3175
 * Should be used to get event display name                                                                            // 3176
 *                                                                                                                     // 3177
 * @method displayName                                                                                                 // 3178
 * @return {String} event display name                                                                                 // 3179
 */                                                                                                                    // 3180
SolidityEvent.prototype.displayName = function () {                                                                    // 3181
    return utils.extractDisplayName(this._name);                                                                       // 3182
};                                                                                                                     // 3183
                                                                                                                       // 3184
/**                                                                                                                    // 3185
 * Should be used to get event type name                                                                               // 3186
 *                                                                                                                     // 3187
 * @method typeName                                                                                                    // 3188
 * @return {String} event type name                                                                                    // 3189
 */                                                                                                                    // 3190
SolidityEvent.prototype.typeName = function () {                                                                       // 3191
    return utils.extractTypeName(this._name);                                                                          // 3192
};                                                                                                                     // 3193
                                                                                                                       // 3194
/**                                                                                                                    // 3195
 * Should be used to get event signature                                                                               // 3196
 *                                                                                                                     // 3197
 * @method signature                                                                                                   // 3198
 * @return {String} event signature                                                                                    // 3199
 */                                                                                                                    // 3200
SolidityEvent.prototype.signature = function () {                                                                      // 3201
    return sha3(this._name);                                                                                           // 3202
};                                                                                                                     // 3203
                                                                                                                       // 3204
/**                                                                                                                    // 3205
 * Should be used to encode indexed params and options to one final object                                             // 3206
 *                                                                                                                     // 3207
 * @method encode                                                                                                      // 3208
 * @param {Object} indexed                                                                                             // 3209
 * @param {Object} options                                                                                             // 3210
 * @return {Object} everything combined together and encoded                                                           // 3211
 */                                                                                                                    // 3212
SolidityEvent.prototype.encode = function (indexed, options) {                                                         // 3213
    indexed = indexed || {};                                                                                           // 3214
    options = options || {};                                                                                           // 3215
    var result = {};                                                                                                   // 3216
                                                                                                                       // 3217
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 3218
        return options[f] !== undefined;                                                                               // 3219
    }).forEach(function (f) {                                                                                          // 3220
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 3221
    });                                                                                                                // 3222
                                                                                                                       // 3223
    result.topics = [];                                                                                                // 3224
                                                                                                                       // 3225
    result.address = this._address;                                                                                    // 3226
    if (!this._anonymous) {                                                                                            // 3227
        result.topics.push('0x' + this.signature());                                                                   // 3228
    }                                                                                                                  // 3229
                                                                                                                       // 3230
    var indexedTopics = this._params.filter(function (i) {                                                             // 3231
        return i.indexed === true;                                                                                     // 3232
    }).map(function (i) {                                                                                              // 3233
        var value = indexed[i.name];                                                                                   // 3234
        if (value === undefined || value === null) {                                                                   // 3235
            return null;                                                                                               // 3236
        }                                                                                                              // 3237
                                                                                                                       // 3238
        if (utils.isArray(value)) {                                                                                    // 3239
            return value.map(function (v) {                                                                            // 3240
                return '0x' + coder.encodeParam(i.type, v);                                                            // 3241
            });                                                                                                        // 3242
        }                                                                                                              // 3243
        return '0x' + coder.encodeParam(i.type, value);                                                                // 3244
    });                                                                                                                // 3245
                                                                                                                       // 3246
    result.topics = result.topics.concat(indexedTopics);                                                               // 3247
                                                                                                                       // 3248
    return result;                                                                                                     // 3249
};                                                                                                                     // 3250
                                                                                                                       // 3251
/**                                                                                                                    // 3252
 * Should be used to decode indexed params and options                                                                 // 3253
 *                                                                                                                     // 3254
 * @method decode                                                                                                      // 3255
 * @param {Object} data                                                                                                // 3256
 * @return {Object} result object with decoded indexed && not indexed params                                           // 3257
 */                                                                                                                    // 3258
SolidityEvent.prototype.decode = function (data) {                                                                     // 3259
                                                                                                                       // 3260
    data.data = data.data || '';                                                                                       // 3261
    data.topics = data.topics || [];                                                                                   // 3262
                                                                                                                       // 3263
    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);                                              // 3264
    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");                           // 3265
    var indexedParams = coder.decodeParams(this.types(true), indexedData);                                             // 3266
                                                                                                                       // 3267
    var notIndexedData = data.data.slice(2);                                                                           // 3268
    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);                                      // 3269
                                                                                                                       // 3270
    var result = formatters.outputLogFormatter(data);                                                                  // 3271
    result.event = this.displayName();                                                                                 // 3272
    result.address = data.address;                                                                                     // 3273
                                                                                                                       // 3274
    result.args = this._params.reduce(function (acc, current) {                                                        // 3275
        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();                        // 3276
        return acc;                                                                                                    // 3277
    }, {});                                                                                                            // 3278
                                                                                                                       // 3279
    delete result.data;                                                                                                // 3280
    delete result.topics;                                                                                              // 3281
                                                                                                                       // 3282
    return result;                                                                                                     // 3283
};                                                                                                                     // 3284
                                                                                                                       // 3285
/**                                                                                                                    // 3286
 * Should be used to create new filter object from event                                                               // 3287
 *                                                                                                                     // 3288
 * @method execute                                                                                                     // 3289
 * @param {Object} indexed                                                                                             // 3290
 * @param {Object} options                                                                                             // 3291
 * @return {Object} filter object                                                                                      // 3292
 */                                                                                                                    // 3293
SolidityEvent.prototype.execute = function (indexed, options, callback) {                                              // 3294
                                                                                                                       // 3295
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 3296
        callback = arguments[arguments.length - 1];                                                                    // 3297
        if(arguments.length === 2)                                                                                     // 3298
            options = null;                                                                                            // 3299
        if(arguments.length === 1) {                                                                                   // 3300
            options = null;                                                                                            // 3301
            indexed = {};                                                                                              // 3302
        }                                                                                                              // 3303
    }                                                                                                                  // 3304
                                                                                                                       // 3305
    var o = this.encode(indexed, options);                                                                             // 3306
    var formatter = this.decode.bind(this);                                                                            // 3307
    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 3308
};                                                                                                                     // 3309
                                                                                                                       // 3310
/**                                                                                                                    // 3311
 * Should be used to attach event to contract object                                                                   // 3312
 *                                                                                                                     // 3313
 * @method attachToContract                                                                                            // 3314
 * @param {Contract}                                                                                                   // 3315
 */                                                                                                                    // 3316
SolidityEvent.prototype.attachToContract = function (contract) {                                                       // 3317
    var execute = this.execute.bind(this);                                                                             // 3318
    var displayName = this.displayName();                                                                              // 3319
    if (!contract[displayName]) {                                                                                      // 3320
        contract[displayName] = execute;                                                                               // 3321
    }                                                                                                                  // 3322
    contract[displayName][this.typeName()] = this.execute.bind(this, contract);                                        // 3323
};                                                                                                                     // 3324
                                                                                                                       // 3325
module.exports = SolidityEvent;                                                                                        // 3326
                                                                                                                       // 3327
                                                                                                                       // 3328
},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./filter":29,"./formatters":30,"./methods/watches":42}],28:[function(require,module,exports){
var formatters = require('./formatters');                                                                              // 3330
var utils = require('./../utils/utils');                                                                               // 3331
var Method = require('./method');                                                                                      // 3332
var Property = require('./property');                                                                                  // 3333
                                                                                                                       // 3334
// TODO: refactor, so the input params are not altered.                                                                // 3335
// it's necessary to make same 'extension' work with multiple providers                                                // 3336
var extend = function (web3) {                                                                                         // 3337
    /* jshint maxcomplexity:5 */                                                                                       // 3338
    var ex = function (extension) {                                                                                    // 3339
                                                                                                                       // 3340
        var extendedObject;                                                                                            // 3341
        if (extension.property) {                                                                                      // 3342
            if (!web3[extension.property]) {                                                                           // 3343
                web3[extension.property] = {};                                                                         // 3344
            }                                                                                                          // 3345
            extendedObject = web3[extension.property];                                                                 // 3346
        } else {                                                                                                       // 3347
            extendedObject = web3;                                                                                     // 3348
        }                                                                                                              // 3349
                                                                                                                       // 3350
        if (extension.methods) {                                                                                       // 3351
            extension.methods.forEach(function (method) {                                                              // 3352
                method.attachToObject(extendedObject);                                                                 // 3353
                method.setRequestManager(web3._requestManager);                                                        // 3354
            });                                                                                                        // 3355
        }                                                                                                              // 3356
                                                                                                                       // 3357
        if (extension.properties) {                                                                                    // 3358
            extension.properties.forEach(function (property) {                                                         // 3359
                property.attachToObject(extendedObject);                                                               // 3360
                property.setRequestManager(web3._requestManager);                                                      // 3361
            });                                                                                                        // 3362
        }                                                                                                              // 3363
    };                                                                                                                 // 3364
                                                                                                                       // 3365
    ex.formatters = formatters;                                                                                        // 3366
    ex.utils = utils;                                                                                                  // 3367
    ex.Method = Method;                                                                                                // 3368
    ex.Property = Property;                                                                                            // 3369
                                                                                                                       // 3370
    return ex;                                                                                                         // 3371
};                                                                                                                     // 3372
                                                                                                                       // 3373
                                                                                                                       // 3374
                                                                                                                       // 3375
module.exports = extend;                                                                                               // 3376
                                                                                                                       // 3377
                                                                                                                       // 3378
},{"./../utils/utils":20,"./formatters":30,"./method":36,"./property":44}],29:[function(require,module,exports){       // 3379
/*                                                                                                                     // 3380
    This file is part of web3.js.                                                                                      // 3381
                                                                                                                       // 3382
    web3.js is free software: you can redistribute it and/or modify                                                    // 3383
    it under the terms of the GNU Lesser General Public License as published by                                        // 3384
    the Free Software Foundation, either version 3 of the License, or                                                  // 3385
    (at your option) any later version.                                                                                // 3386
                                                                                                                       // 3387
    web3.js is distributed in the hope that it will be useful,                                                         // 3388
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3389
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3390
    GNU Lesser General Public License for more details.                                                                // 3391
                                                                                                                       // 3392
    You should have received a copy of the GNU Lesser General Public License                                           // 3393
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3394
*/                                                                                                                     // 3395
/** @file filter.js                                                                                                    // 3396
 * @authors:                                                                                                           // 3397
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 3398
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 3399
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 3400
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 3401
 *   Gav Wood <g@ethdev.com>                                                                                           // 3402
 * @date 2014                                                                                                          // 3403
 */                                                                                                                    // 3404
                                                                                                                       // 3405
var formatters = require('./formatters');                                                                              // 3406
var utils = require('../utils/utils');                                                                                 // 3407
                                                                                                                       // 3408
/**                                                                                                                    // 3409
* Converts a given topic to a hex string, but also allows null values.                                                 // 3410
*                                                                                                                      // 3411
* @param {Mixed} value                                                                                                 // 3412
* @return {String}                                                                                                     // 3413
*/                                                                                                                     // 3414
var toTopic = function(value){                                                                                         // 3415
                                                                                                                       // 3416
    if(value === null || typeof value === 'undefined')                                                                 // 3417
        return null;                                                                                                   // 3418
                                                                                                                       // 3419
    value = String(value);                                                                                             // 3420
                                                                                                                       // 3421
    if(value.indexOf('0x') === 0)                                                                                      // 3422
        return value;                                                                                                  // 3423
    else                                                                                                               // 3424
        return utils.fromUtf8(value);                                                                                  // 3425
};                                                                                                                     // 3426
                                                                                                                       // 3427
/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones          // 3428
/// @param should be string or object                                                                                  // 3429
/// @returns options string or object                                                                                  // 3430
var getOptions = function (options) {                                                                                  // 3431
                                                                                                                       // 3432
    if (utils.isString(options)) {                                                                                     // 3433
        return options;                                                                                                // 3434
    }                                                                                                                  // 3435
                                                                                                                       // 3436
    options = options || {};                                                                                           // 3437
                                                                                                                       // 3438
    // make sure topics, get converted to hex                                                                          // 3439
    options.topics = options.topics || [];                                                                             // 3440
    options.topics = options.topics.map(function(topic){                                                               // 3441
        return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);                                           // 3442
    });                                                                                                                // 3443
                                                                                                                       // 3444
    return {                                                                                                           // 3445
        topics: options.topics,                                                                                        // 3446
        from: options.from,                                                                                            // 3447
        to: options.to,                                                                                                // 3448
        address: options.address,                                                                                      // 3449
        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),                                            // 3450
        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)                                                 // 3451
    };                                                                                                                 // 3452
};                                                                                                                     // 3453
                                                                                                                       // 3454
/**                                                                                                                    // 3455
Adds the callback and sets up the methods, to iterate over the results.                                                // 3456
                                                                                                                       // 3457
@method getLogsAtStart                                                                                                 // 3458
@param {Object} self                                                                                                   // 3459
@param {funciton}                                                                                                      // 3460
*/                                                                                                                     // 3461
var getLogsAtStart = function(self, callback){                                                                         // 3462
    // call getFilterLogs for the first watch callback start                                                           // 3463
    if (!utils.isString(self.options)) {                                                                               // 3464
        self.get(function (err, messages) {                                                                            // 3465
            // don't send all the responses to all the watches again... just to self one                               // 3466
            if (err) {                                                                                                 // 3467
                callback(err);                                                                                         // 3468
            }                                                                                                          // 3469
                                                                                                                       // 3470
            if(utils.isArray(messages)) {                                                                              // 3471
                messages.forEach(function (message) {                                                                  // 3472
                    callback(null, message);                                                                           // 3473
                });                                                                                                    // 3474
            }                                                                                                          // 3475
        });                                                                                                            // 3476
    }                                                                                                                  // 3477
};                                                                                                                     // 3478
                                                                                                                       // 3479
/**                                                                                                                    // 3480
Adds the callback and sets up the methods, to iterate over the results.                                                // 3481
                                                                                                                       // 3482
@method pollFilter                                                                                                     // 3483
@param {Object} self                                                                                                   // 3484
*/                                                                                                                     // 3485
var pollFilter = function(self) {                                                                                      // 3486
                                                                                                                       // 3487
    var onMessage = function (error, messages) {                                                                       // 3488
        if (error) {                                                                                                   // 3489
            return self.callbacks.forEach(function (callback) {                                                        // 3490
                callback(error);                                                                                       // 3491
            });                                                                                                        // 3492
        }                                                                                                              // 3493
                                                                                                                       // 3494
        if(utils.isArray(messages)) {                                                                                  // 3495
            messages.forEach(function (message) {                                                                      // 3496
                message = self.formatter ? self.formatter(message) : message;                                          // 3497
                self.callbacks.forEach(function (callback) {                                                           // 3498
                    callback(null, message);                                                                           // 3499
                });                                                                                                    // 3500
            });                                                                                                        // 3501
        }                                                                                                              // 3502
    };                                                                                                                 // 3503
                                                                                                                       // 3504
    self.requestManager.startPolling({                                                                                 // 3505
        method: self.implementation.poll.call,                                                                         // 3506
        params: [self.filterId],                                                                                       // 3507
    }, self.filterId, onMessage, self.stopWatching.bind(self));                                                        // 3508
                                                                                                                       // 3509
};                                                                                                                     // 3510
                                                                                                                       // 3511
var Filter = function (requestManager, options, methods, formatter, callback) {                                        // 3512
    var self = this;                                                                                                   // 3513
    var implementation = {};                                                                                           // 3514
    methods.forEach(function (method) {                                                                                // 3515
        method.setRequestManager(requestManager);                                                                      // 3516
        method.attachToObject(implementation);                                                                         // 3517
    });                                                                                                                // 3518
    this.requestManager = requestManager;                                                                              // 3519
    this.options = getOptions(options);                                                                                // 3520
    this.implementation = implementation;                                                                              // 3521
    this.filterId = null;                                                                                              // 3522
    this.callbacks = [];                                                                                               // 3523
    this.getLogsCallbacks = [];                                                                                        // 3524
    this.pollFilters = [];                                                                                             // 3525
    this.formatter = formatter;                                                                                        // 3526
    this.implementation.newFilter(this.options, function(error, id){                                                   // 3527
        if(error) {                                                                                                    // 3528
            self.callbacks.forEach(function(cb){                                                                       // 3529
                cb(error);                                                                                             // 3530
            });                                                                                                        // 3531
        } else {                                                                                                       // 3532
            self.filterId = id;                                                                                        // 3533
                                                                                                                       // 3534
            // check if there are get pending callbacks as a consequence                                               // 3535
            // of calling get() with filterId unassigned.                                                              // 3536
            self.getLogsCallbacks.forEach(function (cb){                                                               // 3537
                self.get(cb);                                                                                          // 3538
            });                                                                                                        // 3539
            self.getLogsCallbacks = [];                                                                                // 3540
                                                                                                                       // 3541
            // get filter logs for the already existing watch calls                                                    // 3542
            self.callbacks.forEach(function(cb){                                                                       // 3543
                getLogsAtStart(self, cb);                                                                              // 3544
            });                                                                                                        // 3545
            if(self.callbacks.length > 0)                                                                              // 3546
                pollFilter(self);                                                                                      // 3547
                                                                                                                       // 3548
            // start to watch immediately                                                                              // 3549
            if(typeof callback === 'function') {                                                                       // 3550
                return self.watch(callback);                                                                           // 3551
            }                                                                                                          // 3552
        }                                                                                                              // 3553
    });                                                                                                                // 3554
                                                                                                                       // 3555
    return this;                                                                                                       // 3556
};                                                                                                                     // 3557
                                                                                                                       // 3558
Filter.prototype.watch = function (callback) {                                                                         // 3559
    this.callbacks.push(callback);                                                                                     // 3560
                                                                                                                       // 3561
    if(this.filterId) {                                                                                                // 3562
        getLogsAtStart(this, callback);                                                                                // 3563
        pollFilter(this);                                                                                              // 3564
    }                                                                                                                  // 3565
                                                                                                                       // 3566
    return this;                                                                                                       // 3567
};                                                                                                                     // 3568
                                                                                                                       // 3569
Filter.prototype.stopWatching = function () {                                                                          // 3570
    this.requestManager.stopPolling(this.filterId);                                                                    // 3571
    // remove filter async                                                                                             // 3572
    this.implementation.uninstallFilter(this.filterId, function(){});                                                  // 3573
    this.callbacks = [];                                                                                               // 3574
};                                                                                                                     // 3575
                                                                                                                       // 3576
Filter.prototype.get = function (callback) {                                                                           // 3577
    var self = this;                                                                                                   // 3578
    if (utils.isFunction(callback)) {                                                                                  // 3579
        if (this.filterId === null) {                                                                                  // 3580
            // If filterId is not set yet, call it back                                                                // 3581
            // when newFilter() assigns it.                                                                            // 3582
            this.getLogsCallbacks.push(callback);                                                                      // 3583
        } else {                                                                                                       // 3584
            this.implementation.getLogs(this.filterId, function(err, res){                                             // 3585
                if (err) {                                                                                             // 3586
                    callback(err);                                                                                     // 3587
                } else {                                                                                               // 3588
                    callback(null, res.map(function (log) {                                                            // 3589
                        return self.formatter ? self.formatter(log) : log;                                             // 3590
                    }));                                                                                               // 3591
                }                                                                                                      // 3592
            });                                                                                                        // 3593
        }                                                                                                              // 3594
    } else {                                                                                                           // 3595
        if (this.filterId === null) {                                                                                  // 3596
            throw new Error('Filter ID Error: filter().get() can\'t be chained synchronous, please provide a callback for the get() method.');
        }                                                                                                              // 3598
        var logs = this.implementation.getLogs(this.filterId);                                                         // 3599
        return logs.map(function (log) {                                                                               // 3600
            return self.formatter ? self.formatter(log) : log;                                                         // 3601
        });                                                                                                            // 3602
    }                                                                                                                  // 3603
                                                                                                                       // 3604
    return this;                                                                                                       // 3605
};                                                                                                                     // 3606
                                                                                                                       // 3607
module.exports = Filter;                                                                                               // 3608
                                                                                                                       // 3609
                                                                                                                       // 3610
},{"../utils/utils":20,"./formatters":30}],30:[function(require,module,exports){                                       // 3611
/*                                                                                                                     // 3612
    This file is part of web3.js.                                                                                      // 3613
                                                                                                                       // 3614
    web3.js is free software: you can redistribute it and/or modify                                                    // 3615
    it under the terms of the GNU Lesser General Public License as published by                                        // 3616
    the Free Software Foundation, either version 3 of the License, or                                                  // 3617
    (at your option) any later version.                                                                                // 3618
                                                                                                                       // 3619
    web3.js is distributed in the hope that it will be useful,                                                         // 3620
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3621
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3622
    GNU Lesser General Public License for more details.                                                                // 3623
                                                                                                                       // 3624
    You should have received a copy of the GNU Lesser General Public License                                           // 3625
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3626
*/                                                                                                                     // 3627
/**                                                                                                                    // 3628
 * @file formatters.js                                                                                                 // 3629
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3630
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 3631
 * @date 2015                                                                                                          // 3632
 */                                                                                                                    // 3633
                                                                                                                       // 3634
var utils = require('../utils/utils');                                                                                 // 3635
var config = require('../utils/config');                                                                               // 3636
var Iban = require('./iban');                                                                                          // 3637
                                                                                                                       // 3638
/**                                                                                                                    // 3639
 * Should the format output to a big number                                                                            // 3640
 *                                                                                                                     // 3641
 * @method outputBigNumberFormatter                                                                                    // 3642
 * @param {String|Number|BigNumber}                                                                                    // 3643
 * @returns {BigNumber} object                                                                                         // 3644
 */                                                                                                                    // 3645
var outputBigNumberFormatter = function (number) {                                                                     // 3646
    return utils.toBigNumber(number);                                                                                  // 3647
};                                                                                                                     // 3648
                                                                                                                       // 3649
var isPredefinedBlockNumber = function (blockNumber) {                                                                 // 3650
    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';                        // 3651
};                                                                                                                     // 3652
                                                                                                                       // 3653
var inputDefaultBlockNumberFormatter = function (blockNumber) {                                                        // 3654
    if (blockNumber === undefined) {                                                                                   // 3655
        return config.defaultBlock;                                                                                    // 3656
    }                                                                                                                  // 3657
    return inputBlockNumberFormatter(blockNumber);                                                                     // 3658
};                                                                                                                     // 3659
                                                                                                                       // 3660
var inputBlockNumberFormatter = function (blockNumber) {                                                               // 3661
    if (blockNumber === undefined) {                                                                                   // 3662
        return undefined;                                                                                              // 3663
    } else if (isPredefinedBlockNumber(blockNumber)) {                                                                 // 3664
        return blockNumber;                                                                                            // 3665
    }                                                                                                                  // 3666
    return utils.toHex(blockNumber);                                                                                   // 3667
};                                                                                                                     // 3668
                                                                                                                       // 3669
/**                                                                                                                    // 3670
 * Formats the input of a transaction and converts all values to HEX                                                   // 3671
 *                                                                                                                     // 3672
 * @method inputCallFormatter                                                                                          // 3673
 * @param {Object} transaction options                                                                                 // 3674
 * @returns object                                                                                                     // 3675
*/                                                                                                                     // 3676
var inputCallFormatter = function (options){                                                                           // 3677
                                                                                                                       // 3678
    options.from = options.from || config.defaultAccount;                                                              // 3679
                                                                                                                       // 3680
    if (options.from) {                                                                                                // 3681
        options.from = inputAddressFormatter(options.from);                                                            // 3682
    }                                                                                                                  // 3683
                                                                                                                       // 3684
    if (options.to) { // it might be contract creation                                                                 // 3685
        options.to = inputAddressFormatter(options.to);                                                                // 3686
    }                                                                                                                  // 3687
                                                                                                                       // 3688
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3689
        return options[key] !== undefined;                                                                             // 3690
    }).forEach(function(key){                                                                                          // 3691
        options[key] = utils.fromDecimal(options[key]);                                                                // 3692
    });                                                                                                                // 3693
                                                                                                                       // 3694
    return options;                                                                                                    // 3695
};                                                                                                                     // 3696
                                                                                                                       // 3697
/**                                                                                                                    // 3698
 * Formats the input of a transaction and converts all values to HEX                                                   // 3699
 *                                                                                                                     // 3700
 * @method inputTransactionFormatter                                                                                   // 3701
 * @param {Object} transaction options                                                                                 // 3702
 * @returns object                                                                                                     // 3703
*/                                                                                                                     // 3704
var inputTransactionFormatter = function (options){                                                                    // 3705
                                                                                                                       // 3706
    options.from = options.from || config.defaultAccount;                                                              // 3707
    options.from = inputAddressFormatter(options.from);                                                                // 3708
                                                                                                                       // 3709
    if (options.to) { // it might be contract creation                                                                 // 3710
        options.to = inputAddressFormatter(options.to);                                                                // 3711
    }                                                                                                                  // 3712
                                                                                                                       // 3713
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3714
        return options[key] !== undefined;                                                                             // 3715
    }).forEach(function(key){                                                                                          // 3716
        options[key] = utils.fromDecimal(options[key]);                                                                // 3717
    });                                                                                                                // 3718
                                                                                                                       // 3719
    return options;                                                                                                    // 3720
};                                                                                                                     // 3721
                                                                                                                       // 3722
/**                                                                                                                    // 3723
 * Formats the output of a transaction to its proper values                                                            // 3724
 *                                                                                                                     // 3725
 * @method outputTransactionFormatter                                                                                  // 3726
 * @param {Object} tx                                                                                                  // 3727
 * @returns {Object}                                                                                                   // 3728
*/                                                                                                                     // 3729
var outputTransactionFormatter = function (tx){                                                                        // 3730
    if(tx.blockNumber !== null)                                                                                        // 3731
        tx.blockNumber = utils.toDecimal(tx.blockNumber);                                                              // 3732
    if(tx.transactionIndex !== null)                                                                                   // 3733
        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);                                                    // 3734
    tx.nonce = utils.toDecimal(tx.nonce);                                                                              // 3735
    tx.gas = utils.toDecimal(tx.gas);                                                                                  // 3736
    tx.gasPrice = utils.toBigNumber(tx.gasPrice);                                                                      // 3737
    tx.value = utils.toBigNumber(tx.value);                                                                            // 3738
    return tx;                                                                                                         // 3739
};                                                                                                                     // 3740
                                                                                                                       // 3741
/**                                                                                                                    // 3742
 * Formats the output of a transaction receipt to its proper values                                                    // 3743
 *                                                                                                                     // 3744
 * @method outputTransactionReceiptFormatter                                                                           // 3745
 * @param {Object} receipt                                                                                             // 3746
 * @returns {Object}                                                                                                   // 3747
*/                                                                                                                     // 3748
var outputTransactionReceiptFormatter = function (receipt){                                                            // 3749
    if(receipt.blockNumber !== null)                                                                                   // 3750
        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);                                                    // 3751
    if(receipt.transactionIndex !== null)                                                                              // 3752
        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);                                          // 3753
    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);                                            // 3754
    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);                                                                // 3755
                                                                                                                       // 3756
    if(utils.isArray(receipt.logs)) {                                                                                  // 3757
        receipt.logs = receipt.logs.map(function(log){                                                                 // 3758
            return outputLogFormatter(log);                                                                            // 3759
        });                                                                                                            // 3760
    }                                                                                                                  // 3761
                                                                                                                       // 3762
    return receipt;                                                                                                    // 3763
};                                                                                                                     // 3764
                                                                                                                       // 3765
/**                                                                                                                    // 3766
 * Formats the output of a block to its proper values                                                                  // 3767
 *                                                                                                                     // 3768
 * @method outputBlockFormatter                                                                                        // 3769
 * @param {Object} block                                                                                               // 3770
 * @returns {Object}                                                                                                   // 3771
*/                                                                                                                     // 3772
var outputBlockFormatter = function(block) {                                                                           // 3773
                                                                                                                       // 3774
    // transform to number                                                                                             // 3775
    block.gasLimit = utils.toDecimal(block.gasLimit);                                                                  // 3776
    block.gasUsed = utils.toDecimal(block.gasUsed);                                                                    // 3777
    block.size = utils.toDecimal(block.size);                                                                          // 3778
    block.timestamp = utils.toDecimal(block.timestamp);                                                                // 3779
    if(block.number !== null)                                                                                          // 3780
        block.number = utils.toDecimal(block.number);                                                                  // 3781
                                                                                                                       // 3782
    block.difficulty = utils.toBigNumber(block.difficulty);                                                            // 3783
    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);                                                  // 3784
                                                                                                                       // 3785
    if (utils.isArray(block.transactions)) {                                                                           // 3786
        block.transactions.forEach(function(item){                                                                     // 3787
            if(!utils.isString(item))                                                                                  // 3788
                return outputTransactionFormatter(item);                                                               // 3789
        });                                                                                                            // 3790
    }                                                                                                                  // 3791
                                                                                                                       // 3792
    return block;                                                                                                      // 3793
};                                                                                                                     // 3794
                                                                                                                       // 3795
/**                                                                                                                    // 3796
 * Formats the output of a log                                                                                         // 3797
 *                                                                                                                     // 3798
 * @method outputLogFormatter                                                                                          // 3799
 * @param {Object} log object                                                                                          // 3800
 * @returns {Object} log                                                                                               // 3801
*/                                                                                                                     // 3802
var outputLogFormatter = function(log) {                                                                               // 3803
    if(log.blockNumber !== null)                                                                                       // 3804
        log.blockNumber = utils.toDecimal(log.blockNumber);                                                            // 3805
    if(log.transactionIndex !== null)                                                                                  // 3806
        log.transactionIndex = utils.toDecimal(log.transactionIndex);                                                  // 3807
    if(log.logIndex !== null)                                                                                          // 3808
        log.logIndex = utils.toDecimal(log.logIndex);                                                                  // 3809
                                                                                                                       // 3810
    return log;                                                                                                        // 3811
};                                                                                                                     // 3812
                                                                                                                       // 3813
/**                                                                                                                    // 3814
 * Formats the input of a whisper post and converts all values to HEX                                                  // 3815
 *                                                                                                                     // 3816
 * @method inputPostFormatter                                                                                          // 3817
 * @param {Object} transaction object                                                                                  // 3818
 * @returns {Object}                                                                                                   // 3819
*/                                                                                                                     // 3820
var inputPostFormatter = function(post) {                                                                              // 3821
                                                                                                                       // 3822
    // post.payload = utils.toHex(post.payload);                                                                       // 3823
    post.ttl = utils.fromDecimal(post.ttl);                                                                            // 3824
    post.workToProve = utils.fromDecimal(post.workToProve);                                                            // 3825
    post.priority = utils.fromDecimal(post.priority);                                                                  // 3826
                                                                                                                       // 3827
    // fallback                                                                                                        // 3828
    if (!utils.isArray(post.topics)) {                                                                                 // 3829
        post.topics = post.topics ? [post.topics] : [];                                                                // 3830
    }                                                                                                                  // 3831
                                                                                                                       // 3832
    // format the following options                                                                                    // 3833
    post.topics = post.topics.map(function(topic){                                                                     // 3834
        // convert only if not hex                                                                                     // 3835
        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);                                            // 3836
    });                                                                                                                // 3837
                                                                                                                       // 3838
    return post;                                                                                                       // 3839
};                                                                                                                     // 3840
                                                                                                                       // 3841
/**                                                                                                                    // 3842
 * Formats the output of a received post message                                                                       // 3843
 *                                                                                                                     // 3844
 * @method outputPostFormatter                                                                                         // 3845
 * @param {Object}                                                                                                     // 3846
 * @returns {Object}                                                                                                   // 3847
 */                                                                                                                    // 3848
var outputPostFormatter = function(post){                                                                              // 3849
                                                                                                                       // 3850
    post.expiry = utils.toDecimal(post.expiry);                                                                        // 3851
    post.sent = utils.toDecimal(post.sent);                                                                            // 3852
    post.ttl = utils.toDecimal(post.ttl);                                                                              // 3853
    post.workProved = utils.toDecimal(post.workProved);                                                                // 3854
    // post.payloadRaw = post.payload;                                                                                 // 3855
    // post.payload = utils.toAscii(post.payload);                                                                     // 3856
                                                                                                                       // 3857
    // if (utils.isJson(post.payload)) {                                                                               // 3858
    //     post.payload = JSON.parse(post.payload);                                                                    // 3859
    // }                                                                                                               // 3860
                                                                                                                       // 3861
    // format the following options                                                                                    // 3862
    if (!post.topics) {                                                                                                // 3863
        post.topics = [];                                                                                              // 3864
    }                                                                                                                  // 3865
    post.topics = post.topics.map(function(topic){                                                                     // 3866
        return utils.toAscii(topic);                                                                                   // 3867
    });                                                                                                                // 3868
                                                                                                                       // 3869
    return post;                                                                                                       // 3870
};                                                                                                                     // 3871
                                                                                                                       // 3872
var inputAddressFormatter = function (address) {                                                                       // 3873
    var iban = new Iban(address);                                                                                      // 3874
    if (iban.isValid() && iban.isDirect()) {                                                                           // 3875
        return '0x' + iban.address();                                                                                  // 3876
    } else if (utils.isStrictAddress(address)) {                                                                       // 3877
        return address;                                                                                                // 3878
    } else if (utils.isAddress(address)) {                                                                             // 3879
        return '0x' + address;                                                                                         // 3880
    }                                                                                                                  // 3881
    throw 'CLEMENT DEBUG : invalid address';                                                                           // 3882
};                                                                                                                     // 3883
                                                                                                                       // 3884
                                                                                                                       // 3885
var outputSyncingFormatter = function(result) {                                                                        // 3886
                                                                                                                       // 3887
    result.startingBlock = utils.toDecimal(result.startingBlock);                                                      // 3888
    result.currentBlock = utils.toDecimal(result.currentBlock);                                                        // 3889
    result.highestBlock = utils.toDecimal(result.highestBlock);                                                        // 3890
                                                                                                                       // 3891
    return result;                                                                                                     // 3892
};                                                                                                                     // 3893
                                                                                                                       // 3894
module.exports = {                                                                                                     // 3895
    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,                                                // 3896
    inputBlockNumberFormatter: inputBlockNumberFormatter,                                                              // 3897
    inputCallFormatter: inputCallFormatter,                                                                            // 3898
    inputTransactionFormatter: inputTransactionFormatter,                                                              // 3899
    inputAddressFormatter: inputAddressFormatter,                                                                      // 3900
    inputPostFormatter: inputPostFormatter,                                                                            // 3901
    outputBigNumberFormatter: outputBigNumberFormatter,                                                                // 3902
    outputTransactionFormatter: outputTransactionFormatter,                                                            // 3903
    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,                                              // 3904
    outputBlockFormatter: outputBlockFormatter,                                                                        // 3905
    outputLogFormatter: outputLogFormatter,                                                                            // 3906
    outputPostFormatter: outputPostFormatter,                                                                          // 3907
    outputSyncingFormatter: outputSyncingFormatter                                                                     // 3908
};                                                                                                                     // 3909
                                                                                                                       // 3910
                                                                                                                       // 3911
},{"../utils/config":18,"../utils/utils":20,"./iban":33}],31:[function(require,module,exports){                        // 3912
/*                                                                                                                     // 3913
    This file is part of web3.js.                                                                                      // 3914
                                                                                                                       // 3915
    web3.js is free software: you can redistribute it and/or modify                                                    // 3916
    it under the terms of the GNU Lesser General Public License as published by                                        // 3917
    the Free Software Foundation, either version 3 of the License, or                                                  // 3918
    (at your option) any later version.                                                                                // 3919
                                                                                                                       // 3920
    web3.js is distributed in the hope that it will be useful,                                                         // 3921
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3922
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3923
    GNU Lesser General Public License for more details.                                                                // 3924
                                                                                                                       // 3925
    You should have received a copy of the GNU Lesser General Public License                                           // 3926
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3927
*/                                                                                                                     // 3928
/**                                                                                                                    // 3929
 * @file function.js                                                                                                   // 3930
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3931
 * @date 2015                                                                                                          // 3932
 */                                                                                                                    // 3933
                                                                                                                       // 3934
var coder = require('../solidity/coder');                                                                              // 3935
var utils = require('../utils/utils');                                                                                 // 3936
var formatters = require('./formatters');                                                                              // 3937
var sha3 = require('../utils/sha3');                                                                                   // 3938
                                                                                                                       // 3939
/**                                                                                                                    // 3940
 * This prototype should be used to call/sendTransaction to solidity functions                                         // 3941
 */                                                                                                                    // 3942
var SolidityFunction = function (eth, json, address) {                                                                 // 3943
    this._eth = eth;                                                                                                   // 3944
    this._inputTypes = json.inputs.map(function (i) {                                                                  // 3945
        return i.type;                                                                                                 // 3946
    });                                                                                                                // 3947
    this._outputTypes = json.outputs.map(function (i) {                                                                // 3948
        return i.type;                                                                                                 // 3949
    });                                                                                                                // 3950
    this._constant = json.constant;                                                                                    // 3951
    this._name = utils.transformToFullName(json);                                                                      // 3952
    this._address = address;                                                                                           // 3953
};                                                                                                                     // 3954
                                                                                                                       // 3955
SolidityFunction.prototype.extractCallback = function (args) {                                                         // 3956
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 3957
        return args.pop(); // modify the args array!                                                                   // 3958
    }                                                                                                                  // 3959
};                                                                                                                     // 3960
                                                                                                                       // 3961
SolidityFunction.prototype.extractDefaultBlock = function (args) {                                                     // 3962
    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {                              // 3963
        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!                      // 3964
    }                                                                                                                  // 3965
};                                                                                                                     // 3966
                                                                                                                       // 3967
/**                                                                                                                    // 3968
 * Should be used to create payload from arguments                                                                     // 3969
 *                                                                                                                     // 3970
 * @method toPayload                                                                                                   // 3971
 * @param {Array} solidity function params                                                                             // 3972
 * @param {Object} optional payload options                                                                            // 3973
 */                                                                                                                    // 3974
SolidityFunction.prototype.toPayload = function (args) {                                                               // 3975
    var options = {};                                                                                                  // 3976
    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {                               // 3977
        options = args[args.length - 1];                                                                               // 3978
    }                                                                                                                  // 3979
    options.to = this._address;                                                                                        // 3980
    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);                               // 3981
    return options;                                                                                                    // 3982
};                                                                                                                     // 3983
                                                                                                                       // 3984
/**                                                                                                                    // 3985
 * Should be used to get function signature                                                                            // 3986
 *                                                                                                                     // 3987
 * @method signature                                                                                                   // 3988
 * @return {String} function signature                                                                                 // 3989
 */                                                                                                                    // 3990
SolidityFunction.prototype.signature = function () {                                                                   // 3991
    return sha3(this._name).slice(0, 8);                                                                               // 3992
};                                                                                                                     // 3993
                                                                                                                       // 3994
                                                                                                                       // 3995
SolidityFunction.prototype.unpackOutput = function (output) {                                                          // 3996
    if (!output) {                                                                                                     // 3997
        return;                                                                                                        // 3998
    }                                                                                                                  // 3999
                                                                                                                       // 4000
    output = output.length >= 2 ? output.slice(2) : output;                                                            // 4001
    var result = coder.decodeParams(this._outputTypes, output);                                                        // 4002
    return result.length === 1 ? result[0] : result;                                                                   // 4003
};                                                                                                                     // 4004
                                                                                                                       // 4005
/**                                                                                                                    // 4006
 * Calls a contract function.                                                                                          // 4007
 *                                                                                                                     // 4008
 * @method call                                                                                                        // 4009
 * @param {...Object} Contract function arguments                                                                      // 4010
 * @param {function} If the last argument is a function, the contract function                                         // 4011
 *   call will be asynchronous, and the callback will be passed the                                                    // 4012
 *   error and result.                                                                                                 // 4013
 * @return {String} output bytes                                                                                       // 4014
 */                                                                                                                    // 4015
SolidityFunction.prototype.call = function () {                                                                        // 4016
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 4017
    var callback = this.extractCallback(args);                                                                         // 4018
    var defaultBlock = this.extractDefaultBlock(args);                                                                 // 4019
    var payload = this.toPayload(args);                                                                                // 4020
                                                                                                                       // 4021
                                                                                                                       // 4022
    if (!callback) {                                                                                                   // 4023
        var output = this._eth.call(payload, defaultBlock);                                                            // 4024
        return this.unpackOutput(output);                                                                              // 4025
    }                                                                                                                  // 4026
                                                                                                                       // 4027
    var self = this;                                                                                                   // 4028
    this._eth.call(payload, defaultBlock, function (error, output) {                                                   // 4029
        callback(error, self.unpackOutput(output));                                                                    // 4030
    });                                                                                                                // 4031
};                                                                                                                     // 4032
                                                                                                                       // 4033
/**                                                                                                                    // 4034
 * Should be used to sendTransaction to solidity function                                                              // 4035
 *                                                                                                                     // 4036
 * @method sendTransaction                                                                                             // 4037
 */                                                                                                                    // 4038
SolidityFunction.prototype.sendTransaction = function () {                                                             // 4039
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 4040
    var callback = this.extractCallback(args);                                                                         // 4041
    var payload = this.toPayload(args);                                                                                // 4042
                                                                                                                       // 4043
    if (!callback) {                                                                                                   // 4044
        return this._eth.sendTransaction(payload);                                                                     // 4045
    }                                                                                                                  // 4046
                                                                                                                       // 4047
    this._eth.sendTransaction(payload, callback);                                                                      // 4048
};                                                                                                                     // 4049
                                                                                                                       // 4050
/**                                                                                                                    // 4051
 * Should be used to estimateGas of solidity function                                                                  // 4052
 *                                                                                                                     // 4053
 * @method estimateGas                                                                                                 // 4054
 */                                                                                                                    // 4055
SolidityFunction.prototype.estimateGas = function () {                                                                 // 4056
    var args = Array.prototype.slice.call(arguments);                                                                  // 4057
    var callback = this.extractCallback(args);                                                                         // 4058
    var payload = this.toPayload(args);                                                                                // 4059
                                                                                                                       // 4060
    if (!callback) {                                                                                                   // 4061
        return this._eth.estimateGas(payload);                                                                         // 4062
    }                                                                                                                  // 4063
                                                                                                                       // 4064
    this._eth.estimateGas(payload, callback);                                                                          // 4065
};                                                                                                                     // 4066
                                                                                                                       // 4067
/**                                                                                                                    // 4068
 * Return the encoded data of the call                                                                                 // 4069
 *                                                                                                                     // 4070
 * @method getData                                                                                                     // 4071
 * @return {String} the encoded data                                                                                   // 4072
 */                                                                                                                    // 4073
SolidityFunction.prototype.getData = function () {                                                                     // 4074
    var args = Array.prototype.slice.call(arguments);                                                                  // 4075
    var payload = this.toPayload(args);                                                                                // 4076
                                                                                                                       // 4077
    return payload.data;                                                                                               // 4078
};                                                                                                                     // 4079
                                                                                                                       // 4080
/**                                                                                                                    // 4081
 * Should be used to get function display name                                                                         // 4082
 *                                                                                                                     // 4083
 * @method displayName                                                                                                 // 4084
 * @return {String} display name of the function                                                                       // 4085
 */                                                                                                                    // 4086
SolidityFunction.prototype.displayName = function () {                                                                 // 4087
    return utils.extractDisplayName(this._name);                                                                       // 4088
};                                                                                                                     // 4089
                                                                                                                       // 4090
/**                                                                                                                    // 4091
 * Should be used to get function type name                                                                            // 4092
 *                                                                                                                     // 4093
 * @method typeName                                                                                                    // 4094
 * @return {String} type name of the function                                                                          // 4095
 */                                                                                                                    // 4096
SolidityFunction.prototype.typeName = function () {                                                                    // 4097
    return utils.extractTypeName(this._name);                                                                          // 4098
};                                                                                                                     // 4099
                                                                                                                       // 4100
/**                                                                                                                    // 4101
 * Should be called to get rpc requests from solidity function                                                         // 4102
 *                                                                                                                     // 4103
 * @method request                                                                                                     // 4104
 * @returns {Object}                                                                                                   // 4105
 */                                                                                                                    // 4106
SolidityFunction.prototype.request = function () {                                                                     // 4107
    var args = Array.prototype.slice.call(arguments);                                                                  // 4108
    var callback = this.extractCallback(args);                                                                         // 4109
    var payload = this.toPayload(args);                                                                                // 4110
    var format = this.unpackOutput.bind(this);                                                                         // 4111
                                                                                                                       // 4112
    return {                                                                                                           // 4113
        method: this._constant ? 'eth_call' : 'eth_sendTransaction',                                                   // 4114
        callback: callback,                                                                                            // 4115
        params: [payload],                                                                                             // 4116
        format: format                                                                                                 // 4117
    };                                                                                                                 // 4118
};                                                                                                                     // 4119
                                                                                                                       // 4120
/**                                                                                                                    // 4121
 * Should be called to execute function                                                                                // 4122
 *                                                                                                                     // 4123
 * @method execute                                                                                                     // 4124
 */                                                                                                                    // 4125
SolidityFunction.prototype.execute = function () {                                                                     // 4126
    var transaction = !this._constant;                                                                                 // 4127
                                                                                                                       // 4128
    // send transaction                                                                                                // 4129
    if (transaction) {                                                                                                 // 4130
        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));                                // 4131
    }                                                                                                                  // 4132
                                                                                                                       // 4133
    // call                                                                                                            // 4134
    return this.call.apply(this, Array.prototype.slice.call(arguments));                                               // 4135
};                                                                                                                     // 4136
                                                                                                                       // 4137
/**                                                                                                                    // 4138
 * Should be called to attach function to contract                                                                     // 4139
 *                                                                                                                     // 4140
 * @method attachToContract                                                                                            // 4141
 * @param {Contract}                                                                                                   // 4142
 */                                                                                                                    // 4143
SolidityFunction.prototype.attachToContract = function (contract) {                                                    // 4144
    var execute = this.execute.bind(this);                                                                             // 4145
    execute.request = this.request.bind(this);                                                                         // 4146
    execute.call = this.call.bind(this);                                                                               // 4147
    execute.sendTransaction = this.sendTransaction.bind(this);                                                         // 4148
    execute.estimateGas = this.estimateGas.bind(this);                                                                 // 4149
    execute.getData = this.getData.bind(this);                                                                         // 4150
    var displayName = this.displayName();                                                                              // 4151
    if (!contract[displayName]) {                                                                                      // 4152
        contract[displayName] = execute;                                                                               // 4153
    }                                                                                                                  // 4154
    contract[displayName][this.typeName()] = execute; // circular!!!!                                                  // 4155
};                                                                                                                     // 4156
                                                                                                                       // 4157
module.exports = SolidityFunction;                                                                                     // 4158
                                                                                                                       // 4159
                                                                                                                       // 4160
},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./formatters":30}],32:[function(require,module,exports){
/*                                                                                                                     // 4162
    This file is part of web3.js.                                                                                      // 4163
                                                                                                                       // 4164
    web3.js is free software: you can redistribute it and/or modify                                                    // 4165
    it under the terms of the GNU Lesser General Public License as published by                                        // 4166
    the Free Software Foundation, either version 3 of the License, or                                                  // 4167
    (at your option) any later version.                                                                                // 4168
                                                                                                                       // 4169
    web3.js is distributed in the hope that it will be useful,                                                         // 4170
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4171
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4172
    GNU Lesser General Public License for more details.                                                                // 4173
                                                                                                                       // 4174
    You should have received a copy of the GNU Lesser General Public License                                           // 4175
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4176
*/                                                                                                                     // 4177
/** @file httpprovider.js                                                                                              // 4178
 * @authors:                                                                                                           // 4179
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4180
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 4181
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4182
 * @date 2015                                                                                                          // 4183
 */                                                                                                                    // 4184
                                                                                                                       // 4185
"use strict";                                                                                                          // 4186
                                                                                                                       // 4187
var errors = require('./errors');                                                                                      // 4188
                                                                                                                       // 4189
// workaround to use httpprovider in different envs                                                                    // 4190
var XMLHttpRequest; // jshint ignore: line                                                                             // 4191
                                                                                                                       // 4192
// meteor server environment                                                                                           // 4193
if (typeof Meteor !== 'undefined' && Meteor.isServer) { // jshint ignore: line                                         // 4194
    XMLHttpRequest = Npm.require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                              // 4195
                                                                                                                       // 4196
// browser                                                                                                             // 4197
} else if (typeof window !== 'undefined' && window.XMLHttpRequest) {                                                   // 4198
    XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line                                                     // 4199
                                                                                                                       // 4200
// node                                                                                                                // 4201
} else {                                                                                                               // 4202
    XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                                  // 4203
}                                                                                                                      // 4204
                                                                                                                       // 4205
/**                                                                                                                    // 4206
 * HttpProvider should be used to send rpc calls over http                                                             // 4207
 */                                                                                                                    // 4208
var HttpProvider = function (host) {                                                                                   // 4209
    this.host = host || 'http://localhost:8545';                                                                       // 4210
};                                                                                                                     // 4211
                                                                                                                       // 4212
/**                                                                                                                    // 4213
 * Should be called to prepare new XMLHttpRequest                                                                      // 4214
 *                                                                                                                     // 4215
 * @method prepareRequest                                                                                              // 4216
 * @param {Boolean} true if request should be async                                                                    // 4217
 * @return {XMLHttpRequest} object                                                                                     // 4218
 */                                                                                                                    // 4219
HttpProvider.prototype.prepareRequest = function (async) {                                                             // 4220
    var request = new XMLHttpRequest();                                                                                // 4221
    request.open('POST', this.host, async);                                                                            // 4222
    request.setRequestHeader('Content-Type','application/json');                                                       // 4223
    return request;                                                                                                    // 4224
};                                                                                                                     // 4225
                                                                                                                       // 4226
/**                                                                                                                    // 4227
 * Should be called to make sync request                                                                               // 4228
 *                                                                                                                     // 4229
 * @method send                                                                                                        // 4230
 * @param {Object} payload                                                                                             // 4231
 * @return {Object} result                                                                                             // 4232
 */                                                                                                                    // 4233
HttpProvider.prototype.send = function (payload) {                                                                     // 4234
    var request = this.prepareRequest(false);                                                                          // 4235
                                                                                                                       // 4236
    try {                                                                                                              // 4237
        request.send(JSON.stringify(payload));                                                                         // 4238
    } catch(error) {                                                                                                   // 4239
        throw errors.InvalidConnection(this.host);                                                                     // 4240
    }                                                                                                                  // 4241
                                                                                                                       // 4242
    var result = request.responseText;                                                                                 // 4243
                                                                                                                       // 4244
    try {                                                                                                              // 4245
        result = JSON.parse(result);                                                                                   // 4246
    } catch(e) {                                                                                                       // 4247
        throw errors.InvalidResponse(request.responseText);                                                            // 4248
    }                                                                                                                  // 4249
                                                                                                                       // 4250
    return result;                                                                                                     // 4251
};                                                                                                                     // 4252
                                                                                                                       // 4253
/**                                                                                                                    // 4254
 * Should be used to make async request                                                                                // 4255
 *                                                                                                                     // 4256
 * @method sendAsync                                                                                                   // 4257
 * @param {Object} payload                                                                                             // 4258
 * @param {Function} callback triggered on end with (err, result)                                                      // 4259
 */                                                                                                                    // 4260
HttpProvider.prototype.sendAsync = function (payload, callback) {                                                      // 4261
    var request = this.prepareRequest(true);                                                                           // 4262
                                                                                                                       // 4263
    request.onreadystatechange = function() {                                                                          // 4264
        if (request.readyState === 4) {                                                                                // 4265
            var result = request.responseText;                                                                         // 4266
            var error = null;                                                                                          // 4267
                                                                                                                       // 4268
            try {                                                                                                      // 4269
                result = JSON.parse(result);                                                                           // 4270
            } catch(e) {                                                                                               // 4271
                error = errors.InvalidResponse(request.responseText);                                                  // 4272
            }                                                                                                          // 4273
                                                                                                                       // 4274
            callback(error, result);                                                                                   // 4275
        }                                                                                                              // 4276
    };                                                                                                                 // 4277
                                                                                                                       // 4278
    try {                                                                                                              // 4279
        request.send(JSON.stringify(payload));                                                                         // 4280
    } catch(error) {                                                                                                   // 4281
        callback(errors.InvalidConnection(this.host));                                                                 // 4282
    }                                                                                                                  // 4283
};                                                                                                                     // 4284
                                                                                                                       // 4285
/**                                                                                                                    // 4286
 * Synchronously tries to make Http request                                                                            // 4287
 *                                                                                                                     // 4288
 * @method isConnected                                                                                                 // 4289
 * @return {Boolean} returns true if request haven't failed. Otherwise false                                           // 4290
 */                                                                                                                    // 4291
HttpProvider.prototype.isConnected = function() {                                                                      // 4292
    try {                                                                                                              // 4293
        this.send({                                                                                                    // 4294
            id: 9999999999,                                                                                            // 4295
            jsonrpc: '2.0',                                                                                            // 4296
            method: 'net_listening',                                                                                   // 4297
            params: []                                                                                                 // 4298
        });                                                                                                            // 4299
        return true;                                                                                                   // 4300
    } catch(e) {                                                                                                       // 4301
        return false;                                                                                                  // 4302
    }                                                                                                                  // 4303
};                                                                                                                     // 4304
                                                                                                                       // 4305
module.exports = HttpProvider;                                                                                         // 4306
                                                                                                                       // 4307
                                                                                                                       // 4308
},{"./errors":26,"xmlhttprequest":17}],33:[function(require,module,exports){                                           // 4309
/*                                                                                                                     // 4310
    This file is part of web3.js.                                                                                      // 4311
                                                                                                                       // 4312
    web3.js is free software: you can redistribute it and/or modify                                                    // 4313
    it under the terms of the GNU Lesser General Public License as published by                                        // 4314
    the Free Software Foundation, either version 3 of the License, or                                                  // 4315
    (at your option) any later version.                                                                                // 4316
                                                                                                                       // 4317
    web3.js is distributed in the hope that it will be useful,                                                         // 4318
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4319
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4320
    GNU Lesser General Public License for more details.                                                                // 4321
                                                                                                                       // 4322
    You should have received a copy of the GNU Lesser General Public License                                           // 4323
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4324
*/                                                                                                                     // 4325
/**                                                                                                                    // 4326
 * @file iban.js                                                                                                       // 4327
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4328
 * @date 2015                                                                                                          // 4329
 */                                                                                                                    // 4330
                                                                                                                       // 4331
var BigNumber = require('bignumber.js');                                                                               // 4332
                                                                                                                       // 4333
var padLeft = function (string, bytes) {                                                                               // 4334
    var result = string;                                                                                               // 4335
    while (result.length < bytes * 2) {                                                                                // 4336
        result = '00' + result;                                                                                        // 4337
    }                                                                                                                  // 4338
    return result;                                                                                                     // 4339
};                                                                                                                     // 4340
                                                                                                                       // 4341
/**                                                                                                                    // 4342
 * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to       // 4343
 * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.                                                    // 4344
 *                                                                                                                     // 4345
 * @method iso13616Prepare                                                                                             // 4346
 * @param {String} iban the IBAN                                                                                       // 4347
 * @returns {String} the prepared IBAN                                                                                 // 4348
 */                                                                                                                    // 4349
var iso13616Prepare = function (iban) {                                                                                // 4350
    var A = 'A'.charCodeAt(0);                                                                                         // 4351
    var Z = 'Z'.charCodeAt(0);                                                                                         // 4352
                                                                                                                       // 4353
    iban = iban.toUpperCase();                                                                                         // 4354
    iban = iban.substr(4) + iban.substr(0,4);                                                                          // 4355
                                                                                                                       // 4356
    return iban.split('').map(function(n){                                                                             // 4357
        var code = n.charCodeAt(0);                                                                                    // 4358
        if (code >= A && code <= Z){                                                                                   // 4359
            // A = 10, B = 11, ... Z = 35                                                                              // 4360
            return code - A + 10;                                                                                      // 4361
        } else {                                                                                                       // 4362
            return n;                                                                                                  // 4363
        }                                                                                                              // 4364
    }).join('');                                                                                                       // 4365
};                                                                                                                     // 4366
                                                                                                                       // 4367
/**                                                                                                                    // 4368
 * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.                                                // 4369
 *                                                                                                                     // 4370
 * @method mod9710                                                                                                     // 4371
 * @param {String} iban                                                                                                // 4372
 * @returns {Number}                                                                                                   // 4373
 */                                                                                                                    // 4374
var mod9710 = function (iban) {                                                                                        // 4375
    var remainder = iban,                                                                                              // 4376
        block;                                                                                                         // 4377
                                                                                                                       // 4378
    while (remainder.length > 2){                                                                                      // 4379
        block = remainder.slice(0, 9);                                                                                 // 4380
        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);                                          // 4381
    }                                                                                                                  // 4382
                                                                                                                       // 4383
    return parseInt(remainder, 10) % 97;                                                                               // 4384
};                                                                                                                     // 4385
                                                                                                                       // 4386
/**                                                                                                                    // 4387
 * This prototype should be used to create iban object from iban correct string                                        // 4388
 *                                                                                                                     // 4389
 * @param {String} iban                                                                                                // 4390
 */                                                                                                                    // 4391
var Iban = function (iban) {                                                                                           // 4392
    this._iban = iban;                                                                                                 // 4393
};                                                                                                                     // 4394
                                                                                                                       // 4395
/**                                                                                                                    // 4396
 * This method should be used to create iban object from ethereum address                                              // 4397
 *                                                                                                                     // 4398
 * @method fromAddress                                                                                                 // 4399
 * @param {String} address                                                                                             // 4400
 * @return {Iban} the IBAN object                                                                                      // 4401
 */                                                                                                                    // 4402
Iban.fromAddress = function (address) {                                                                                // 4403
    var asBn = new BigNumber(address, 16);                                                                             // 4404
    var base36 = asBn.toString(36);                                                                                    // 4405
    var padded = padLeft(base36, 15);                                                                                  // 4406
    return Iban.fromBban(padded.toUpperCase());                                                                        // 4407
};                                                                                                                     // 4408
                                                                                                                       // 4409
/**                                                                                                                    // 4410
 * Convert the passed BBAN to an IBAN for this country specification.                                                  // 4411
 * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
 * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
 *                                                                                                                     // 4414
 * @method fromBban                                                                                                    // 4415
 * @param {String} bban the BBAN to convert to IBAN                                                                    // 4416
 * @returns {Iban} the IBAN object                                                                                     // 4417
 */                                                                                                                    // 4418
Iban.fromBban = function (bban) {                                                                                      // 4419
    var countryCode = 'XE';                                                                                            // 4420
                                                                                                                       // 4421
    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));                                               // 4422
    var checkDigit = ('0' + (98 - remainder)).slice(-2);                                                               // 4423
                                                                                                                       // 4424
    return new Iban(countryCode + checkDigit + bban);                                                                  // 4425
};                                                                                                                     // 4426
                                                                                                                       // 4427
/**                                                                                                                    // 4428
 * Should be used to create IBAN object for given institution and identifier                                           // 4429
 *                                                                                                                     // 4430
 * @method createIndirect                                                                                              // 4431
 * @param {Object} options, required options are "institution" and "identifier"                                        // 4432
 * @return {Iban} the IBAN object                                                                                      // 4433
 */                                                                                                                    // 4434
Iban.createIndirect = function (options) {                                                                             // 4435
    return Iban.fromBban('ETH' + options.institution + options.identifier);                                            // 4436
};                                                                                                                     // 4437
                                                                                                                       // 4438
/**                                                                                                                    // 4439
 * Thos method should be used to check if given string is valid iban object                                            // 4440
 *                                                                                                                     // 4441
 * @method isValid                                                                                                     // 4442
 * @param {String} iban string                                                                                         // 4443
 * @return {Boolean} true if it is valid IBAN                                                                          // 4444
 */                                                                                                                    // 4445
Iban.isValid = function (iban) {                                                                                       // 4446
    var i = new Iban(iban);                                                                                            // 4447
    return i.isValid();                                                                                                // 4448
};                                                                                                                     // 4449
                                                                                                                       // 4450
/**                                                                                                                    // 4451
 * Should be called to check if iban is correct                                                                        // 4452
 *                                                                                                                     // 4453
 * @method isValid                                                                                                     // 4454
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4455
 */                                                                                                                    // 4456
Iban.prototype.isValid = function () {                                                                                 // 4457
    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&                                         // 4458
        mod9710(iso13616Prepare(this._iban)) === 1;                                                                    // 4459
};                                                                                                                     // 4460
                                                                                                                       // 4461
/**                                                                                                                    // 4462
 * Should be called to check if iban number is direct                                                                  // 4463
 *                                                                                                                     // 4464
 * @method isDirect                                                                                                    // 4465
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4466
 */                                                                                                                    // 4467
Iban.prototype.isDirect = function () {                                                                                // 4468
    return this._iban.length === 34 || this._iban.length === 35;                                                       // 4469
};                                                                                                                     // 4470
                                                                                                                       // 4471
/**                                                                                                                    // 4472
 * Should be called to check if iban number if indirect                                                                // 4473
 *                                                                                                                     // 4474
 * @method isIndirect                                                                                                  // 4475
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4476
 */                                                                                                                    // 4477
Iban.prototype.isIndirect = function () {                                                                              // 4478
    return this._iban.length === 20;                                                                                   // 4479
};                                                                                                                     // 4480
                                                                                                                       // 4481
/**                                                                                                                    // 4482
 * Should be called to get iban checksum                                                                               // 4483
 * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)                                                        // 4484
 *                                                                                                                     // 4485
 * @method checksum                                                                                                    // 4486
 * @returns {String} checksum                                                                                          // 4487
 */                                                                                                                    // 4488
Iban.prototype.checksum = function () {                                                                                // 4489
    return this._iban.substr(2, 2);                                                                                    // 4490
};                                                                                                                     // 4491
                                                                                                                       // 4492
/**                                                                                                                    // 4493
 * Should be called to get institution identifier                                                                      // 4494
 * eg. XREG                                                                                                            // 4495
 *                                                                                                                     // 4496
 * @method institution                                                                                                 // 4497
 * @returns {String} institution identifier                                                                            // 4498
 */                                                                                                                    // 4499
Iban.prototype.institution = function () {                                                                             // 4500
    return this.isIndirect() ? this._iban.substr(7, 4) : '';                                                           // 4501
};                                                                                                                     // 4502
                                                                                                                       // 4503
/**                                                                                                                    // 4504
 * Should be called to get client identifier within institution                                                        // 4505
 * eg. GAVOFYORK                                                                                                       // 4506
 *                                                                                                                     // 4507
 * @method client                                                                                                      // 4508
 * @returns {String} client identifier                                                                                 // 4509
 */                                                                                                                    // 4510
Iban.prototype.client = function () {                                                                                  // 4511
    return this.isIndirect() ? this._iban.substr(11) : '';                                                             // 4512
};                                                                                                                     // 4513
                                                                                                                       // 4514
/**                                                                                                                    // 4515
 * Should be called to get client direct address                                                                       // 4516
 *                                                                                                                     // 4517
 * @method address                                                                                                     // 4518
 * @returns {String} client direct address                                                                             // 4519
 */                                                                                                                    // 4520
Iban.prototype.address = function () {                                                                                 // 4521
    if (this.isDirect()) {                                                                                             // 4522
        var base36 = this._iban.substr(4);                                                                             // 4523
        var asBn = new BigNumber(base36, 36);                                                                          // 4524
        return padLeft(asBn.toString(16), 20);                                                                         // 4525
    }                                                                                                                  // 4526
                                                                                                                       // 4527
    return '';                                                                                                         // 4528
};                                                                                                                     // 4529
                                                                                                                       // 4530
Iban.prototype.toString = function () {                                                                                // 4531
    return this._iban;                                                                                                 // 4532
};                                                                                                                     // 4533
                                                                                                                       // 4534
module.exports = Iban;                                                                                                 // 4535
                                                                                                                       // 4536
                                                                                                                       // 4537
},{"bignumber.js":"bignumber.js"}],34:[function(require,module,exports){                                               // 4538
/*                                                                                                                     // 4539
    This file is part of web3.js.                                                                                      // 4540
                                                                                                                       // 4541
    web3.js is free software: you can redistribute it and/or modify                                                    // 4542
    it under the terms of the GNU Lesser General Public License as published by                                        // 4543
    the Free Software Foundation, either version 3 of the License, or                                                  // 4544
    (at your option) any later version.                                                                                // 4545
                                                                                                                       // 4546
    web3.js is distributed in the hope that it will be useful,                                                         // 4547
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4548
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4549
    GNU Lesser General Public License for more details.                                                                // 4550
                                                                                                                       // 4551
    You should have received a copy of the GNU Lesser General Public License                                           // 4552
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4553
*/                                                                                                                     // 4554
/** @file ipcprovider.js                                                                                               // 4555
 * @authors:                                                                                                           // 4556
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4557
 * @date 2015                                                                                                          // 4558
 */                                                                                                                    // 4559
                                                                                                                       // 4560
"use strict";                                                                                                          // 4561
                                                                                                                       // 4562
var utils = require('../utils/utils');                                                                                 // 4563
var errors = require('./errors');                                                                                      // 4564
                                                                                                                       // 4565
                                                                                                                       // 4566
var IpcProvider = function (path, net) {                                                                               // 4567
    var _this = this;                                                                                                  // 4568
    this.responseCallbacks = {};                                                                                       // 4569
    this.path = path;                                                                                                  // 4570
                                                                                                                       // 4571
    this.connection = net.connect({path: this.path});                                                                  // 4572
                                                                                                                       // 4573
    this.connection.on('error', function(e){                                                                           // 4574
        console.error('IPC Connection Error', e);                                                                      // 4575
        _this._timeout();                                                                                              // 4576
    });                                                                                                                // 4577
                                                                                                                       // 4578
    this.connection.on('end', function(){                                                                              // 4579
        _this._timeout();                                                                                              // 4580
    });                                                                                                                // 4581
                                                                                                                       // 4582
                                                                                                                       // 4583
    // LISTEN FOR CONNECTION RESPONSES                                                                                 // 4584
    this.connection.on('data', function(data) {                                                                        // 4585
        /*jshint maxcomplexity: 6 */                                                                                   // 4586
                                                                                                                       // 4587
        _this._parseResponse(data.toString()).forEach(function(result){                                                // 4588
                                                                                                                       // 4589
            var id = null;                                                                                             // 4590
                                                                                                                       // 4591
            // get the id which matches the returned id                                                                // 4592
            if(utils.isArray(result)) {                                                                                // 4593
                result.forEach(function(load){                                                                         // 4594
                    if(_this.responseCallbacks[load.id])                                                               // 4595
                        id = load.id;                                                                                  // 4596
                });                                                                                                    // 4597
            } else {                                                                                                   // 4598
                id = result.id;                                                                                        // 4599
            }                                                                                                          // 4600
                                                                                                                       // 4601
            // fire the callback                                                                                       // 4602
            if(_this.responseCallbacks[id]) {                                                                          // 4603
                _this.responseCallbacks[id](null, result);                                                             // 4604
                delete _this.responseCallbacks[id];                                                                    // 4605
            }                                                                                                          // 4606
        });                                                                                                            // 4607
    });                                                                                                                // 4608
};                                                                                                                     // 4609
                                                                                                                       // 4610
/**                                                                                                                    // 4611
Will parse the response and make an array out of it.                                                                   // 4612
                                                                                                                       // 4613
@method _parseResponse                                                                                                 // 4614
@param {String} data                                                                                                   // 4615
*/                                                                                                                     // 4616
IpcProvider.prototype._parseResponse = function(data) {                                                                // 4617
    var _this = this,                                                                                                  // 4618
        returnValues = [];                                                                                             // 4619
                                                                                                                       // 4620
    // DE-CHUNKER                                                                                                      // 4621
    var dechunkedData = data                                                                                           // 4622
        .replace(/\}[\n\r]?\{/g,'}|--|{') // }{                                                                        // 4623
        .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{                                                                // 4624
        .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{                                                                    // 4625
        .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{                                                                    // 4626
        .split('|--|');                                                                                                // 4627
                                                                                                                       // 4628
    dechunkedData.forEach(function(data){                                                                              // 4629
                                                                                                                       // 4630
        // prepend the last chunk                                                                                      // 4631
        if(_this.lastChunk)                                                                                            // 4632
            data = _this.lastChunk + data;                                                                             // 4633
                                                                                                                       // 4634
        var result = null;                                                                                             // 4635
                                                                                                                       // 4636
        try {                                                                                                          // 4637
            result = JSON.parse(data);                                                                                 // 4638
                                                                                                                       // 4639
        } catch(e) {                                                                                                   // 4640
                                                                                                                       // 4641
            _this.lastChunk = data;                                                                                    // 4642
                                                                                                                       // 4643
            // start timeout to cancel all requests                                                                    // 4644
            clearTimeout(_this.lastChunkTimeout);                                                                      // 4645
            _this.lastChunkTimeout = setTimeout(function(){                                                            // 4646
                _this._timeout();                                                                                      // 4647
                throw errors.InvalidResponse(data);                                                                    // 4648
            }, 1000 * 15);                                                                                             // 4649
                                                                                                                       // 4650
            return;                                                                                                    // 4651
        }                                                                                                              // 4652
                                                                                                                       // 4653
        // cancel timeout and set chunk to null                                                                        // 4654
        clearTimeout(_this.lastChunkTimeout);                                                                          // 4655
        _this.lastChunk = null;                                                                                        // 4656
                                                                                                                       // 4657
        if(result)                                                                                                     // 4658
            returnValues.push(result);                                                                                 // 4659
    });                                                                                                                // 4660
                                                                                                                       // 4661
    return returnValues;                                                                                               // 4662
};                                                                                                                     // 4663
                                                                                                                       // 4664
                                                                                                                       // 4665
/**                                                                                                                    // 4666
Get the adds a callback to the responseCallbacks object,                                                               // 4667
which will be called if a response matching the response Id will arrive.                                               // 4668
                                                                                                                       // 4669
@method _addResponseCallback                                                                                           // 4670
*/                                                                                                                     // 4671
IpcProvider.prototype._addResponseCallback = function(payload, callback) {                                             // 4672
    var id = payload.id || payload[0].id;                                                                              // 4673
    var method = payload.method || payload[0].method;                                                                  // 4674
                                                                                                                       // 4675
    this.responseCallbacks[id] = callback;                                                                             // 4676
    this.responseCallbacks[id].method = method;                                                                        // 4677
};                                                                                                                     // 4678
                                                                                                                       // 4679
/**                                                                                                                    // 4680
Timeout all requests when the end/error event is fired                                                                 // 4681
                                                                                                                       // 4682
@method _timeout                                                                                                       // 4683
*/                                                                                                                     // 4684
IpcProvider.prototype._timeout = function() {                                                                          // 4685
    for(var key in this.responseCallbacks) {                                                                           // 4686
        if(this.responseCallbacks.hasOwnProperty(key)){                                                                // 4687
            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));                                           // 4688
            delete this.responseCallbacks[key];                                                                        // 4689
        }                                                                                                              // 4690
    }                                                                                                                  // 4691
};                                                                                                                     // 4692
                                                                                                                       // 4693
                                                                                                                       // 4694
/**                                                                                                                    // 4695
Check if the current connection is still valid.                                                                        // 4696
                                                                                                                       // 4697
@method isConnected                                                                                                    // 4698
*/                                                                                                                     // 4699
IpcProvider.prototype.isConnected = function() {                                                                       // 4700
    var _this = this;                                                                                                  // 4701
                                                                                                                       // 4702
    // try reconnect, when connection is gone                                                                          // 4703
    if(!_this.connection.writable)                                                                                     // 4704
        _this.connection.connect({path: _this.path});                                                                  // 4705
                                                                                                                       // 4706
    return !!this.connection.writable;                                                                                 // 4707
};                                                                                                                     // 4708
                                                                                                                       // 4709
IpcProvider.prototype.send = function (payload) {                                                                      // 4710
                                                                                                                       // 4711
    if(this.connection.writeSync) {                                                                                    // 4712
        var result;                                                                                                    // 4713
                                                                                                                       // 4714
        // try reconnect, when connection is gone                                                                      // 4715
        if(!this.connection.writable)                                                                                  // 4716
            this.connection.connect({path: this.path});                                                                // 4717
                                                                                                                       // 4718
        var data = this.connection.writeSync(JSON.stringify(payload));                                                 // 4719
                                                                                                                       // 4720
        try {                                                                                                          // 4721
            result = JSON.parse(data);                                                                                 // 4722
        } catch(e) {                                                                                                   // 4723
            throw errors.InvalidResponse(data);                                                                        // 4724
        }                                                                                                              // 4725
                                                                                                                       // 4726
        return result;                                                                                                 // 4727
                                                                                                                       // 4728
    } else {                                                                                                           // 4729
        throw new Error('You tried to send "'+ payload.method +'" synchronously. Synchronous requests are not supported by the IPC provider.');
    }                                                                                                                  // 4731
};                                                                                                                     // 4732
                                                                                                                       // 4733
IpcProvider.prototype.sendAsync = function (payload, callback) {                                                       // 4734
    // try reconnect, when connection is gone                                                                          // 4735
    if(!this.connection.writable)                                                                                      // 4736
        this.connection.connect({path: this.path});                                                                    // 4737
                                                                                                                       // 4738
                                                                                                                       // 4739
    this.connection.write(JSON.stringify(payload));                                                                    // 4740
    this._addResponseCallback(payload, callback);                                                                      // 4741
};                                                                                                                     // 4742
                                                                                                                       // 4743
module.exports = IpcProvider;                                                                                          // 4744
                                                                                                                       // 4745
                                                                                                                       // 4746
},{"../utils/utils":20,"./errors":26}],35:[function(require,module,exports){                                           // 4747
/*                                                                                                                     // 4748
    This file is part of web3.js.                                                                                      // 4749
                                                                                                                       // 4750
    web3.js is free software: you can redistribute it and/or modify                                                    // 4751
    it under the terms of the GNU Lesser General Public License as published by                                        // 4752
    the Free Software Foundation, either version 3 of the License, or                                                  // 4753
    (at your option) any later version.                                                                                // 4754
                                                                                                                       // 4755
    web3.js is distributed in the hope that it will be useful,                                                         // 4756
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4757
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4758
    GNU Lesser General Public License for more details.                                                                // 4759
                                                                                                                       // 4760
    You should have received a copy of the GNU Lesser General Public License                                           // 4761
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4762
*/                                                                                                                     // 4763
/** @file jsonrpc.js                                                                                                   // 4764
 * @authors:                                                                                                           // 4765
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4766
 * @date 2015                                                                                                          // 4767
 */                                                                                                                    // 4768
                                                                                                                       // 4769
var Jsonrpc = function () {                                                                                            // 4770
    // singleton pattern                                                                                               // 4771
    if (arguments.callee._singletonInstance) {                                                                         // 4772
        return arguments.callee._singletonInstance;                                                                    // 4773
    }                                                                                                                  // 4774
    arguments.callee._singletonInstance = this;                                                                        // 4775
                                                                                                                       // 4776
    this.messageId = 1;                                                                                                // 4777
};                                                                                                                     // 4778
                                                                                                                       // 4779
/**                                                                                                                    // 4780
 * @return {Jsonrpc} singleton                                                                                         // 4781
 */                                                                                                                    // 4782
Jsonrpc.getInstance = function () {                                                                                    // 4783
    var instance = new Jsonrpc();                                                                                      // 4784
    return instance;                                                                                                   // 4785
};                                                                                                                     // 4786
                                                                                                                       // 4787
/**                                                                                                                    // 4788
 * Should be called to valid json create payload object                                                                // 4789
 *                                                                                                                     // 4790
 * @method toPayload                                                                                                   // 4791
 * @param {Function} method of jsonrpc call, required                                                                  // 4792
 * @param {Array} params, an array of method params, optional                                                          // 4793
 * @returns {Object} valid jsonrpc payload object                                                                      // 4794
 */                                                                                                                    // 4795
Jsonrpc.prototype.toPayload = function (method, params) {                                                              // 4796
    if (!method)                                                                                                       // 4797
        console.error('jsonrpc method should be specified!');                                                          // 4798
                                                                                                                       // 4799
    return {                                                                                                           // 4800
        jsonrpc: '2.0',                                                                                                // 4801
        method: method,                                                                                                // 4802
        params: params || [],                                                                                          // 4803
        id: this.messageId++                                                                                           // 4804
    };                                                                                                                 // 4805
};                                                                                                                     // 4806
                                                                                                                       // 4807
/**                                                                                                                    // 4808
 * Should be called to check if jsonrpc response is valid                                                              // 4809
 *                                                                                                                     // 4810
 * @method isValidResponse                                                                                             // 4811
 * @param {Object}                                                                                                     // 4812
 * @returns {Boolean} true if response is valid, otherwise false                                                       // 4813
 */                                                                                                                    // 4814
Jsonrpc.prototype.isValidResponse = function (response) {                                                              // 4815
    return !!response &&                                                                                               // 4816
        !response.error &&                                                                                             // 4817
        response.jsonrpc === '2.0' &&                                                                                  // 4818
        typeof response.id === 'number' &&                                                                             // 4819
        response.result !== undefined; // only undefined is not valid json object                                      // 4820
};                                                                                                                     // 4821
                                                                                                                       // 4822
/**                                                                                                                    // 4823
 * Should be called to create batch payload object                                                                     // 4824
 *                                                                                                                     // 4825
 * @method toBatchPayload                                                                                              // 4826
 * @param {Array} messages, an array of objects with method (required) and params (optional) fields                    // 4827
 * @returns {Array} batch payload                                                                                      // 4828
 */                                                                                                                    // 4829
Jsonrpc.prototype.toBatchPayload = function (messages) {                                                               // 4830
    var self = this;                                                                                                   // 4831
    return messages.map(function (message) {                                                                           // 4832
        return self.toPayload(message.method, message.params);                                                         // 4833
    });                                                                                                                // 4834
};                                                                                                                     // 4835
                                                                                                                       // 4836
module.exports = Jsonrpc;                                                                                              // 4837
                                                                                                                       // 4838
                                                                                                                       // 4839
},{}],36:[function(require,module,exports){                                                                            // 4840
/*                                                                                                                     // 4841
    This file is part of web3.js.                                                                                      // 4842
                                                                                                                       // 4843
    web3.js is free software: you can redistribute it and/or modify                                                    // 4844
    it under the terms of the GNU Lesser General Public License as published by                                        // 4845
    the Free Software Foundation, either version 3 of the License, or                                                  // 4846
    (at your option) any later version.                                                                                // 4847
                                                                                                                       // 4848
    web3.js is distributed in the hope that it will be useful,                                                         // 4849
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4850
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4851
    GNU Lesser General Public License for more details.                                                                // 4852
                                                                                                                       // 4853
    You should have received a copy of the GNU Lesser General Public License                                           // 4854
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4855
*/                                                                                                                     // 4856
/**                                                                                                                    // 4857
 * @file method.js                                                                                                     // 4858
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4859
 * @date 2015                                                                                                          // 4860
 */                                                                                                                    // 4861
                                                                                                                       // 4862
var utils = require('../utils/utils');                                                                                 // 4863
var errors = require('./errors');                                                                                      // 4864
                                                                                                                       // 4865
var Method = function (options) {                                                                                      // 4866
    this.name = options.name;                                                                                          // 4867
    this.call = options.call;                                                                                          // 4868
    this.params = options.params || 0;                                                                                 // 4869
    this.inputFormatter = options.inputFormatter;                                                                      // 4870
    this.outputFormatter = options.outputFormatter;                                                                    // 4871
    this.requestManager = null;                                                                                        // 4872
};                                                                                                                     // 4873
                                                                                                                       // 4874
Method.prototype.setRequestManager = function (rm) {                                                                   // 4875
    this.requestManager = rm;                                                                                          // 4876
};                                                                                                                     // 4877
                                                                                                                       // 4878
/**                                                                                                                    // 4879
 * Should be used to determine name of the jsonrpc method based on arguments                                           // 4880
 *                                                                                                                     // 4881
 * @method getCall                                                                                                     // 4882
 * @param {Array} arguments                                                                                            // 4883
 * @return {String} name of jsonrpc method                                                                             // 4884
 */                                                                                                                    // 4885
Method.prototype.getCall = function (args) {                                                                           // 4886
    return utils.isFunction(this.call) ? this.call(args) : this.call;                                                  // 4887
};                                                                                                                     // 4888
                                                                                                                       // 4889
/**                                                                                                                    // 4890
 * Should be used to extract callback from array of arguments. Modifies input param                                    // 4891
 *                                                                                                                     // 4892
 * @method extractCallback                                                                                             // 4893
 * @param {Array} arguments                                                                                            // 4894
 * @return {Function|Null} callback, if exists                                                                         // 4895
 */                                                                                                                    // 4896
Method.prototype.extractCallback = function (args) {                                                                   // 4897
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 4898
        return args.pop(); // modify the args array!                                                                   // 4899
    }                                                                                                                  // 4900
};                                                                                                                     // 4901
                                                                                                                       // 4902
/**                                                                                                                    // 4903
 * Should be called to check if the number of arguments is correct                                                     // 4904
 *                                                                                                                     // 4905
 * @method validateArgs                                                                                                // 4906
 * @param {Array} arguments                                                                                            // 4907
 * @throws {Error} if it is not                                                                                        // 4908
 */                                                                                                                    // 4909
Method.prototype.validateArgs = function (args) {                                                                      // 4910
    if (args.length !== this.params) {                                                                                 // 4911
        throw errors.InvalidNumberOfParams();                                                                          // 4912
    }                                                                                                                  // 4913
};                                                                                                                     // 4914
                                                                                                                       // 4915
/**                                                                                                                    // 4916
 * Should be called to format input args of method                                                                     // 4917
 *                                                                                                                     // 4918
 * @method formatInput                                                                                                 // 4919
 * @param {Array}                                                                                                      // 4920
 * @return {Array}                                                                                                     // 4921
 */                                                                                                                    // 4922
Method.prototype.formatInput = function (args) {                                                                       // 4923
    if (!this.inputFormatter) {                                                                                        // 4924
        return args;                                                                                                   // 4925
    }                                                                                                                  // 4926
                                                                                                                       // 4927
    return this.inputFormatter.map(function (formatter, index) {                                                       // 4928
        return formatter ? formatter(args[index]) : args[index];                                                       // 4929
    });                                                                                                                // 4930
};                                                                                                                     // 4931
                                                                                                                       // 4932
/**                                                                                                                    // 4933
 * Should be called to format output(result) of method                                                                 // 4934
 *                                                                                                                     // 4935
 * @method formatOutput                                                                                                // 4936
 * @param {Object}                                                                                                     // 4937
 * @return {Object}                                                                                                    // 4938
 */                                                                                                                    // 4939
Method.prototype.formatOutput = function (result) {                                                                    // 4940
    return this.outputFormatter && result ? this.outputFormatter(result) : result;                                     // 4941
};                                                                                                                     // 4942
                                                                                                                       // 4943
/**                                                                                                                    // 4944
 * Should create payload from given input args                                                                         // 4945
 *                                                                                                                     // 4946
 * @method toPayload                                                                                                   // 4947
 * @param {Array} args                                                                                                 // 4948
 * @return {Object}                                                                                                    // 4949
 */                                                                                                                    // 4950
Method.prototype.toPayload = function (args) {                                                                         // 4951
    var call = this.getCall(args);                                                                                     // 4952
    var callback = this.extractCallback(args);                                                                         // 4953
    var params = this.formatInput(args);                                                                               // 4954
    this.validateArgs(params);                                                                                         // 4955
                                                                                                                       // 4956
    return {                                                                                                           // 4957
        method: call,                                                                                                  // 4958
        params: params,                                                                                                // 4959
        callback: callback                                                                                             // 4960
    };                                                                                                                 // 4961
};                                                                                                                     // 4962
                                                                                                                       // 4963
Method.prototype.attachToObject = function (obj) {                                                                     // 4964
    var func = this.buildCall();                                                                                       // 4965
    func.call = this.call; // TODO!!! that's ugly. filter.js uses it                                                   // 4966
    var name = this.name.split('.');                                                                                   // 4967
    if (name.length > 1) {                                                                                             // 4968
        obj[name[0]] = obj[name[0]] || {};                                                                             // 4969
        obj[name[0]][name[1]] = func;                                                                                  // 4970
    } else {                                                                                                           // 4971
        obj[name[0]] = func;                                                                                           // 4972
    }                                                                                                                  // 4973
};                                                                                                                     // 4974
                                                                                                                       // 4975
Method.prototype.buildCall = function() {                                                                              // 4976
    var method = this;                                                                                                 // 4977
    var send = function () {                                                                                           // 4978
        var payload = method.toPayload(Array.prototype.slice.call(arguments));                                         // 4979
        if (payload.callback) {                                                                                        // 4980
            return method.requestManager.sendAsync(payload, function (err, result) {                                   // 4981
                payload.callback(err, method.formatOutput(result));                                                    // 4982
            });                                                                                                        // 4983
        }                                                                                                              // 4984
        return method.formatOutput(method.requestManager.send(payload));                                               // 4985
    };                                                                                                                 // 4986
    send.request = this.request.bind(this);                                                                            // 4987
    return send;                                                                                                       // 4988
};                                                                                                                     // 4989
                                                                                                                       // 4990
/**                                                                                                                    // 4991
 * Should be called to create pure JSONRPC request which can be used in batch request                                  // 4992
 *                                                                                                                     // 4993
 * @method request                                                                                                     // 4994
 * @param {...} params                                                                                                 // 4995
 * @return {Object} jsonrpc request                                                                                    // 4996
 */                                                                                                                    // 4997
Method.prototype.request = function () {                                                                               // 4998
    var payload = this.toPayload(Array.prototype.slice.call(arguments));                                               // 4999
    payload.format = this.formatOutput.bind(this);                                                                     // 5000
    return payload;                                                                                                    // 5001
};                                                                                                                     // 5002
                                                                                                                       // 5003
module.exports = Method;                                                                                               // 5004
                                                                                                                       // 5005
                                                                                                                       // 5006
},{"../utils/utils":20,"./errors":26}],37:[function(require,module,exports){                                           // 5007
/*                                                                                                                     // 5008
    This file is part of web3.js.                                                                                      // 5009
                                                                                                                       // 5010
    web3.js is free software: you can redistribute it and/or modify                                                    // 5011
    it under the terms of the GNU Lesser General Public License as published by                                        // 5012
    the Free Software Foundation, either version 3 of the License, or                                                  // 5013
    (at your option) any later version.                                                                                // 5014
                                                                                                                       // 5015
    web3.js is distributed in the hope that it will be useful,                                                         // 5016
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5017
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5018
    GNU Lesser General Public License for more details.                                                                // 5019
                                                                                                                       // 5020
    You should have received a copy of the GNU Lesser General Public License                                           // 5021
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5022
*/                                                                                                                     // 5023
/** @file db.js                                                                                                        // 5024
 * @authors:                                                                                                           // 5025
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5026
 * @date 2015                                                                                                          // 5027
 */                                                                                                                    // 5028
                                                                                                                       // 5029
var Method = require('../method');                                                                                     // 5030
                                                                                                                       // 5031
var DB = function (web3) {                                                                                             // 5032
    this._requestManager = web3._requestManager;                                                                       // 5033
                                                                                                                       // 5034
    var self = this;                                                                                                   // 5035
                                                                                                                       // 5036
    methods().forEach(function(method) {                                                                               // 5037
        method.attachToObject(self);                                                                                   // 5038
        method.setRequestManager(web3._requestManager);                                                                // 5039
    });                                                                                                                // 5040
};                                                                                                                     // 5041
                                                                                                                       // 5042
var methods = function () {                                                                                            // 5043
    var putString = new Method({                                                                                       // 5044
        name: 'putString',                                                                                             // 5045
        call: 'db_putString',                                                                                          // 5046
        params: 3                                                                                                      // 5047
    });                                                                                                                // 5048
                                                                                                                       // 5049
    var getString = new Method({                                                                                       // 5050
        name: 'getString',                                                                                             // 5051
        call: 'db_getString',                                                                                          // 5052
        params: 2                                                                                                      // 5053
    });                                                                                                                // 5054
                                                                                                                       // 5055
    var putHex = new Method({                                                                                          // 5056
        name: 'putHex',                                                                                                // 5057
        call: 'db_putHex',                                                                                             // 5058
        params: 3                                                                                                      // 5059
    });                                                                                                                // 5060
                                                                                                                       // 5061
    var getHex = new Method({                                                                                          // 5062
        name: 'getHex',                                                                                                // 5063
        call: 'db_getHex',                                                                                             // 5064
        params: 2                                                                                                      // 5065
    });                                                                                                                // 5066
                                                                                                                       // 5067
    return [                                                                                                           // 5068
        putString, getString, putHex, getHex                                                                           // 5069
    ];                                                                                                                 // 5070
};                                                                                                                     // 5071
                                                                                                                       // 5072
module.exports = DB;                                                                                                   // 5073
                                                                                                                       // 5074
},{"../method":36}],38:[function(require,module,exports){                                                              // 5075
/*                                                                                                                     // 5076
    This file is part of web3.js.                                                                                      // 5077
                                                                                                                       // 5078
    web3.js is free software: you can redistribute it and/or modify                                                    // 5079
    it under the terms of the GNU Lesser General Public License as published by                                        // 5080
    the Free Software Foundation, either version 3 of the License, or                                                  // 5081
    (at your option) any later version.                                                                                // 5082
                                                                                                                       // 5083
    web3.js is distributed in the hope that it will be useful,                                                         // 5084
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5085
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5086
    GNU Lesser General Public License for more details.                                                                // 5087
                                                                                                                       // 5088
    You should have received a copy of the GNU Lesser General Public License                                           // 5089
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5090
*/                                                                                                                     // 5091
/**                                                                                                                    // 5092
 * @file eth.js                                                                                                        // 5093
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5094
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5095
 * @date 2015                                                                                                          // 5096
 */                                                                                                                    // 5097
                                                                                                                       // 5098
"use strict";                                                                                                          // 5099
                                                                                                                       // 5100
var formatters = require('../formatters');                                                                             // 5101
var utils = require('../../utils/utils');                                                                              // 5102
var Method = require('../method');                                                                                     // 5103
var Property = require('../property');                                                                                 // 5104
var c = require('../../utils/config');                                                                                 // 5105
var Contract = require('../contract');                                                                                 // 5106
var watches = require('./watches');                                                                                    // 5107
var Filter = require('../filter');                                                                                     // 5108
var IsSyncing = require('../syncing');                                                                                 // 5109
var namereg = require('../namereg');                                                                                   // 5110
var Iban = require('../iban');                                                                                         // 5111
var transfer = require('../transfer');                                                                                 // 5112
                                                                                                                       // 5113
var blockCall = function (args) {                                                                                      // 5114
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";   // 5115
};                                                                                                                     // 5116
                                                                                                                       // 5117
var transactionFromBlockCall = function (args) {                                                                       // 5118
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
};                                                                                                                     // 5120
                                                                                                                       // 5121
var uncleCall = function (args) {                                                                                      // 5122
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
};                                                                                                                     // 5124
                                                                                                                       // 5125
var getBlockTransactionCountCall = function (args) {                                                                   // 5126
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
};                                                                                                                     // 5128
                                                                                                                       // 5129
var uncleCountCall = function (args) {                                                                                 // 5130
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
};                                                                                                                     // 5132
                                                                                                                       // 5133
function Eth(web3) {                                                                                                   // 5134
    this._requestManager = web3._requestManager;                                                                       // 5135
                                                                                                                       // 5136
    var self = this;                                                                                                   // 5137
                                                                                                                       // 5138
    methods().forEach(function(method) {                                                                               // 5139
        method.attachToObject(self);                                                                                   // 5140
        method.setRequestManager(self._requestManager);                                                                // 5141
    });                                                                                                                // 5142
                                                                                                                       // 5143
    properties().forEach(function(p) {                                                                                 // 5144
        p.attachToObject(self);                                                                                        // 5145
        p.setRequestManager(self._requestManager);                                                                     // 5146
    });                                                                                                                // 5147
                                                                                                                       // 5148
                                                                                                                       // 5149
    this.iban = Iban;                                                                                                  // 5150
    this.sendIBANTransaction = transfer.bind(null, this);                                                              // 5151
}                                                                                                                      // 5152
                                                                                                                       // 5153
Object.defineProperty(Eth.prototype, 'defaultBlock', {                                                                 // 5154
    get: function () {                                                                                                 // 5155
        return c.defaultBlock;                                                                                         // 5156
    },                                                                                                                 // 5157
    set: function (val) {                                                                                              // 5158
        c.defaultBlock = val;                                                                                          // 5159
        return val;                                                                                                    // 5160
    }                                                                                                                  // 5161
});                                                                                                                    // 5162
                                                                                                                       // 5163
Object.defineProperty(Eth.prototype, 'defaultAccount', {                                                               // 5164
    get: function () {                                                                                                 // 5165
        return c.defaultAccount;                                                                                       // 5166
    },                                                                                                                 // 5167
    set: function (val) {                                                                                              // 5168
        c.defaultAccount = val;                                                                                        // 5169
        return val;                                                                                                    // 5170
    }                                                                                                                  // 5171
});                                                                                                                    // 5172
                                                                                                                       // 5173
var methods = function () {                                                                                            // 5174
    var getBalance = new Method({                                                                                      // 5175
        name: 'getBalance',                                                                                            // 5176
        call: 'eth_getBalance',                                                                                        // 5177
        params: 2,                                                                                                     // 5178
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],               // 5179
        outputFormatter: formatters.outputBigNumberFormatter                                                           // 5180
    });                                                                                                                // 5181
                                                                                                                       // 5182
    var getStorageAt = new Method({                                                                                    // 5183
        name: 'getStorageAt',                                                                                          // 5184
        call: 'eth_getStorageAt',                                                                                      // 5185
        params: 3,                                                                                                     // 5186
        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]                               // 5187
    });                                                                                                                // 5188
                                                                                                                       // 5189
    var getCode = new Method({                                                                                         // 5190
        name: 'getCode',                                                                                               // 5191
        call: 'eth_getCode',                                                                                           // 5192
        params: 2,                                                                                                     // 5193
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]                // 5194
    });                                                                                                                // 5195
                                                                                                                       // 5196
    var getBlock = new Method({                                                                                        // 5197
        name: 'getBlock',                                                                                              // 5198
        call: blockCall,                                                                                               // 5199
        params: 2,                                                                                                     // 5200
        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],                      // 5201
        outputFormatter: formatters.outputBlockFormatter                                                               // 5202
    });                                                                                                                // 5203
                                                                                                                       // 5204
    var getUncle = new Method({                                                                                        // 5205
        name: 'getUncle',                                                                                              // 5206
        call: uncleCall,                                                                                               // 5207
        params: 2,                                                                                                     // 5208
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5209
        outputFormatter: formatters.outputBlockFormatter,                                                              // 5210
                                                                                                                       // 5211
    });                                                                                                                // 5212
                                                                                                                       // 5213
    var getCompilers = new Method({                                                                                    // 5214
        name: 'getCompilers',                                                                                          // 5215
        call: 'eth_getCompilers',                                                                                      // 5216
        params: 0                                                                                                      // 5217
    });                                                                                                                // 5218
                                                                                                                       // 5219
    var getBlockTransactionCount = new Method({                                                                        // 5220
        name: 'getBlockTransactionCount',                                                                              // 5221
        call: getBlockTransactionCountCall,                                                                            // 5222
        params: 1,                                                                                                     // 5223
        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5224
        outputFormatter: utils.toDecimal                                                                               // 5225
    });                                                                                                                // 5226
                                                                                                                       // 5227
    var getBlockUncleCount = new Method({                                                                              // 5228
        name: 'getBlockUncleCount',                                                                                    // 5229
        call: uncleCountCall,                                                                                          // 5230
        params: 1,                                                                                                     // 5231
        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5232
        outputFormatter: utils.toDecimal                                                                               // 5233
    });                                                                                                                // 5234
                                                                                                                       // 5235
    var getTransaction = new Method({                                                                                  // 5236
        name: 'getTransaction',                                                                                        // 5237
        call: 'eth_getTransactionByHash',                                                                              // 5238
        params: 1,                                                                                                     // 5239
        outputFormatter: formatters.outputTransactionFormatter                                                         // 5240
    });                                                                                                                // 5241
                                                                                                                       // 5242
    var getTransactionFromBlock = new Method({                                                                         // 5243
        name: 'getTransactionFromBlock',                                                                               // 5244
        call: transactionFromBlockCall,                                                                                // 5245
        params: 2,                                                                                                     // 5246
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5247
        outputFormatter: formatters.outputTransactionFormatter                                                         // 5248
    });                                                                                                                // 5249
                                                                                                                       // 5250
    var getTransactionReceipt = new Method({                                                                           // 5251
        name: 'getTransactionReceipt',                                                                                 // 5252
        call: 'eth_getTransactionReceipt',                                                                             // 5253
        params: 1,                                                                                                     // 5254
        outputFormatter: formatters.outputTransactionReceiptFormatter                                                  // 5255
    });                                                                                                                // 5256
                                                                                                                       // 5257
    var getTransactionCount = new Method({                                                                             // 5258
        name: 'getTransactionCount',                                                                                   // 5259
        call: 'eth_getTransactionCount',                                                                               // 5260
        params: 2,                                                                                                     // 5261
        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],                                           // 5262
        outputFormatter: utils.toDecimal                                                                               // 5263
    });                                                                                                                // 5264
                                                                                                                       // 5265
    var sendRawTransaction = new Method({                                                                              // 5266
        name: 'sendRawTransaction',                                                                                    // 5267
        call: 'eth_sendRawTransaction',                                                                                // 5268
        params: 1,                                                                                                     // 5269
        inputFormatter: [null]                                                                                         // 5270
    });                                                                                                                // 5271
                                                                                                                       // 5272
    var sendTransaction = new Method({                                                                                 // 5273
        name: 'sendTransaction',                                                                                       // 5274
        call: 'eth_sendTransaction',                                                                                   // 5275
        params: 1,                                                                                                     // 5276
        inputFormatter: [formatters.inputTransactionFormatter]                                                         // 5277
    });                                                                                                                // 5278
                                                                                                                       // 5279
    var sign = new Method({                                                                                            // 5280
        name: 'sign',                                                                                                  // 5281
        call: 'eth_sign',                                                                                              // 5282
        params: 2,                                                                                                     // 5283
        inputFormatter: [formatters.inputAddressFormatter, null]                                                       // 5284
    });                                                                                                                // 5285
                                                                                                                       // 5286
    var call = new Method({                                                                                            // 5287
        name: 'call',                                                                                                  // 5288
        call: 'eth_call',                                                                                              // 5289
        params: 2,                                                                                                     // 5290
        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]                   // 5291
    });                                                                                                                // 5292
                                                                                                                       // 5293
    var estimateGas = new Method({                                                                                     // 5294
        name: 'estimateGas',                                                                                           // 5295
        call: 'eth_estimateGas',                                                                                       // 5296
        params: 1,                                                                                                     // 5297
        inputFormatter: [formatters.inputCallFormatter],                                                               // 5298
        outputFormatter: utils.toDecimal                                                                               // 5299
    });                                                                                                                // 5300
                                                                                                                       // 5301
    var compileSolidity = new Method({                                                                                 // 5302
        name: 'compile.solidity',                                                                                      // 5303
        call: 'eth_compileSolidity',                                                                                   // 5304
        params: 1                                                                                                      // 5305
    });                                                                                                                // 5306
                                                                                                                       // 5307
    var compileLLL = new Method({                                                                                      // 5308
        name: 'compile.lll',                                                                                           // 5309
        call: 'eth_compileLLL',                                                                                        // 5310
        params: 1                                                                                                      // 5311
    });                                                                                                                // 5312
                                                                                                                       // 5313
    var compileSerpent = new Method({                                                                                  // 5314
        name: 'compile.serpent',                                                                                       // 5315
        call: 'eth_compileSerpent',                                                                                    // 5316
        params: 1                                                                                                      // 5317
    });                                                                                                                // 5318
                                                                                                                       // 5319
    var submitWork = new Method({                                                                                      // 5320
        name: 'submitWork',                                                                                            // 5321
        call: 'eth_submitWork',                                                                                        // 5322
        params: 3                                                                                                      // 5323
    });                                                                                                                // 5324
                                                                                                                       // 5325
    var getWork = new Method({                                                                                         // 5326
        name: 'getWork',                                                                                               // 5327
        call: 'eth_getWork',                                                                                           // 5328
        params: 0                                                                                                      // 5329
    });                                                                                                                // 5330
                                                                                                                       // 5331
    return [                                                                                                           // 5332
        getBalance,                                                                                                    // 5333
        getStorageAt,                                                                                                  // 5334
        getCode,                                                                                                       // 5335
        getBlock,                                                                                                      // 5336
        getUncle,                                                                                                      // 5337
        getCompilers,                                                                                                  // 5338
        getBlockTransactionCount,                                                                                      // 5339
        getBlockUncleCount,                                                                                            // 5340
        getTransaction,                                                                                                // 5341
        getTransactionFromBlock,                                                                                       // 5342
        getTransactionReceipt,                                                                                         // 5343
        getTransactionCount,                                                                                           // 5344
        call,                                                                                                          // 5345
        estimateGas,                                                                                                   // 5346
        sendRawTransaction,                                                                                            // 5347
        sendTransaction,                                                                                               // 5348
        sign,                                                                                                          // 5349
        compileSolidity,                                                                                               // 5350
        compileLLL,                                                                                                    // 5351
        compileSerpent,                                                                                                // 5352
        submitWork,                                                                                                    // 5353
        getWork                                                                                                        // 5354
    ];                                                                                                                 // 5355
};                                                                                                                     // 5356
                                                                                                                       // 5357
                                                                                                                       // 5358
var properties = function () {                                                                                         // 5359
    return [                                                                                                           // 5360
        new Property({                                                                                                 // 5361
            name: 'coinbase',                                                                                          // 5362
            getter: 'eth_coinbase'                                                                                     // 5363
        }),                                                                                                            // 5364
        new Property({                                                                                                 // 5365
            name: 'mining',                                                                                            // 5366
            getter: 'eth_mining'                                                                                       // 5367
        }),                                                                                                            // 5368
        new Property({                                                                                                 // 5369
            name: 'hashrate',                                                                                          // 5370
            getter: 'eth_hashrate',                                                                                    // 5371
            outputFormatter: utils.toDecimal                                                                           // 5372
        }),                                                                                                            // 5373
        new Property({                                                                                                 // 5374
            name: 'syncing',                                                                                           // 5375
            getter: 'eth_syncing',                                                                                     // 5376
            outputFormatter: formatters.outputSyncingFormatter                                                         // 5377
        }),                                                                                                            // 5378
        new Property({                                                                                                 // 5379
            name: 'gasPrice',                                                                                          // 5380
            getter: 'eth_gasPrice',                                                                                    // 5381
            outputFormatter: formatters.outputBigNumberFormatter                                                       // 5382
        }),                                                                                                            // 5383
        new Property({                                                                                                 // 5384
            name: 'accounts',                                                                                          // 5385
            getter: 'eth_accounts'                                                                                     // 5386
        }),                                                                                                            // 5387
        new Property({                                                                                                 // 5388
            name: 'blockNumber',                                                                                       // 5389
            getter: 'eth_blockNumber',                                                                                 // 5390
            outputFormatter: utils.toDecimal                                                                           // 5391
        })                                                                                                             // 5392
    ];                                                                                                                 // 5393
};                                                                                                                     // 5394
                                                                                                                       // 5395
Eth.prototype.contract = function (abi) {                                                                              // 5396
    var factory = new Contract(this, abi);                                                                             // 5397
    return factory;                                                                                                    // 5398
};                                                                                                                     // 5399
                                                                                                                       // 5400
Eth.prototype.filter = function (fil, callback) {                                                                      // 5401
    return new Filter(this._requestManager, fil, watches.eth(), formatters.outputLogFormatter, callback);              // 5402
};                                                                                                                     // 5403
                                                                                                                       // 5404
Eth.prototype.namereg = function () {                                                                                  // 5405
    return this.contract(namereg.global.abi).at(namereg.global.address);                                               // 5406
};                                                                                                                     // 5407
                                                                                                                       // 5408
Eth.prototype.icapNamereg = function () {                                                                              // 5409
    return this.contract(namereg.icap.abi).at(namereg.icap.address);                                                   // 5410
};                                                                                                                     // 5411
                                                                                                                       // 5412
Eth.prototype.isSyncing = function (callback) {                                                                        // 5413
    return new IsSyncing(this._requestManager, callback);                                                              // 5414
};                                                                                                                     // 5415
                                                                                                                       // 5416
module.exports = Eth;                                                                                                  // 5417
                                                                                                                       // 5418
                                                                                                                       // 5419
},{"../../utils/config":18,"../../utils/utils":20,"../contract":25,"../filter":29,"../formatters":30,"../iban":33,"../method":36,"../namereg":43,"../property":44,"../syncing":47,"../transfer":48,"./watches":42}],39:[function(require,module,exports){
/*                                                                                                                     // 5421
    This file is part of web3.js.                                                                                      // 5422
                                                                                                                       // 5423
    web3.js is free software: you can redistribute it and/or modify                                                    // 5424
    it under the terms of the GNU Lesser General Public License as published by                                        // 5425
    the Free Software Foundation, either version 3 of the License, or                                                  // 5426
    (at your option) any later version.                                                                                // 5427
                                                                                                                       // 5428
    web3.js is distributed in the hope that it will be useful,                                                         // 5429
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5430
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5431
    GNU Lesser General Public License for more details.                                                                // 5432
                                                                                                                       // 5433
    You should have received a copy of the GNU Lesser General Public License                                           // 5434
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5435
*/                                                                                                                     // 5436
/** @file eth.js                                                                                                       // 5437
 * @authors:                                                                                                           // 5438
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5439
 * @date 2015                                                                                                          // 5440
 */                                                                                                                    // 5441
                                                                                                                       // 5442
var utils = require('../../utils/utils');                                                                              // 5443
var Property = require('../property');                                                                                 // 5444
                                                                                                                       // 5445
var Net = function (web3) {                                                                                            // 5446
    this._requestManager = web3._requestManager;                                                                       // 5447
                                                                                                                       // 5448
    var self = this;                                                                                                   // 5449
                                                                                                                       // 5450
    properties().forEach(function(p) {                                                                                 // 5451
        p.attachToObject(self);                                                                                        // 5452
        p.setRequestManager(web3._requestManager);                                                                     // 5453
    });                                                                                                                // 5454
};                                                                                                                     // 5455
                                                                                                                       // 5456
/// @returns an array of objects describing web3.eth api properties                                                    // 5457
var properties = function () {                                                                                         // 5458
    return [                                                                                                           // 5459
        new Property({                                                                                                 // 5460
            name: 'listening',                                                                                         // 5461
            getter: 'net_listening'                                                                                    // 5462
        }),                                                                                                            // 5463
        new Property({                                                                                                 // 5464
            name: 'peerCount',                                                                                         // 5465
            getter: 'net_peerCount',                                                                                   // 5466
            outputFormatter: utils.toDecimal                                                                           // 5467
        })                                                                                                             // 5468
    ];                                                                                                                 // 5469
};                                                                                                                     // 5470
                                                                                                                       // 5471
module.exports = Net;                                                                                                  // 5472
                                                                                                                       // 5473
},{"../../utils/utils":20,"../property":44}],40:[function(require,module,exports){                                     // 5474
/*                                                                                                                     // 5475
    This file is part of web3.js.                                                                                      // 5476
                                                                                                                       // 5477
    web3.js is free software: you can redistribute it and/or modify                                                    // 5478
    it under the terms of the GNU Lesser General Public License as published by                                        // 5479
    the Free Software Foundation, either version 3 of the License, or                                                  // 5480
    (at your option) any later version.                                                                                // 5481
                                                                                                                       // 5482
    web3.js is distributed in the hope that it will be useful,                                                         // 5483
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5484
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5485
    GNU Lesser General Public License for more details.                                                                // 5486
                                                                                                                       // 5487
    You should have received a copy of the GNU Lesser General Public License                                           // 5488
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5489
*/                                                                                                                     // 5490
/**                                                                                                                    // 5491
 * @file eth.js                                                                                                        // 5492
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5493
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5494
 * @date 2015                                                                                                          // 5495
 */                                                                                                                    // 5496
                                                                                                                       // 5497
"use strict";                                                                                                          // 5498
                                                                                                                       // 5499
var Method = require('../method');                                                                                     // 5500
var Property = require('../property');                                                                                 // 5501
                                                                                                                       // 5502
function Personal(web3) {                                                                                              // 5503
    this._requestManager = web3._requestManager;                                                                       // 5504
                                                                                                                       // 5505
    var self = this;                                                                                                   // 5506
                                                                                                                       // 5507
    methods().forEach(function(method) {                                                                               // 5508
        method.attachToObject(self);                                                                                   // 5509
        method.setRequestManager(self._requestManager);                                                                // 5510
    });                                                                                                                // 5511
                                                                                                                       // 5512
    properties().forEach(function(p) {                                                                                 // 5513
        p.attachToObject(self);                                                                                        // 5514
        p.setRequestManager(self._requestManager);                                                                     // 5515
    });                                                                                                                // 5516
}                                                                                                                      // 5517
                                                                                                                       // 5518
var methods = function () {                                                                                            // 5519
    var newAccount = new Method({                                                                                      // 5520
        name: 'newAccount',                                                                                            // 5521
        call: 'personal_newAccount',                                                                                   // 5522
        params: 1,                                                                                                     // 5523
        inputFormatter: [null]                                                                                         // 5524
    });                                                                                                                // 5525
                                                                                                                       // 5526
    var unlockAccount = new Method({                                                                                   // 5527
        name: 'unlockAccount',                                                                                         // 5528
        call: 'personal_unlockAccount',                                                                                // 5529
        params: 3,                                                                                                     // 5530
        inputFormatter: [null, null, null]                                                                             // 5531
    });                                                                                                                // 5532
                                                                                                                       // 5533
    return [                                                                                                           // 5534
        newAccount,                                                                                                    // 5535
        unlockAccount                                                                                                  // 5536
    ];                                                                                                                 // 5537
};                                                                                                                     // 5538
                                                                                                                       // 5539
var properties = function () {                                                                                         // 5540
    return [                                                                                                           // 5541
        new Property({                                                                                                 // 5542
            name: 'listAccounts',                                                                                      // 5543
            getter: 'personal_listAccounts'                                                                            // 5544
        })                                                                                                             // 5545
    ];                                                                                                                 // 5546
};                                                                                                                     // 5547
                                                                                                                       // 5548
                                                                                                                       // 5549
module.exports = Personal;                                                                                             // 5550
                                                                                                                       // 5551
},{"../method":36,"../property":44}],41:[function(require,module,exports){                                             // 5552
/*                                                                                                                     // 5553
    This file is part of web3.js.                                                                                      // 5554
                                                                                                                       // 5555
    web3.js is free software: you can redistribute it and/or modify                                                    // 5556
    it under the terms of the GNU Lesser General Public License as published by                                        // 5557
    the Free Software Foundation, either version 3 of the License, or                                                  // 5558
    (at your option) any later version.                                                                                // 5559
                                                                                                                       // 5560
    web3.js is distributed in the hope that it will be useful,                                                         // 5561
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5562
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5563
    GNU Lesser General Public License for more details.                                                                // 5564
                                                                                                                       // 5565
    You should have received a copy of the GNU Lesser General Public License                                           // 5566
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5567
*/                                                                                                                     // 5568
/** @file shh.js                                                                                                       // 5569
 * @authors:                                                                                                           // 5570
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5571
 * @date 2015                                                                                                          // 5572
 */                                                                                                                    // 5573
                                                                                                                       // 5574
var Method = require('../method');                                                                                     // 5575
var formatters = require('../formatters');                                                                             // 5576
var Filter = require('../filter');                                                                                     // 5577
var watches = require('./watches');                                                                                    // 5578
                                                                                                                       // 5579
var Shh = function (web3) {                                                                                            // 5580
    this._requestManager = web3._requestManager;                                                                       // 5581
                                                                                                                       // 5582
    var self = this;                                                                                                   // 5583
                                                                                                                       // 5584
    methods().forEach(function(method) {                                                                               // 5585
        method.attachToObject(self);                                                                                   // 5586
        method.setRequestManager(self._requestManager);                                                                // 5587
    });                                                                                                                // 5588
};                                                                                                                     // 5589
                                                                                                                       // 5590
Shh.prototype.filter = function (fil, callback) {                                                                      // 5591
    return new Filter(this._requestManager, fil, watches.shh(), formatters.outputPostFormatter, callback);             // 5592
};                                                                                                                     // 5593
                                                                                                                       // 5594
var methods = function () {                                                                                            // 5595
                                                                                                                       // 5596
    var post = new Method({                                                                                            // 5597
        name: 'post',                                                                                                  // 5598
        call: 'shh_post',                                                                                              // 5599
        params: 1,                                                                                                     // 5600
        inputFormatter: [formatters.inputPostFormatter]                                                                // 5601
    });                                                                                                                // 5602
                                                                                                                       // 5603
    var newIdentity = new Method({                                                                                     // 5604
        name: 'newIdentity',                                                                                           // 5605
        call: 'shh_newIdentity',                                                                                       // 5606
        params: 0                                                                                                      // 5607
    });                                                                                                                // 5608
                                                                                                                       // 5609
    var hasIdentity = new Method({                                                                                     // 5610
        name: 'hasIdentity',                                                                                           // 5611
        call: 'shh_hasIdentity',                                                                                       // 5612
        params: 1                                                                                                      // 5613
    });                                                                                                                // 5614
                                                                                                                       // 5615
    var newGroup = new Method({                                                                                        // 5616
        name: 'newGroup',                                                                                              // 5617
        call: 'shh_newGroup',                                                                                          // 5618
        params: 0                                                                                                      // 5619
    });                                                                                                                // 5620
                                                                                                                       // 5621
    var addToGroup = new Method({                                                                                      // 5622
        name: 'addToGroup',                                                                                            // 5623
        call: 'shh_addToGroup',                                                                                        // 5624
        params: 0                                                                                                      // 5625
    });                                                                                                                // 5626
                                                                                                                       // 5627
    return [                                                                                                           // 5628
        post,                                                                                                          // 5629
        newIdentity,                                                                                                   // 5630
        hasIdentity,                                                                                                   // 5631
        newGroup,                                                                                                      // 5632
        addToGroup                                                                                                     // 5633
    ];                                                                                                                 // 5634
};                                                                                                                     // 5635
                                                                                                                       // 5636
module.exports = Shh;                                                                                                  // 5637
                                                                                                                       // 5638
                                                                                                                       // 5639
},{"../filter":29,"../formatters":30,"../method":36,"./watches":42}],42:[function(require,module,exports){             // 5640
/*                                                                                                                     // 5641
    This file is part of web3.js.                                                                                      // 5642
                                                                                                                       // 5643
    web3.js is free software: you can redistribute it and/or modify                                                    // 5644
    it under the terms of the GNU Lesser General Public License as published by                                        // 5645
    the Free Software Foundation, either version 3 of the License, or                                                  // 5646
    (at your option) any later version.                                                                                // 5647
                                                                                                                       // 5648
    web3.js is distributed in the hope that it will be useful,                                                         // 5649
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5650
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5651
    GNU Lesser General Public License for more details.                                                                // 5652
                                                                                                                       // 5653
    You should have received a copy of the GNU Lesser General Public License                                           // 5654
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5655
*/                                                                                                                     // 5656
/** @file watches.js                                                                                                   // 5657
 * @authors:                                                                                                           // 5658
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5659
 * @date 2015                                                                                                          // 5660
 */                                                                                                                    // 5661
                                                                                                                       // 5662
var Method = require('../method');                                                                                     // 5663
                                                                                                                       // 5664
/// @returns an array of objects describing web3.eth.filter api methods                                                // 5665
var eth = function () {                                                                                                // 5666
    var newFilterCall = function (args) {                                                                              // 5667
        var type = args[0];                                                                                            // 5668
                                                                                                                       // 5669
        switch(type) {                                                                                                 // 5670
            case 'latest':                                                                                             // 5671
                args.shift();                                                                                          // 5672
                this.params = 0;                                                                                       // 5673
                return 'eth_newBlockFilter';                                                                           // 5674
            case 'pending':                                                                                            // 5675
                args.shift();                                                                                          // 5676
                this.params = 0;                                                                                       // 5677
                return 'eth_newPendingTransactionFilter';                                                              // 5678
            default:                                                                                                   // 5679
                return 'eth_newFilter';                                                                                // 5680
        }                                                                                                              // 5681
    };                                                                                                                 // 5682
                                                                                                                       // 5683
    var newFilter = new Method({                                                                                       // 5684
        name: 'newFilter',                                                                                             // 5685
        call: newFilterCall,                                                                                           // 5686
        params: 1                                                                                                      // 5687
    });                                                                                                                // 5688
                                                                                                                       // 5689
    var uninstallFilter = new Method({                                                                                 // 5690
        name: 'uninstallFilter',                                                                                       // 5691
        call: 'eth_uninstallFilter',                                                                                   // 5692
        params: 1                                                                                                      // 5693
    });                                                                                                                // 5694
                                                                                                                       // 5695
    var getLogs = new Method({                                                                                         // 5696
        name: 'getLogs',                                                                                               // 5697
        call: 'eth_getFilterLogs',                                                                                     // 5698
        params: 1                                                                                                      // 5699
    });                                                                                                                // 5700
                                                                                                                       // 5701
    var poll = new Method({                                                                                            // 5702
        name: 'poll',                                                                                                  // 5703
        call: 'eth_getFilterChanges',                                                                                  // 5704
        params: 1                                                                                                      // 5705
    });                                                                                                                // 5706
                                                                                                                       // 5707
    return [                                                                                                           // 5708
        newFilter,                                                                                                     // 5709
        uninstallFilter,                                                                                               // 5710
        getLogs,                                                                                                       // 5711
        poll                                                                                                           // 5712
    ];                                                                                                                 // 5713
};                                                                                                                     // 5714
                                                                                                                       // 5715
/// @returns an array of objects describing web3.shh.watch api methods                                                 // 5716
var shh = function () {                                                                                                // 5717
    var newFilter = new Method({                                                                                       // 5718
        name: 'newFilter',                                                                                             // 5719
        call: 'shh_newFilter',                                                                                         // 5720
        params: 1                                                                                                      // 5721
    });                                                                                                                // 5722
                                                                                                                       // 5723
    var uninstallFilter = new Method({                                                                                 // 5724
        name: 'uninstallFilter',                                                                                       // 5725
        call: 'shh_uninstallFilter',                                                                                   // 5726
        params: 1                                                                                                      // 5727
    });                                                                                                                // 5728
                                                                                                                       // 5729
    var getLogs = new Method({                                                                                         // 5730
        name: 'getLogs',                                                                                               // 5731
        call: 'shh_getMessages',                                                                                       // 5732
        params: 1                                                                                                      // 5733
    });                                                                                                                // 5734
                                                                                                                       // 5735
    var poll = new Method({                                                                                            // 5736
        name: 'poll',                                                                                                  // 5737
        call: 'shh_getFilterChanges',                                                                                  // 5738
        params: 1                                                                                                      // 5739
    });                                                                                                                // 5740
                                                                                                                       // 5741
    return [                                                                                                           // 5742
        newFilter,                                                                                                     // 5743
        uninstallFilter,                                                                                               // 5744
        getLogs,                                                                                                       // 5745
        poll                                                                                                           // 5746
    ];                                                                                                                 // 5747
};                                                                                                                     // 5748
                                                                                                                       // 5749
module.exports = {                                                                                                     // 5750
    eth: eth,                                                                                                          // 5751
    shh: shh                                                                                                           // 5752
};                                                                                                                     // 5753
                                                                                                                       // 5754
                                                                                                                       // 5755
},{"../method":36}],43:[function(require,module,exports){                                                              // 5756
/*                                                                                                                     // 5757
    This file is part of web3.js.                                                                                      // 5758
                                                                                                                       // 5759
    web3.js is free software: you can redistribute it and/or modify                                                    // 5760
    it under the terms of the GNU Lesser General Public License as published by                                        // 5761
    the Free Software Foundation, either version 3 of the License, or                                                  // 5762
    (at your option) any later version.                                                                                // 5763
                                                                                                                       // 5764
    web3.js is distributed in the hope that it will be useful,                                                         // 5765
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5766
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5767
    GNU Lesser General Public License for more details.                                                                // 5768
                                                                                                                       // 5769
    You should have received a copy of the GNU Lesser General Public License                                           // 5770
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5771
*/                                                                                                                     // 5772
/**                                                                                                                    // 5773
 * @file namereg.js                                                                                                    // 5774
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5775
 * @date 2015                                                                                                          // 5776
 */                                                                                                                    // 5777
                                                                                                                       // 5778
var globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');                                                 // 5779
var icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');                                                      // 5780
                                                                                                                       // 5781
var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';                                               // 5782
var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';                                                 // 5783
                                                                                                                       // 5784
module.exports = {                                                                                                     // 5785
    global: {                                                                                                          // 5786
        abi: globalRegistrarAbi,                                                                                       // 5787
        address: globalNameregAddress                                                                                  // 5788
    },                                                                                                                 // 5789
    icap: {                                                                                                            // 5790
        abi: icapRegistrarAbi,                                                                                         // 5791
        address: icapNameregAddress                                                                                    // 5792
    }                                                                                                                  // 5793
};                                                                                                                     // 5794
                                                                                                                       // 5795
                                                                                                                       // 5796
},{"../contracts/GlobalRegistrar.json":1,"../contracts/ICAPRegistrar.json":2}],44:[function(require,module,exports){   // 5797
/*                                                                                                                     // 5798
    This file is part of web3.js.                                                                                      // 5799
                                                                                                                       // 5800
    web3.js is free software: you can redistribute it and/or modify                                                    // 5801
    it under the terms of the GNU Lesser General Public License as published by                                        // 5802
    the Free Software Foundation, either version 3 of the License, or                                                  // 5803
    (at your option) any later version.                                                                                // 5804
                                                                                                                       // 5805
    web3.js is distributed in the hope that it will be useful,                                                         // 5806
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5807
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5808
    GNU Lesser General Public License for more details.                                                                // 5809
                                                                                                                       // 5810
    You should have received a copy of the GNU Lesser General Public License                                           // 5811
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5812
*/                                                                                                                     // 5813
/**                                                                                                                    // 5814
 * @file property.js                                                                                                   // 5815
 * @author Fabian Vogelsteller <fabian@frozeman.de>                                                                    // 5816
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5817
 * @date 2015                                                                                                          // 5818
 */                                                                                                                    // 5819
                                                                                                                       // 5820
var utils = require('../utils/utils');                                                                                 // 5821
                                                                                                                       // 5822
var Property = function (options) {                                                                                    // 5823
    this.name = options.name;                                                                                          // 5824
    this.getter = options.getter;                                                                                      // 5825
    this.setter = options.setter;                                                                                      // 5826
    this.outputFormatter = options.outputFormatter;                                                                    // 5827
    this.inputFormatter = options.inputFormatter;                                                                      // 5828
    this.requestManager = null;                                                                                        // 5829
};                                                                                                                     // 5830
                                                                                                                       // 5831
Property.prototype.setRequestManager = function (rm) {                                                                 // 5832
    this.requestManager = rm;                                                                                          // 5833
};                                                                                                                     // 5834
                                                                                                                       // 5835
/**                                                                                                                    // 5836
 * Should be called to format input args of method                                                                     // 5837
 *                                                                                                                     // 5838
 * @method formatInput                                                                                                 // 5839
 * @param {Array}                                                                                                      // 5840
 * @return {Array}                                                                                                     // 5841
 */                                                                                                                    // 5842
Property.prototype.formatInput = function (arg) {                                                                      // 5843
    return this.inputFormatter ? this.inputFormatter(arg) : arg;                                                       // 5844
};                                                                                                                     // 5845
                                                                                                                       // 5846
/**                                                                                                                    // 5847
 * Should be called to format output(result) of method                                                                 // 5848
 *                                                                                                                     // 5849
 * @method formatOutput                                                                                                // 5850
 * @param {Object}                                                                                                     // 5851
 * @return {Object}                                                                                                    // 5852
 */                                                                                                                    // 5853
Property.prototype.formatOutput = function (result) {                                                                  // 5854
    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;                            // 5855
};                                                                                                                     // 5856
                                                                                                                       // 5857
/**                                                                                                                    // 5858
 * Should be used to extract callback from array of arguments. Modifies input param                                    // 5859
 *                                                                                                                     // 5860
 * @method extractCallback                                                                                             // 5861
 * @param {Array} arguments                                                                                            // 5862
 * @return {Function|Null} callback, if exists                                                                         // 5863
 */                                                                                                                    // 5864
Property.prototype.extractCallback = function (args) {                                                                 // 5865
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 5866
        return args.pop(); // modify the args array!                                                                   // 5867
    }                                                                                                                  // 5868
};                                                                                                                     // 5869
                                                                                                                       // 5870
                                                                                                                       // 5871
/**                                                                                                                    // 5872
 * Should attach function to method                                                                                    // 5873
 *                                                                                                                     // 5874
 * @method attachToObject                                                                                              // 5875
 * @param {Object}                                                                                                     // 5876
 * @param {Function}                                                                                                   // 5877
 */                                                                                                                    // 5878
Property.prototype.attachToObject = function (obj) {                                                                   // 5879
    var proto = {                                                                                                      // 5880
        get: this.buildGet(),                                                                                          // 5881
        enumerable: true                                                                                               // 5882
    };                                                                                                                 // 5883
                                                                                                                       // 5884
    var names = this.name.split('.');                                                                                  // 5885
    var name = names[0];                                                                                               // 5886
    if (names.length > 1) {                                                                                            // 5887
        obj[names[0]] = obj[names[0]] || {};                                                                           // 5888
        obj = obj[names[0]];                                                                                           // 5889
        name = names[1];                                                                                               // 5890
    }                                                                                                                  // 5891
                                                                                                                       // 5892
    Object.defineProperty(obj, name, proto);                                                                           // 5893
    obj[asyncGetterName(name)] = this.buildAsyncGet();                                                                 // 5894
};                                                                                                                     // 5895
                                                                                                                       // 5896
var asyncGetterName = function (name) {                                                                                // 5897
    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);                                                       // 5898
};                                                                                                                     // 5899
                                                                                                                       // 5900
Property.prototype.buildGet = function () {                                                                            // 5901
    var property = this;                                                                                               // 5902
    return function get() {                                                                                            // 5903
        return property.formatOutput(property.requestManager.send({                                                    // 5904
            method: property.getter                                                                                    // 5905
        }));                                                                                                           // 5906
    };                                                                                                                 // 5907
};                                                                                                                     // 5908
                                                                                                                       // 5909
Property.prototype.buildAsyncGet = function () {                                                                       // 5910
    var property = this;                                                                                               // 5911
    var get = function (callback) {                                                                                    // 5912
        property.requestManager.sendAsync({                                                                            // 5913
            method: property.getter                                                                                    // 5914
        }, function (err, result) {                                                                                    // 5915
            callback(err, property.formatOutput(result));                                                              // 5916
        });                                                                                                            // 5917
    };                                                                                                                 // 5918
    get.request = this.request.bind(this);                                                                             // 5919
    return get;                                                                                                        // 5920
};                                                                                                                     // 5921
                                                                                                                       // 5922
/**                                                                                                                    // 5923
 * Should be called to create pure JSONRPC request which can be used in batch request                                  // 5924
 *                                                                                                                     // 5925
 * @method request                                                                                                     // 5926
 * @param {...} params                                                                                                 // 5927
 * @return {Object} jsonrpc request                                                                                    // 5928
 */                                                                                                                    // 5929
Property.prototype.request = function () {                                                                             // 5930
    var payload = {                                                                                                    // 5931
        method: this.getter,                                                                                           // 5932
        params: [],                                                                                                    // 5933
        callback: this.extractCallback(Array.prototype.slice.call(arguments))                                          // 5934
    };                                                                                                                 // 5935
    payload.format = this.formatOutput.bind(this);                                                                     // 5936
    return payload;                                                                                                    // 5937
};                                                                                                                     // 5938
                                                                                                                       // 5939
module.exports = Property;                                                                                             // 5940
                                                                                                                       // 5941
                                                                                                                       // 5942
},{"../utils/utils":20}],45:[function(require,module,exports){                                                         // 5943
/*                                                                                                                     // 5944
    This file is part of web3.js.                                                                                      // 5945
                                                                                                                       // 5946
    web3.js is free software: you can redistribute it and/or modify                                                    // 5947
    it under the terms of the GNU Lesser General Public License as published by                                        // 5948
    the Free Software Foundation, either version 3 of the License, or                                                  // 5949
    (at your option) any later version.                                                                                // 5950
                                                                                                                       // 5951
    web3.js is distributed in the hope that it will be useful,                                                         // 5952
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5953
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5954
    GNU Lesser General Public License for more details.                                                                // 5955
                                                                                                                       // 5956
    You should have received a copy of the GNU Lesser General Public License                                           // 5957
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5958
*/                                                                                                                     // 5959
/**                                                                                                                    // 5960
 * @file requestmanager.js                                                                                             // 5961
 * @author Jeffrey Wilcke <jeff@ethdev.com>                                                                            // 5962
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5963
 * @author Marian Oancea <marian@ethdev.com>                                                                           // 5964
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5965
 * @author Gav Wood <g@ethdev.com>                                                                                     // 5966
 * @date 2014                                                                                                          // 5967
 */                                                                                                                    // 5968
                                                                                                                       // 5969
var Jsonrpc = require('./jsonrpc');                                                                                    // 5970
var utils = require('../utils/utils');                                                                                 // 5971
var c = require('../utils/config');                                                                                    // 5972
var errors = require('./errors');                                                                                      // 5973
                                                                                                                       // 5974
/**                                                                                                                    // 5975
 * It's responsible for passing messages to providers                                                                  // 5976
 * It's also responsible for polling the ethereum node for incoming messages                                           // 5977
 * Default poll timeout is 1 second                                                                                    // 5978
 * Singleton                                                                                                           // 5979
 */                                                                                                                    // 5980
var RequestManager = function (provider) {                                                                             // 5981
    this.provider = provider;                                                                                          // 5982
    this.polls = {};                                                                                                   // 5983
    this.timeout = null;                                                                                               // 5984
};                                                                                                                     // 5985
                                                                                                                       // 5986
/**                                                                                                                    // 5987
 * Should be used to synchronously send request                                                                        // 5988
 *                                                                                                                     // 5989
 * @method send                                                                                                        // 5990
 * @param {Object} data                                                                                                // 5991
 * @return {Object}                                                                                                    // 5992
 */                                                                                                                    // 5993
RequestManager.prototype.send = function (data) {                                                                      // 5994
    if (!this.provider) {                                                                                              // 5995
        console.error(errors.InvalidProvider());                                                                       // 5996
        return null;                                                                                                   // 5997
    }                                                                                                                  // 5998
                                                                                                                       // 5999
    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                           // 6000
    var result = this.provider.send(payload);                                                                          // 6001
                                                                                                                       // 6002
    if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                              // 6003
        throw errors.InvalidResponse(result);                                                                          // 6004
    }                                                                                                                  // 6005
                                                                                                                       // 6006
    return result.result;                                                                                              // 6007
};                                                                                                                     // 6008
                                                                                                                       // 6009
/**                                                                                                                    // 6010
 * Should be used to asynchronously send request                                                                       // 6011
 *                                                                                                                     // 6012
 * @method sendAsync                                                                                                   // 6013
 * @param {Object} data                                                                                                // 6014
 * @param {Function} callback                                                                                          // 6015
 */                                                                                                                    // 6016
RequestManager.prototype.sendAsync = function (data, callback) {                                                       // 6017
    if (!this.provider) {                                                                                              // 6018
        return callback(errors.InvalidProvider());                                                                     // 6019
    }                                                                                                                  // 6020
                                                                                                                       // 6021
    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                           // 6022
    this.provider.sendAsync(payload, function (err, result) {                                                          // 6023
        if (err) {                                                                                                     // 6024
            return callback(err);                                                                                      // 6025
        }                                                                                                              // 6026
                                                                                                                       // 6027
        if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                          // 6028
            return callback(errors.InvalidResponse(result));                                                           // 6029
        }                                                                                                              // 6030
                                                                                                                       // 6031
        callback(null, result.result);                                                                                 // 6032
    });                                                                                                                // 6033
};                                                                                                                     // 6034
                                                                                                                       // 6035
/**                                                                                                                    // 6036
 * Should be called to asynchronously send batch request                                                               // 6037
 *                                                                                                                     // 6038
 * @method sendBatch                                                                                                   // 6039
 * @param {Array} batch data                                                                                           // 6040
 * @param {Function} callback                                                                                          // 6041
 */                                                                                                                    // 6042
RequestManager.prototype.sendBatch = function (data, callback) {                                                       // 6043
    if (!this.provider) {                                                                                              // 6044
        return callback(errors.InvalidProvider());                                                                     // 6045
    }                                                                                                                  // 6046
                                                                                                                       // 6047
    var payload = Jsonrpc.getInstance().toBatchPayload(data);                                                          // 6048
                                                                                                                       // 6049
    this.provider.sendAsync(payload, function (err, results) {                                                         // 6050
        if (err) {                                                                                                     // 6051
            return callback(err);                                                                                      // 6052
        }                                                                                                              // 6053
                                                                                                                       // 6054
        if (!utils.isArray(results)) {                                                                                 // 6055
            return callback(errors.InvalidResponse(results));                                                          // 6056
        }                                                                                                              // 6057
                                                                                                                       // 6058
        callback(err, results);                                                                                        // 6059
    });                                                                                                                // 6060
};                                                                                                                     // 6061
                                                                                                                       // 6062
/**                                                                                                                    // 6063
 * Should be used to set provider of request manager                                                                   // 6064
 *                                                                                                                     // 6065
 * @method setProvider                                                                                                 // 6066
 * @param {Object}                                                                                                     // 6067
 */                                                                                                                    // 6068
RequestManager.prototype.setProvider = function (p) {                                                                  // 6069
    this.provider = p;                                                                                                 // 6070
};                                                                                                                     // 6071
                                                                                                                       // 6072
/**                                                                                                                    // 6073
 * Should be used to start polling                                                                                     // 6074
 *                                                                                                                     // 6075
 * @method startPolling                                                                                                // 6076
 * @param {Object} data                                                                                                // 6077
 * @param {Number} pollId                                                                                              // 6078
 * @param {Function} callback                                                                                          // 6079
 * @param {Function} uninstall                                                                                         // 6080
 *                                                                                                                     // 6081
 * @todo cleanup number of params                                                                                      // 6082
 */                                                                                                                    // 6083
RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {                                 // 6084
    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};                           // 6085
                                                                                                                       // 6086
                                                                                                                       // 6087
    // start polling                                                                                                   // 6088
    if (!this.timeout) {                                                                                               // 6089
        this.poll();                                                                                                   // 6090
    }                                                                                                                  // 6091
};                                                                                                                     // 6092
                                                                                                                       // 6093
/**                                                                                                                    // 6094
 * Should be used to stop polling for filter with given id                                                             // 6095
 *                                                                                                                     // 6096
 * @method stopPolling                                                                                                 // 6097
 * @param {Number} pollId                                                                                              // 6098
 */                                                                                                                    // 6099
RequestManager.prototype.stopPolling = function (pollId) {                                                             // 6100
    delete this.polls[pollId];                                                                                         // 6101
                                                                                                                       // 6102
    // stop polling                                                                                                    // 6103
    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 6104
        clearTimeout(this.timeout);                                                                                    // 6105
        this.timeout = null;                                                                                           // 6106
    }                                                                                                                  // 6107
};                                                                                                                     // 6108
                                                                                                                       // 6109
/**                                                                                                                    // 6110
 * Should be called to reset the polling mechanism of the request manager                                              // 6111
 *                                                                                                                     // 6112
 * @method reset                                                                                                       // 6113
 */                                                                                                                    // 6114
RequestManager.prototype.reset = function (keepIsSyncing) {                                                            // 6115
    /*jshint maxcomplexity:5 */                                                                                        // 6116
                                                                                                                       // 6117
    for (var key in this.polls) {                                                                                      // 6118
        // remove all polls, except sync polls,                                                                        // 6119
        // they need to be removed manually by calling syncing.stopWatching()                                          // 6120
        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {                                                        // 6121
            this.polls[key].uninstall();                                                                               // 6122
            delete this.polls[key];                                                                                    // 6123
        }                                                                                                              // 6124
    }                                                                                                                  // 6125
                                                                                                                       // 6126
    // stop polling                                                                                                    // 6127
    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 6128
        clearTimeout(this.timeout);                                                                                    // 6129
        this.timeout = null;                                                                                           // 6130
    }                                                                                                                  // 6131
};                                                                                                                     // 6132
                                                                                                                       // 6133
/**                                                                                                                    // 6134
 * Should be called to poll for changes on filter with given id                                                        // 6135
 *                                                                                                                     // 6136
 * @method poll                                                                                                        // 6137
 */                                                                                                                    // 6138
RequestManager.prototype.poll = function () {                                                                          // 6139
    /*jshint maxcomplexity: 6 */                                                                                       // 6140
    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);                                            // 6141
                                                                                                                       // 6142
    if (Object.keys(this.polls).length === 0) {                                                                        // 6143
        return;                                                                                                        // 6144
    }                                                                                                                  // 6145
                                                                                                                       // 6146
    if (!this.provider) {                                                                                              // 6147
        console.error(errors.InvalidProvider());                                                                       // 6148
        return;                                                                                                        // 6149
    }                                                                                                                  // 6150
                                                                                                                       // 6151
    var pollsData = [];                                                                                                // 6152
    var pollsIds = [];                                                                                                 // 6153
    for (var key in this.polls) {                                                                                      // 6154
        pollsData.push(this.polls[key].data);                                                                          // 6155
        pollsIds.push(key);                                                                                            // 6156
    }                                                                                                                  // 6157
                                                                                                                       // 6158
    if (pollsData.length === 0) {                                                                                      // 6159
        return;                                                                                                        // 6160
    }                                                                                                                  // 6161
                                                                                                                       // 6162
    var payload = Jsonrpc.getInstance().toBatchPayload(pollsData);                                                     // 6163
                                                                                                                       // 6164
    // map the request id to they poll id                                                                              // 6165
    var pollsIdMap = {};                                                                                               // 6166
    payload.forEach(function(load, index){                                                                             // 6167
        pollsIdMap[load.id] = pollsIds[index];                                                                         // 6168
    });                                                                                                                // 6169
                                                                                                                       // 6170
                                                                                                                       // 6171
    var self = this;                                                                                                   // 6172
    this.provider.sendAsync(payload, function (error, results) {                                                       // 6173
                                                                                                                       // 6174
                                                                                                                       // 6175
        // TODO: console log?                                                                                          // 6176
        if (error) {                                                                                                   // 6177
            return;                                                                                                    // 6178
        }                                                                                                              // 6179
                                                                                                                       // 6180
        if (!utils.isArray(results)) {                                                                                 // 6181
            throw errors.InvalidResponse(results);                                                                     // 6182
        }                                                                                                              // 6183
        results.map(function (result) {                                                                                // 6184
            var id = pollsIdMap[result.id];                                                                            // 6185
                                                                                                                       // 6186
            // make sure the filter is still installed after arrival of the request                                    // 6187
            if (self.polls[id]) {                                                                                      // 6188
                result.callback = self.polls[id].callback;                                                             // 6189
                return result;                                                                                         // 6190
            } else                                                                                                     // 6191
                return false;                                                                                          // 6192
        }).filter(function (result) {                                                                                  // 6193
            return !!result;                                                                                           // 6194
        }).filter(function (result) {                                                                                  // 6195
            var valid = Jsonrpc.getInstance().isValidResponse(result);                                                 // 6196
            if (!valid) {                                                                                              // 6197
                result.callback(errors.InvalidResponse(result));                                                       // 6198
            }                                                                                                          // 6199
            return valid;                                                                                              // 6200
        }).forEach(function (result) {                                                                                 // 6201
            result.callback(null, result.result);                                                                      // 6202
        });                                                                                                            // 6203
    });                                                                                                                // 6204
};                                                                                                                     // 6205
                                                                                                                       // 6206
module.exports = RequestManager;                                                                                       // 6207
                                                                                                                       // 6208
                                                                                                                       // 6209
},{"../utils/config":18,"../utils/utils":20,"./errors":26,"./jsonrpc":35}],46:[function(require,module,exports){       // 6210
                                                                                                                       // 6211
                                                                                                                       // 6212
var Settings = function () {                                                                                           // 6213
    this.defaultBlock = 'latest';                                                                                      // 6214
    this.defaultAccount = undefined;                                                                                   // 6215
};                                                                                                                     // 6216
                                                                                                                       // 6217
module.exports = Settings;                                                                                             // 6218
                                                                                                                       // 6219
                                                                                                                       // 6220
},{}],47:[function(require,module,exports){                                                                            // 6221
/*                                                                                                                     // 6222
    This file is part of web3.js.                                                                                      // 6223
                                                                                                                       // 6224
    web3.js is free software: you can redistribute it and/or modify                                                    // 6225
    it under the terms of the GNU Lesser General Public License as published by                                        // 6226
    the Free Software Foundation, either version 3 of the License, or                                                  // 6227
    (at your option) any later version.                                                                                // 6228
                                                                                                                       // 6229
    web3.js is distributed in the hope that it will be useful,                                                         // 6230
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6231
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6232
    GNU Lesser General Public License for more details.                                                                // 6233
                                                                                                                       // 6234
    You should have received a copy of the GNU Lesser General Public License                                           // 6235
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6236
*/                                                                                                                     // 6237
/** @file syncing.js                                                                                                   // 6238
 * @authors:                                                                                                           // 6239
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 6240
 * @date 2015                                                                                                          // 6241
 */                                                                                                                    // 6242
                                                                                                                       // 6243
var formatters = require('./formatters');                                                                              // 6244
var utils = require('../utils/utils');                                                                                 // 6245
                                                                                                                       // 6246
var count = 1;                                                                                                         // 6247
                                                                                                                       // 6248
/**                                                                                                                    // 6249
Adds the callback and sets up the methods, to iterate over the results.                                                // 6250
                                                                                                                       // 6251
@method pollSyncing                                                                                                    // 6252
@param {Object} self                                                                                                   // 6253
*/                                                                                                                     // 6254
var pollSyncing = function(self) {                                                                                     // 6255
                                                                                                                       // 6256
    var onMessage = function (error, sync) {                                                                           // 6257
        if (error) {                                                                                                   // 6258
            return self.callbacks.forEach(function (callback) {                                                        // 6259
                callback(error);                                                                                       // 6260
            });                                                                                                        // 6261
        }                                                                                                              // 6262
                                                                                                                       // 6263
        if(utils.isObject(sync) && sync.startingBlock)                                                                 // 6264
            sync = formatters.outputSyncingFormatter(sync);                                                            // 6265
                                                                                                                       // 6266
        self.callbacks.forEach(function (callback) {                                                                   // 6267
            if (self.lastSyncState !== sync) {                                                                         // 6268
                                                                                                                       // 6269
                // call the callback with true first so the app can stop anything, before receiving the sync data      // 6270
                if(!self.lastSyncState && utils.isObject(sync))                                                        // 6271
                    callback(null, true);                                                                              // 6272
                                                                                                                       // 6273
                // call on the next CPU cycle, so the actions of the sync stop can be processes first                  // 6274
                setTimeout(function() {                                                                                // 6275
                    callback(null, sync);                                                                              // 6276
                }, 0);                                                                                                 // 6277
                                                                                                                       // 6278
                self.lastSyncState = sync;                                                                             // 6279
            }                                                                                                          // 6280
        });                                                                                                            // 6281
    };                                                                                                                 // 6282
                                                                                                                       // 6283
    self.requestManager.startPolling({                                                                                 // 6284
        method: 'eth_syncing',                                                                                         // 6285
        params: [],                                                                                                    // 6286
    }, self.pollId, onMessage, self.stopWatching.bind(self));                                                          // 6287
                                                                                                                       // 6288
};                                                                                                                     // 6289
                                                                                                                       // 6290
var IsSyncing = function (requestManager, callback) {                                                                  // 6291
    this.requestManager = requestManager;                                                                              // 6292
    this.pollId = 'syncPoll_'+ count++;                                                                                // 6293
    this.callbacks = [];                                                                                               // 6294
    this.addCallback(callback);                                                                                        // 6295
    this.lastSyncState = false;                                                                                        // 6296
    pollSyncing(this);                                                                                                 // 6297
                                                                                                                       // 6298
    return this;                                                                                                       // 6299
};                                                                                                                     // 6300
                                                                                                                       // 6301
IsSyncing.prototype.addCallback = function (callback) {                                                                // 6302
    if(callback)                                                                                                       // 6303
        this.callbacks.push(callback);                                                                                 // 6304
    return this;                                                                                                       // 6305
};                                                                                                                     // 6306
                                                                                                                       // 6307
IsSyncing.prototype.stopWatching = function () {                                                                       // 6308
    this.requestManager.stopPolling(this.pollId);                                                                      // 6309
    this.callbacks = [];                                                                                               // 6310
};                                                                                                                     // 6311
                                                                                                                       // 6312
module.exports = IsSyncing;                                                                                            // 6313
                                                                                                                       // 6314
                                                                                                                       // 6315
},{"../utils/utils":20,"./formatters":30}],48:[function(require,module,exports){                                       // 6316
/*                                                                                                                     // 6317
    This file is part of web3.js.                                                                                      // 6318
                                                                                                                       // 6319
    web3.js is free software: you can redistribute it and/or modify                                                    // 6320
    it under the terms of the GNU Lesser General Public License as published by                                        // 6321
    the Free Software Foundation, either version 3 of the License, or                                                  // 6322
    (at your option) any later version.                                                                                // 6323
                                                                                                                       // 6324
    web3.js is distributed in the hope that it will be useful,                                                         // 6325
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6326
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6327
    GNU Lesser General Public License for more details.                                                                // 6328
                                                                                                                       // 6329
    You should have received a copy of the GNU Lesser General Public License                                           // 6330
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6331
*/                                                                                                                     // 6332
/**                                                                                                                    // 6333
 * @file transfer.js                                                                                                   // 6334
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6335
 * @date 2015                                                                                                          // 6336
 */                                                                                                                    // 6337
                                                                                                                       // 6338
var Iban = require('./iban');                                                                                          // 6339
var exchangeAbi = require('../contracts/SmartExchange.json');                                                          // 6340
                                                                                                                       // 6341
/**                                                                                                                    // 6342
 * Should be used to make Iban transfer                                                                                // 6343
 *                                                                                                                     // 6344
 * @method transfer                                                                                                    // 6345
 * @param {String} from                                                                                                // 6346
 * @param {String} to iban                                                                                             // 6347
 * @param {Value} value to be tranfered                                                                                // 6348
 * @param {Function} callback, callback                                                                                // 6349
 */                                                                                                                    // 6350
var transfer = function (eth, from, to, value, callback) {                                                             // 6351
    var iban = new Iban(to);                                                                                           // 6352
    if (!iban.isValid()) {                                                                                             // 6353
        throw new Error('invalid iban address');                                                                       // 6354
    }                                                                                                                  // 6355
                                                                                                                       // 6356
    if (iban.isDirect()) {                                                                                             // 6357
        return transferToAddress(eth, from, iban.address(), value, callback);                                          // 6358
    }                                                                                                                  // 6359
                                                                                                                       // 6360
    if (!callback) {                                                                                                   // 6361
        var address = eth.icapNamereg().addr(iban.institution());                                                      // 6362
        return deposit(eth, from, address, value, iban.client());                                                      // 6363
    }                                                                                                                  // 6364
                                                                                                                       // 6365
    eth.icapNamereg().addr(iban.institution(), function (err, address) {                                               // 6366
        return deposit(eth, from, address, value, iban.client(), callback);                                            // 6367
    });                                                                                                                // 6368
                                                                                                                       // 6369
};                                                                                                                     // 6370
                                                                                                                       // 6371
/**                                                                                                                    // 6372
 * Should be used to transfer funds to certain address                                                                 // 6373
 *                                                                                                                     // 6374
 * @method transferToAddress                                                                                           // 6375
 * @param {String} from                                                                                                // 6376
 * @param {String} to                                                                                                  // 6377
 * @param {Value} value to be tranfered                                                                                // 6378
 * @param {Function} callback, callback                                                                                // 6379
 */                                                                                                                    // 6380
var transferToAddress = function (eth, from, to, value, callback) {                                                    // 6381
    return eth.sendTransaction({                                                                                       // 6382
        address: to,                                                                                                   // 6383
        from: from,                                                                                                    // 6384
        value: value                                                                                                   // 6385
    }, callback);                                                                                                      // 6386
};                                                                                                                     // 6387
                                                                                                                       // 6388
/**                                                                                                                    // 6389
 * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)              // 6390
 *                                                                                                                     // 6391
 * @method deposit                                                                                                     // 6392
 * @param {String} from                                                                                                // 6393
 * @param {String} to                                                                                                  // 6394
 * @param {Value} value to be transfered                                                                               // 6395
 * @param {String} client unique identifier                                                                            // 6396
 * @param {Function} callback, callback                                                                                // 6397
 */                                                                                                                    // 6398
var deposit = function (eth, from, to, value, client, callback) {                                                      // 6399
    var abi = exchangeAbi;                                                                                             // 6400
    return eth.contract(abi).at(to).deposit(client, {                                                                  // 6401
        from: from,                                                                                                    // 6402
        value: value                                                                                                   // 6403
    }, callback);                                                                                                      // 6404
};                                                                                                                     // 6405
                                                                                                                       // 6406
module.exports = transfer;                                                                                             // 6407
                                                                                                                       // 6408
                                                                                                                       // 6409
},{"../contracts/SmartExchange.json":3,"./iban":33}],49:[function(require,module,exports){                             // 6410
                                                                                                                       // 6411
},{}],50:[function(require,module,exports){                                                                            // 6412
;(function (root, factory, undef) {                                                                                    // 6413
	if (typeof exports === "object") {                                                                                    // 6414
		// CommonJS                                                                                                          // 6415
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 6417
	else if (typeof define === "function" && define.amd) {                                                                // 6418
		// AMD                                                                                                               // 6419
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 6420
	}                                                                                                                     // 6421
	else {                                                                                                                // 6422
		// Global (browser)                                                                                                  // 6423
		factory(root.CryptoJS);                                                                                              // 6424
	}                                                                                                                     // 6425
}(this, function (CryptoJS) {                                                                                          // 6426
                                                                                                                       // 6427
	(function () {                                                                                                        // 6428
	    // Shortcuts                                                                                                      // 6429
	    var C = CryptoJS;                                                                                                 // 6430
	    var C_lib = C.lib;                                                                                                // 6431
	    var BlockCipher = C_lib.BlockCipher;                                                                              // 6432
	    var C_algo = C.algo;                                                                                              // 6433
                                                                                                                       // 6434
	    // Lookup tables                                                                                                  // 6435
	    var SBOX = [];                                                                                                    // 6436
	    var INV_SBOX = [];                                                                                                // 6437
	    var SUB_MIX_0 = [];                                                                                               // 6438
	    var SUB_MIX_1 = [];                                                                                               // 6439
	    var SUB_MIX_2 = [];                                                                                               // 6440
	    var SUB_MIX_3 = [];                                                                                               // 6441
	    var INV_SUB_MIX_0 = [];                                                                                           // 6442
	    var INV_SUB_MIX_1 = [];                                                                                           // 6443
	    var INV_SUB_MIX_2 = [];                                                                                           // 6444
	    var INV_SUB_MIX_3 = [];                                                                                           // 6445
                                                                                                                       // 6446
	    // Compute lookup tables                                                                                          // 6447
	    (function () {                                                                                                    // 6448
	        // Compute double table                                                                                       // 6449
	        var d = [];                                                                                                   // 6450
	        for (var i = 0; i < 256; i++) {                                                                               // 6451
	            if (i < 128) {                                                                                            // 6452
	                d[i] = i << 1;                                                                                        // 6453
	            } else {                                                                                                  // 6454
	                d[i] = (i << 1) ^ 0x11b;                                                                              // 6455
	            }                                                                                                         // 6456
	        }                                                                                                             // 6457
                                                                                                                       // 6458
	        // Walk GF(2^8)                                                                                               // 6459
	        var x = 0;                                                                                                    // 6460
	        var xi = 0;                                                                                                   // 6461
	        for (var i = 0; i < 256; i++) {                                                                               // 6462
	            // Compute sbox                                                                                           // 6463
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);                                              // 6464
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;                                                                     // 6465
	            SBOX[x] = sx;                                                                                             // 6466
	            INV_SBOX[sx] = x;                                                                                         // 6467
                                                                                                                       // 6468
	            // Compute multiplication                                                                                 // 6469
	            var x2 = d[x];                                                                                            // 6470
	            var x4 = d[x2];                                                                                           // 6471
	            var x8 = d[x4];                                                                                           // 6472
                                                                                                                       // 6473
	            // Compute sub bytes, mix columns tables                                                                  // 6474
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);                                                               // 6475
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);                                                                     // 6476
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);                                                                    // 6477
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);                                                                    // 6478
	            SUB_MIX_3[x] = t;                                                                                         // 6479
                                                                                                                       // 6480
	            // Compute inv sub bytes, inv mix columns tables                                                          // 6481
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);                               // 6482
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);                                                                // 6483
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);                                                               // 6484
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);                                                               // 6485
	            INV_SUB_MIX_3[sx] = t;                                                                                    // 6486
                                                                                                                       // 6487
	            // Compute next counter                                                                                   // 6488
	            if (!x) {                                                                                                 // 6489
	                x = xi = 1;                                                                                           // 6490
	            } else {                                                                                                  // 6491
	                x = x2 ^ d[d[d[x8 ^ x2]]];                                                                            // 6492
	                xi ^= d[d[xi]];                                                                                       // 6493
	            }                                                                                                         // 6494
	        }                                                                                                             // 6495
	    }());                                                                                                             // 6496
                                                                                                                       // 6497
	    // Precomputed Rcon lookup                                                                                        // 6498
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];                                    // 6499
                                                                                                                       // 6500
	    /**                                                                                                               // 6501
	     * AES block cipher algorithm.                                                                                    // 6502
	     */                                                                                                               // 6503
	    var AES = C_algo.AES = BlockCipher.extend({                                                                       // 6504
	        _doReset: function () {                                                                                       // 6505
	            // Shortcuts                                                                                              // 6506
	            var key = this._key;                                                                                      // 6507
	            var keyWords = key.words;                                                                                 // 6508
	            var keySize = key.sigBytes / 4;                                                                           // 6509
                                                                                                                       // 6510
	            // Compute number of rounds                                                                               // 6511
	            var nRounds = this._nRounds = keySize + 6                                                                 // 6512
                                                                                                                       // 6513
	            // Compute number of key schedule rows                                                                    // 6514
	            var ksRows = (nRounds + 1) * 4;                                                                           // 6515
                                                                                                                       // 6516
	            // Compute key schedule                                                                                   // 6517
	            var keySchedule = this._keySchedule = [];                                                                 // 6518
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {                                                            // 6519
	                if (ksRow < keySize) {                                                                                // 6520
	                    keySchedule[ksRow] = keyWords[ksRow];                                                             // 6521
	                } else {                                                                                              // 6522
	                    var t = keySchedule[ksRow - 1];                                                                   // 6523
                                                                                                                       // 6524
	                    if (!(ksRow % keySize)) {                                                                         // 6525
	                        // Rot word                                                                                   // 6526
	                        t = (t << 8) | (t >>> 24);                                                                    // 6527
                                                                                                                       // 6528
	                        // Sub word                                                                                   // 6529
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                                                                                                                       // 6531
	                        // Mix Rcon                                                                                   // 6532
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;                                                       // 6533
	                    } else if (keySize > 6 && ksRow % keySize == 4) {                                                 // 6534
	                        // Sub word                                                                                   // 6535
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }                                                                                                 // 6537
                                                                                                                       // 6538
	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;                                            // 6539
	                }                                                                                                     // 6540
	            }                                                                                                         // 6541
                                                                                                                       // 6542
	            // Compute inv key schedule                                                                               // 6543
	            var invKeySchedule = this._invKeySchedule = [];                                                           // 6544
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {                                                   // 6545
	                var ksRow = ksRows - invKsRow;                                                                        // 6546
                                                                                                                       // 6547
	                if (invKsRow % 4) {                                                                                   // 6548
	                    var t = keySchedule[ksRow];                                                                       // 6549
	                } else {                                                                                              // 6550
	                    var t = keySchedule[ksRow - 4];                                                                   // 6551
	                }                                                                                                     // 6552
                                                                                                                       // 6553
	                if (invKsRow < 4 || ksRow <= 4) {                                                                     // 6554
	                    invKeySchedule[invKsRow] = t;                                                                     // 6555
	                } else {                                                                                              // 6556
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }                                                                                                     // 6559
	            }                                                                                                         // 6560
	        },                                                                                                            // 6561
                                                                                                                       // 6562
	        encryptBlock: function (M, offset) {                                                                          // 6563
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);       // 6564
	        },                                                                                                            // 6565
                                                                                                                       // 6566
	        decryptBlock: function (M, offset) {                                                                          // 6567
	            // Swap 2nd and 4th rows                                                                                  // 6568
	            var t = M[offset + 1];                                                                                    // 6569
	            M[offset + 1] = M[offset + 3];                                                                            // 6570
	            M[offset + 3] = t;                                                                                        // 6571
                                                                                                                       // 6572
	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                                                                                                                       // 6574
	            // Inv swap 2nd and 4th rows                                                                              // 6575
	            var t = M[offset + 1];                                                                                    // 6576
	            M[offset + 1] = M[offset + 3];                                                                            // 6577
	            M[offset + 3] = t;                                                                                        // 6578
	        },                                                                                                            // 6579
                                                                                                                       // 6580
	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {          // 6581
	            // Shortcut                                                                                               // 6582
	            var nRounds = this._nRounds;                                                                              // 6583
                                                                                                                       // 6584
	            // Get input, add round key                                                                               // 6585
	            var s0 = M[offset]     ^ keySchedule[0];                                                                  // 6586
	            var s1 = M[offset + 1] ^ keySchedule[1];                                                                  // 6587
	            var s2 = M[offset + 2] ^ keySchedule[2];                                                                  // 6588
	            var s3 = M[offset + 3] ^ keySchedule[3];                                                                  // 6589
                                                                                                                       // 6590
	            // Key schedule row counter                                                                               // 6591
	            var ksRow = 4;                                                                                            // 6592
                                                                                                                       // 6593
	            // Rounds                                                                                                 // 6594
	            for (var round = 1; round < nRounds; round++) {                                                           // 6595
	                // Shift rows, sub bytes, mix columns, add round key                                                  // 6596
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
                                                                                                                       // 6601
	                // Update state                                                                                       // 6602
	                s0 = t0;                                                                                              // 6603
	                s1 = t1;                                                                                              // 6604
	                s2 = t2;                                                                                              // 6605
	                s3 = t3;                                                                                              // 6606
	            }                                                                                                         // 6607
                                                                                                                       // 6608
	            // Shift rows, sub bytes, add round key                                                                   // 6609
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
                                                                                                                       // 6614
	            // Set output                                                                                             // 6615
	            M[offset]     = t0;                                                                                       // 6616
	            M[offset + 1] = t1;                                                                                       // 6617
	            M[offset + 2] = t2;                                                                                       // 6618
	            M[offset + 3] = t3;                                                                                       // 6619
	        },                                                                                                            // 6620
                                                                                                                       // 6621
	        keySize: 256/32                                                                                               // 6622
	    });                                                                                                               // 6623
                                                                                                                       // 6624
	    /**                                                                                                               // 6625
	     * Shortcut functions to the cipher's object interface.                                                           // 6626
	     *                                                                                                                // 6627
	     * @example                                                                                                       // 6628
	     *                                                                                                                // 6629
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);                                                  // 6630
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);                                               // 6631
	     */                                                                                                               // 6632
	    C.AES = BlockCipher._createHelper(AES);                                                                           // 6633
	}());                                                                                                                 // 6634
                                                                                                                       // 6635
                                                                                                                       // 6636
	return CryptoJS.AES;                                                                                                  // 6637
                                                                                                                       // 6638
}));                                                                                                                   // 6639
},{"./cipher-core":51,"./core":52,"./enc-base64":53,"./evpkdf":55,"./md5":60}],51:[function(require,module,exports){   // 6640
;(function (root, factory) {                                                                                           // 6641
	if (typeof exports === "object") {                                                                                    // 6642
		// CommonJS                                                                                                          // 6643
		module.exports = exports = factory(require("./core"));                                                               // 6644
	}                                                                                                                     // 6645
	else if (typeof define === "function" && define.amd) {                                                                // 6646
		// AMD                                                                                                               // 6647
		define(["./core"], factory);                                                                                         // 6648
	}                                                                                                                     // 6649
	else {                                                                                                                // 6650
		// Global (browser)                                                                                                  // 6651
		factory(root.CryptoJS);                                                                                              // 6652
	}                                                                                                                     // 6653
}(this, function (CryptoJS) {                                                                                          // 6654
                                                                                                                       // 6655
	/**                                                                                                                   // 6656
	 * Cipher core components.                                                                                            // 6657
	 */                                                                                                                   // 6658
	CryptoJS.lib.Cipher || (function (undefined) {                                                                        // 6659
	    // Shortcuts                                                                                                      // 6660
	    var C = CryptoJS;                                                                                                 // 6661
	    var C_lib = C.lib;                                                                                                // 6662
	    var Base = C_lib.Base;                                                                                            // 6663
	    var WordArray = C_lib.WordArray;                                                                                  // 6664
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;                                                        // 6665
	    var C_enc = C.enc;                                                                                                // 6666
	    var Utf8 = C_enc.Utf8;                                                                                            // 6667
	    var Base64 = C_enc.Base64;                                                                                        // 6668
	    var C_algo = C.algo;                                                                                              // 6669
	    var EvpKDF = C_algo.EvpKDF;                                                                                       // 6670
                                                                                                                       // 6671
	    /**                                                                                                               // 6672
	     * Abstract base cipher template.                                                                                 // 6673
	     *                                                                                                                // 6674
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)                                       // 6675
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)                                         // 6676
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.                                    // 6677
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.                                    // 6678
	     */                                                                                                               // 6679
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({                                                       // 6680
	        /**                                                                                                           // 6681
	         * Configuration options.                                                                                     // 6682
	         *                                                                                                            // 6683
	         * @property {WordArray} iv The IV to use for this operation.                                                 // 6684
	         */                                                                                                           // 6685
	        cfg: Base.extend(),                                                                                           // 6686
                                                                                                                       // 6687
	        /**                                                                                                           // 6688
	         * Creates this cipher in encryption mode.                                                                    // 6689
	         *                                                                                                            // 6690
	         * @param {WordArray} key The key.                                                                            // 6691
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6692
	         *                                                                                                            // 6693
	         * @return {Cipher} A cipher instance.                                                                        // 6694
	         *                                                                                                            // 6695
	         * @static                                                                                                    // 6696
	         *                                                                                                            // 6697
	         * @example                                                                                                   // 6698
	         *                                                                                                            // 6699
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });                     // 6700
	         */                                                                                                           // 6701
	        createEncryptor: function (key, cfg) {                                                                        // 6702
	            return this.create(this._ENC_XFORM_MODE, key, cfg);                                                       // 6703
	        },                                                                                                            // 6704
                                                                                                                       // 6705
	        /**                                                                                                           // 6706
	         * Creates this cipher in decryption mode.                                                                    // 6707
	         *                                                                                                            // 6708
	         * @param {WordArray} key The key.                                                                            // 6709
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6710
	         *                                                                                                            // 6711
	         * @return {Cipher} A cipher instance.                                                                        // 6712
	         *                                                                                                            // 6713
	         * @static                                                                                                    // 6714
	         *                                                                                                            // 6715
	         * @example                                                                                                   // 6716
	         *                                                                                                            // 6717
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });                     // 6718
	         */                                                                                                           // 6719
	        createDecryptor: function (key, cfg) {                                                                        // 6720
	            return this.create(this._DEC_XFORM_MODE, key, cfg);                                                       // 6721
	        },                                                                                                            // 6722
                                                                                                                       // 6723
	        /**                                                                                                           // 6724
	         * Initializes a newly created cipher.                                                                        // 6725
	         *                                                                                                            // 6726
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.                 // 6727
	         * @param {WordArray} key The key.                                                                            // 6728
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6729
	         *                                                                                                            // 6730
	         * @example                                                                                                   // 6731
	         *                                                                                                            // 6732
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */                                                                                                           // 6734
	        init: function (xformMode, key, cfg) {                                                                        // 6735
	            // Apply config defaults                                                                                  // 6736
	            this.cfg = this.cfg.extend(cfg);                                                                          // 6737
                                                                                                                       // 6738
	            // Store transform mode and key                                                                           // 6739
	            this._xformMode = xformMode;                                                                              // 6740
	            this._key = key;                                                                                          // 6741
                                                                                                                       // 6742
	            // Set initial values                                                                                     // 6743
	            this.reset();                                                                                             // 6744
	        },                                                                                                            // 6745
                                                                                                                       // 6746
	        /**                                                                                                           // 6747
	         * Resets this cipher to its initial state.                                                                   // 6748
	         *                                                                                                            // 6749
	         * @example                                                                                                   // 6750
	         *                                                                                                            // 6751
	         *     cipher.reset();                                                                                        // 6752
	         */                                                                                                           // 6753
	        reset: function () {                                                                                          // 6754
	            // Reset data buffer                                                                                      // 6755
	            BufferedBlockAlgorithm.reset.call(this);                                                                  // 6756
                                                                                                                       // 6757
	            // Perform concrete-cipher logic                                                                          // 6758
	            this._doReset();                                                                                          // 6759
	        },                                                                                                            // 6760
                                                                                                                       // 6761
	        /**                                                                                                           // 6762
	         * Adds data to be encrypted or decrypted.                                                                    // 6763
	         *                                                                                                            // 6764
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.                                       // 6765
	         *                                                                                                            // 6766
	         * @return {WordArray} The data after processing.                                                             // 6767
	         *                                                                                                            // 6768
	         * @example                                                                                                   // 6769
	         *                                                                                                            // 6770
	         *     var encrypted = cipher.process('data');                                                                // 6771
	         *     var encrypted = cipher.process(wordArray);                                                             // 6772
	         */                                                                                                           // 6773
	        process: function (dataUpdate) {                                                                              // 6774
	            // Append                                                                                                 // 6775
	            this._append(dataUpdate);                                                                                 // 6776
                                                                                                                       // 6777
	            // Process available blocks                                                                               // 6778
	            return this._process();                                                                                   // 6779
	        },                                                                                                            // 6780
                                                                                                                       // 6781
	        /**                                                                                                           // 6782
	         * Finalizes the encryption or decryption process.                                                            // 6783
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 6784
	         *                                                                                                            // 6785
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.                                 // 6786
	         *                                                                                                            // 6787
	         * @return {WordArray} The data after final processing.                                                       // 6788
	         *                                                                                                            // 6789
	         * @example                                                                                                   // 6790
	         *                                                                                                            // 6791
	         *     var encrypted = cipher.finalize();                                                                     // 6792
	         *     var encrypted = cipher.finalize('data');                                                               // 6793
	         *     var encrypted = cipher.finalize(wordArray);                                                            // 6794
	         */                                                                                                           // 6795
	        finalize: function (dataUpdate) {                                                                             // 6796
	            // Final data update                                                                                      // 6797
	            if (dataUpdate) {                                                                                         // 6798
	                this._append(dataUpdate);                                                                             // 6799
	            }                                                                                                         // 6800
                                                                                                                       // 6801
	            // Perform concrete-cipher logic                                                                          // 6802
	            var finalProcessedData = this._doFinalize();                                                              // 6803
                                                                                                                       // 6804
	            return finalProcessedData;                                                                                // 6805
	        },                                                                                                            // 6806
                                                                                                                       // 6807
	        keySize: 128/32,                                                                                              // 6808
                                                                                                                       // 6809
	        ivSize: 128/32,                                                                                               // 6810
                                                                                                                       // 6811
	        _ENC_XFORM_MODE: 1,                                                                                           // 6812
                                                                                                                       // 6813
	        _DEC_XFORM_MODE: 2,                                                                                           // 6814
                                                                                                                       // 6815
	        /**                                                                                                           // 6816
	         * Creates shortcut functions to a cipher's object interface.                                                 // 6817
	         *                                                                                                            // 6818
	         * @param {Cipher} cipher The cipher to create a helper for.                                                  // 6819
	         *                                                                                                            // 6820
	         * @return {Object} An object with encrypt and decrypt shortcut functions.                                    // 6821
	         *                                                                                                            // 6822
	         * @static                                                                                                    // 6823
	         *                                                                                                            // 6824
	         * @example                                                                                                   // 6825
	         *                                                                                                            // 6826
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);                                        // 6827
	         */                                                                                                           // 6828
	        _createHelper: (function () {                                                                                 // 6829
	            function selectCipherStrategy(key) {                                                                      // 6830
	                if (typeof key == 'string') {                                                                         // 6831
	                    return PasswordBasedCipher;                                                                       // 6832
	                } else {                                                                                              // 6833
	                    return SerializableCipher;                                                                        // 6834
	                }                                                                                                     // 6835
	            }                                                                                                         // 6836
                                                                                                                       // 6837
	            return function (cipher) {                                                                                // 6838
	                return {                                                                                              // 6839
	                    encrypt: function (message, key, cfg) {                                                           // 6840
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);                          // 6841
	                    },                                                                                                // 6842
                                                                                                                       // 6843
	                    decrypt: function (ciphertext, key, cfg) {                                                        // 6844
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);                       // 6845
	                    }                                                                                                 // 6846
	                };                                                                                                    // 6847
	            };                                                                                                        // 6848
	        }())                                                                                                          // 6849
	    });                                                                                                               // 6850
                                                                                                                       // 6851
	    /**                                                                                                               // 6852
	     * Abstract base stream cipher template.                                                                          // 6853
	     *                                                                                                                // 6854
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)          // 6855
	     */                                                                                                               // 6856
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({                                                           // 6857
	        _doFinalize: function () {                                                                                    // 6858
	            // Process partial blocks                                                                                 // 6859
	            var finalProcessedBlocks = this._process(!!'flush');                                                      // 6860
                                                                                                                       // 6861
	            return finalProcessedBlocks;                                                                              // 6862
	        },                                                                                                            // 6863
                                                                                                                       // 6864
	        blockSize: 1                                                                                                  // 6865
	    });                                                                                                               // 6866
                                                                                                                       // 6867
	    /**                                                                                                               // 6868
	     * Mode namespace.                                                                                                // 6869
	     */                                                                                                               // 6870
	    var C_mode = C.mode = {};                                                                                         // 6871
                                                                                                                       // 6872
	    /**                                                                                                               // 6873
	     * Abstract base block cipher mode template.                                                                      // 6874
	     */                                                                                                               // 6875
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({                                                       // 6876
	        /**                                                                                                           // 6877
	         * Creates this mode for encryption.                                                                          // 6878
	         *                                                                                                            // 6879
	         * @param {Cipher} cipher A block cipher instance.                                                            // 6880
	         * @param {Array} iv The IV words.                                                                            // 6881
	         *                                                                                                            // 6882
	         * @static                                                                                                    // 6883
	         *                                                                                                            // 6884
	         * @example                                                                                                   // 6885
	         *                                                                                                            // 6886
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);                                        // 6887
	         */                                                                                                           // 6888
	        createEncryptor: function (cipher, iv) {                                                                      // 6889
	            return this.Encryptor.create(cipher, iv);                                                                 // 6890
	        },                                                                                                            // 6891
                                                                                                                       // 6892
	        /**                                                                                                           // 6893
	         * Creates this mode for decryption.                                                                          // 6894
	         *                                                                                                            // 6895
	         * @param {Cipher} cipher A block cipher instance.                                                            // 6896
	         * @param {Array} iv The IV words.                                                                            // 6897
	         *                                                                                                            // 6898
	         * @static                                                                                                    // 6899
	         *                                                                                                            // 6900
	         * @example                                                                                                   // 6901
	         *                                                                                                            // 6902
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);                                        // 6903
	         */                                                                                                           // 6904
	        createDecryptor: function (cipher, iv) {                                                                      // 6905
	            return this.Decryptor.create(cipher, iv);                                                                 // 6906
	        },                                                                                                            // 6907
                                                                                                                       // 6908
	        /**                                                                                                           // 6909
	         * Initializes a newly created mode.                                                                          // 6910
	         *                                                                                                            // 6911
	         * @param {Cipher} cipher A block cipher instance.                                                            // 6912
	         * @param {Array} iv The IV words.                                                                            // 6913
	         *                                                                                                            // 6914
	         * @example                                                                                                   // 6915
	         *                                                                                                            // 6916
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);                                       // 6917
	         */                                                                                                           // 6918
	        init: function (cipher, iv) {                                                                                 // 6919
	            this._cipher = cipher;                                                                                    // 6920
	            this._iv = iv;                                                                                            // 6921
	        }                                                                                                             // 6922
	    });                                                                                                               // 6923
                                                                                                                       // 6924
	    /**                                                                                                               // 6925
	     * Cipher Block Chaining mode.                                                                                    // 6926
	     */                                                                                                               // 6927
	    var CBC = C_mode.CBC = (function () {                                                                             // 6928
	        /**                                                                                                           // 6929
	         * Abstract base CBC mode.                                                                                    // 6930
	         */                                                                                                           // 6931
	        var CBC = BlockCipherMode.extend();                                                                           // 6932
                                                                                                                       // 6933
	        /**                                                                                                           // 6934
	         * CBC encryptor.                                                                                             // 6935
	         */                                                                                                           // 6936
	        CBC.Encryptor = CBC.extend({                                                                                  // 6937
	            /**                                                                                                       // 6938
	             * Processes the data block at offset.                                                                    // 6939
	             *                                                                                                        // 6940
	             * @param {Array} words The data words to operate on.                                                     // 6941
	             * @param {number} offset The offset where the block starts.                                              // 6942
	             *                                                                                                        // 6943
	             * @example                                                                                               // 6944
	             *                                                                                                        // 6945
	             *     mode.processBlock(data.words, offset);                                                             // 6946
	             */                                                                                                       // 6947
	            processBlock: function (words, offset) {                                                                  // 6948
	                // Shortcuts                                                                                          // 6949
	                var cipher = this._cipher;                                                                            // 6950
	                var blockSize = cipher.blockSize;                                                                     // 6951
                                                                                                                       // 6952
	                // XOR and encrypt                                                                                    // 6953
	                xorBlock.call(this, words, offset, blockSize);                                                        // 6954
	                cipher.encryptBlock(words, offset);                                                                   // 6955
                                                                                                                       // 6956
	                // Remember this block to use with next block                                                         // 6957
	                this._prevBlock = words.slice(offset, offset + blockSize);                                            // 6958
	            }                                                                                                         // 6959
	        });                                                                                                           // 6960
                                                                                                                       // 6961
	        /**                                                                                                           // 6962
	         * CBC decryptor.                                                                                             // 6963
	         */                                                                                                           // 6964
	        CBC.Decryptor = CBC.extend({                                                                                  // 6965
	            /**                                                                                                       // 6966
	             * Processes the data block at offset.                                                                    // 6967
	             *                                                                                                        // 6968
	             * @param {Array} words The data words to operate on.                                                     // 6969
	             * @param {number} offset The offset where the block starts.                                              // 6970
	             *                                                                                                        // 6971
	             * @example                                                                                               // 6972
	             *                                                                                                        // 6973
	             *     mode.processBlock(data.words, offset);                                                             // 6974
	             */                                                                                                       // 6975
	            processBlock: function (words, offset) {                                                                  // 6976
	                // Shortcuts                                                                                          // 6977
	                var cipher = this._cipher;                                                                            // 6978
	                var blockSize = cipher.blockSize;                                                                     // 6979
                                                                                                                       // 6980
	                // Remember this block to use with next block                                                         // 6981
	                var thisBlock = words.slice(offset, offset + blockSize);                                              // 6982
                                                                                                                       // 6983
	                // Decrypt and XOR                                                                                    // 6984
	                cipher.decryptBlock(words, offset);                                                                   // 6985
	                xorBlock.call(this, words, offset, blockSize);                                                        // 6986
                                                                                                                       // 6987
	                // This block becomes the previous block                                                              // 6988
	                this._prevBlock = thisBlock;                                                                          // 6989
	            }                                                                                                         // 6990
	        });                                                                                                           // 6991
                                                                                                                       // 6992
	        function xorBlock(words, offset, blockSize) {                                                                 // 6993
	            // Shortcut                                                                                               // 6994
	            var iv = this._iv;                                                                                        // 6995
                                                                                                                       // 6996
	            // Choose mixing block                                                                                    // 6997
	            if (iv) {                                                                                                 // 6998
	                var block = iv;                                                                                       // 6999
                                                                                                                       // 7000
	                // Remove IV for subsequent blocks                                                                    // 7001
	                this._iv = undefined;                                                                                 // 7002
	            } else {                                                                                                  // 7003
	                var block = this._prevBlock;                                                                          // 7004
	            }                                                                                                         // 7005
                                                                                                                       // 7006
	            // XOR blocks                                                                                             // 7007
	            for (var i = 0; i < blockSize; i++) {                                                                     // 7008
	                words[offset + i] ^= block[i];                                                                        // 7009
	            }                                                                                                         // 7010
	        }                                                                                                             // 7011
                                                                                                                       // 7012
	        return CBC;                                                                                                   // 7013
	    }());                                                                                                             // 7014
                                                                                                                       // 7015
	    /**                                                                                                               // 7016
	     * Padding namespace.                                                                                             // 7017
	     */                                                                                                               // 7018
	    var C_pad = C.pad = {};                                                                                           // 7019
                                                                                                                       // 7020
	    /**                                                                                                               // 7021
	     * PKCS #5/7 padding strategy.                                                                                    // 7022
	     */                                                                                                               // 7023
	    var Pkcs7 = C_pad.Pkcs7 = {                                                                                       // 7024
	        /**                                                                                                           // 7025
	         * Pads data using the algorithm defined in PKCS #5/7.                                                        // 7026
	         *                                                                                                            // 7027
	         * @param {WordArray} data The data to pad.                                                                   // 7028
	         * @param {number} blockSize The multiple that the data should be padded to.                                  // 7029
	         *                                                                                                            // 7030
	         * @static                                                                                                    // 7031
	         *                                                                                                            // 7032
	         * @example                                                                                                   // 7033
	         *                                                                                                            // 7034
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);                                                                  // 7035
	         */                                                                                                           // 7036
	        pad: function (data, blockSize) {                                                                             // 7037
	            // Shortcut                                                                                               // 7038
	            var blockSizeBytes = blockSize * 4;                                                                       // 7039
                                                                                                                       // 7040
	            // Count padding bytes                                                                                    // 7041
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                      // 7042
                                                                                                                       // 7043
	            // Create padding word                                                                                    // 7044
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;   // 7045
                                                                                                                       // 7046
	            // Create padding                                                                                         // 7047
	            var paddingWords = [];                                                                                    // 7048
	            for (var i = 0; i < nPaddingBytes; i += 4) {                                                              // 7049
	                paddingWords.push(paddingWord);                                                                       // 7050
	            }                                                                                                         // 7051
	            var padding = WordArray.create(paddingWords, nPaddingBytes);                                              // 7052
                                                                                                                       // 7053
	            // Add padding                                                                                            // 7054
	            data.concat(padding);                                                                                     // 7055
	        },                                                                                                            // 7056
                                                                                                                       // 7057
	        /**                                                                                                           // 7058
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.                                 // 7059
	         *                                                                                                            // 7060
	         * @param {WordArray} data The data to unpad.                                                                 // 7061
	         *                                                                                                            // 7062
	         * @static                                                                                                    // 7063
	         *                                                                                                            // 7064
	         * @example                                                                                                   // 7065
	         *                                                                                                            // 7066
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);                                                                   // 7067
	         */                                                                                                           // 7068
	        unpad: function (data) {                                                                                      // 7069
	            // Get number of padding bytes from last byte                                                             // 7070
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                         // 7071
                                                                                                                       // 7072
	            // Remove padding                                                                                         // 7073
	            data.sigBytes -= nPaddingBytes;                                                                           // 7074
	        }                                                                                                             // 7075
	    };                                                                                                                // 7076
                                                                                                                       // 7077
	    /**                                                                                                               // 7078
	     * Abstract base block cipher template.                                                                           // 7079
	     *                                                                                                                // 7080
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)         // 7081
	     */                                                                                                               // 7082
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({                                                             // 7083
	        /**                                                                                                           // 7084
	         * Configuration options.                                                                                     // 7085
	         *                                                                                                            // 7086
	         * @property {Mode} mode The block mode to use. Default: CBC                                                  // 7087
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7                                    // 7088
	         */                                                                                                           // 7089
	        cfg: Cipher.cfg.extend({                                                                                      // 7090
	            mode: CBC,                                                                                                // 7091
	            padding: Pkcs7                                                                                            // 7092
	        }),                                                                                                           // 7093
                                                                                                                       // 7094
	        reset: function () {                                                                                          // 7095
	            // Reset cipher                                                                                           // 7096
	            Cipher.reset.call(this);                                                                                  // 7097
                                                                                                                       // 7098
	            // Shortcuts                                                                                              // 7099
	            var cfg = this.cfg;                                                                                       // 7100
	            var iv = cfg.iv;                                                                                          // 7101
	            var mode = cfg.mode;                                                                                      // 7102
                                                                                                                       // 7103
	            // Reset block mode                                                                                       // 7104
	            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 7105
	                var modeCreator = mode.createEncryptor;                                                               // 7106
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 7107
	                var modeCreator = mode.createDecryptor;                                                               // 7108
                                                                                                                       // 7109
	                // Keep at least one block in the buffer for unpadding                                                // 7110
	                this._minBufferSize = 1;                                                                              // 7111
	            }                                                                                                         // 7112
	            this._mode = modeCreator.call(mode, this, iv && iv.words);                                                // 7113
	        },                                                                                                            // 7114
                                                                                                                       // 7115
	        _doProcessBlock: function (words, offset) {                                                                   // 7116
	            this._mode.processBlock(words, offset);                                                                   // 7117
	        },                                                                                                            // 7118
                                                                                                                       // 7119
	        _doFinalize: function () {                                                                                    // 7120
	            // Shortcut                                                                                               // 7121
	            var padding = this.cfg.padding;                                                                           // 7122
                                                                                                                       // 7123
	            // Finalize                                                                                               // 7124
	            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 7125
	                // Pad data                                                                                           // 7126
	                padding.pad(this._data, this.blockSize);                                                              // 7127
                                                                                                                       // 7128
	                // Process final blocks                                                                               // 7129
	                var finalProcessedBlocks = this._process(!!'flush');                                                  // 7130
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 7131
	                // Process final blocks                                                                               // 7132
	                var finalProcessedBlocks = this._process(!!'flush');                                                  // 7133
                                                                                                                       // 7134
	                // Unpad data                                                                                         // 7135
	                padding.unpad(finalProcessedBlocks);                                                                  // 7136
	            }                                                                                                         // 7137
                                                                                                                       // 7138
	            return finalProcessedBlocks;                                                                              // 7139
	        },                                                                                                            // 7140
                                                                                                                       // 7141
	        blockSize: 128/32                                                                                             // 7142
	    });                                                                                                               // 7143
                                                                                                                       // 7144
	    /**                                                                                                               // 7145
	     * A collection of cipher parameters.                                                                             // 7146
	     *                                                                                                                // 7147
	     * @property {WordArray} ciphertext The raw ciphertext.                                                           // 7148
	     * @property {WordArray} key The key to this ciphertext.                                                          // 7149
	     * @property {WordArray} iv The IV used in the ciphering operation.                                               // 7150
	     * @property {WordArray} salt The salt used with a key derivation function.                                       // 7151
	     * @property {Cipher} algorithm The cipher algorithm.                                                             // 7152
	     * @property {Mode} mode The block mode used in the ciphering operation.                                          // 7153
	     * @property {Padding} padding The padding scheme used in the ciphering operation.                                // 7154
	     * @property {number} blockSize The block size of the cipher.                                                     // 7155
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */                                                                                                               // 7157
	    var CipherParams = C_lib.CipherParams = Base.extend({                                                             // 7158
	        /**                                                                                                           // 7159
	         * Initializes a newly created cipher params object.                                                          // 7160
	         *                                                                                                            // 7161
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.                         // 7162
	         *                                                                                                            // 7163
	         * @example                                                                                                   // 7164
	         *                                                                                                            // 7165
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({                                                  // 7166
	         *         ciphertext: ciphertextWordArray,                                                                   // 7167
	         *         key: keyWordArray,                                                                                 // 7168
	         *         iv: ivWordArray,                                                                                   // 7169
	         *         salt: saltWordArray,                                                                               // 7170
	         *         algorithm: CryptoJS.algo.AES,                                                                      // 7171
	         *         mode: CryptoJS.mode.CBC,                                                                           // 7172
	         *         padding: CryptoJS.pad.PKCS7,                                                                       // 7173
	         *         blockSize: 4,                                                                                      // 7174
	         *         formatter: CryptoJS.format.OpenSSL                                                                 // 7175
	         *     });                                                                                                    // 7176
	         */                                                                                                           // 7177
	        init: function (cipherParams) {                                                                               // 7178
	            this.mixIn(cipherParams);                                                                                 // 7179
	        },                                                                                                            // 7180
                                                                                                                       // 7181
	        /**                                                                                                           // 7182
	         * Converts this cipher params object to a string.                                                            // 7183
	         *                                                                                                            // 7184
	         * @param {Format} formatter (Optional) The formatting strategy to use.                                       // 7185
	         *                                                                                                            // 7186
	         * @return {string} The stringified cipher params.                                                            // 7187
	         *                                                                                                            // 7188
	         * @throws Error If neither the formatter nor the default formatter is set.                                   // 7189
	         *                                                                                                            // 7190
	         * @example                                                                                                   // 7191
	         *                                                                                                            // 7192
	         *     var string = cipherParams + '';                                                                        // 7193
	         *     var string = cipherParams.toString();                                                                  // 7194
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);                                           // 7195
	         */                                                                                                           // 7196
	        toString: function (formatter) {                                                                              // 7197
	            return (formatter || this.formatter).stringify(this);                                                     // 7198
	        }                                                                                                             // 7199
	    });                                                                                                               // 7200
                                                                                                                       // 7201
	    /**                                                                                                               // 7202
	     * Format namespace.                                                                                              // 7203
	     */                                                                                                               // 7204
	    var C_format = C.format = {};                                                                                     // 7205
                                                                                                                       // 7206
	    /**                                                                                                               // 7207
	     * OpenSSL formatting strategy.                                                                                   // 7208
	     */                                                                                                               // 7209
	    var OpenSSLFormatter = C_format.OpenSSL = {                                                                       // 7210
	        /**                                                                                                           // 7211
	         * Converts a cipher params object to an OpenSSL-compatible string.                                           // 7212
	         *                                                                                                            // 7213
	         * @param {CipherParams} cipherParams The cipher params object.                                               // 7214
	         *                                                                                                            // 7215
	         * @return {string} The OpenSSL-compatible string.                                                            // 7216
	         *                                                                                                            // 7217
	         * @static                                                                                                    // 7218
	         *                                                                                                            // 7219
	         * @example                                                                                                   // 7220
	         *                                                                                                            // 7221
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);                                   // 7222
	         */                                                                                                           // 7223
	        stringify: function (cipherParams) {                                                                          // 7224
	            // Shortcuts                                                                                              // 7225
	            var ciphertext = cipherParams.ciphertext;                                                                 // 7226
	            var salt = cipherParams.salt;                                                                             // 7227
                                                                                                                       // 7228
	            // Format                                                                                                 // 7229
	            if (salt) {                                                                                               // 7230
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);           // 7231
	            } else {                                                                                                  // 7232
	                var wordArray = ciphertext;                                                                           // 7233
	            }                                                                                                         // 7234
                                                                                                                       // 7235
	            return wordArray.toString(Base64);                                                                        // 7236
	        },                                                                                                            // 7237
                                                                                                                       // 7238
	        /**                                                                                                           // 7239
	         * Converts an OpenSSL-compatible string to a cipher params object.                                           // 7240
	         *                                                                                                            // 7241
	         * @param {string} openSSLStr The OpenSSL-compatible string.                                                  // 7242
	         *                                                                                                            // 7243
	         * @return {CipherParams} The cipher params object.                                                           // 7244
	         *                                                                                                            // 7245
	         * @static                                                                                                    // 7246
	         *                                                                                                            // 7247
	         * @example                                                                                                   // 7248
	         *                                                                                                            // 7249
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);                                       // 7250
	         */                                                                                                           // 7251
	        parse: function (openSSLStr) {                                                                                // 7252
	            // Parse base64                                                                                           // 7253
	            var ciphertext = Base64.parse(openSSLStr);                                                                // 7254
                                                                                                                       // 7255
	            // Shortcut                                                                                               // 7256
	            var ciphertextWords = ciphertext.words;                                                                   // 7257
                                                                                                                       // 7258
	            // Test for salt                                                                                          // 7259
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {                               // 7260
	                // Extract salt                                                                                       // 7261
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));                                             // 7262
                                                                                                                       // 7263
	                // Remove salt from ciphertext                                                                        // 7264
	                ciphertextWords.splice(0, 4);                                                                         // 7265
	                ciphertext.sigBytes -= 16;                                                                            // 7266
	            }                                                                                                         // 7267
                                                                                                                       // 7268
	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });                                       // 7269
	        }                                                                                                             // 7270
	    };                                                                                                                // 7271
                                                                                                                       // 7272
	    /**                                                                                                               // 7273
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.                               // 7274
	     */                                                                                                               // 7275
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({                                                 // 7276
	        /**                                                                                                           // 7277
	         * Configuration options.                                                                                     // 7278
	         *                                                                                                            // 7279
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */                                                                                                           // 7281
	        cfg: Base.extend({                                                                                            // 7282
	            format: OpenSSLFormatter                                                                                  // 7283
	        }),                                                                                                           // 7284
                                                                                                                       // 7285
	        /**                                                                                                           // 7286
	         * Encrypts a message.                                                                                        // 7287
	         *                                                                                                            // 7288
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7289
	         * @param {WordArray|string} message The message to encrypt.                                                  // 7290
	         * @param {WordArray} key The key.                                                                            // 7291
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7292
	         *                                                                                                            // 7293
	         * @return {CipherParams} A cipher params object.                                                             // 7294
	         *                                                                                                            // 7295
	         * @static                                                                                                    // 7296
	         *                                                                                                            // 7297
	         * @example                                                                                                   // 7298
	         *                                                                                                            // 7299
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);       // 7300
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7303
	        encrypt: function (cipher, message, key, cfg) {                                                               // 7304
	            // Apply config defaults                                                                                  // 7305
	            cfg = this.cfg.extend(cfg);                                                                               // 7306
                                                                                                                       // 7307
	            // Encrypt                                                                                                // 7308
	            var encryptor = cipher.createEncryptor(key, cfg);                                                         // 7309
	            var ciphertext = encryptor.finalize(message);                                                             // 7310
                                                                                                                       // 7311
	            // Shortcut                                                                                               // 7312
	            var cipherCfg = encryptor.cfg;                                                                            // 7313
                                                                                                                       // 7314
	            // Create and return serializable cipher params                                                           // 7315
	            return CipherParams.create({                                                                              // 7316
	                ciphertext: ciphertext,                                                                               // 7317
	                key: key,                                                                                             // 7318
	                iv: cipherCfg.iv,                                                                                     // 7319
	                algorithm: cipher,                                                                                    // 7320
	                mode: cipherCfg.mode,                                                                                 // 7321
	                padding: cipherCfg.padding,                                                                           // 7322
	                blockSize: cipher.blockSize,                                                                          // 7323
	                formatter: cfg.format                                                                                 // 7324
	            });                                                                                                       // 7325
	        },                                                                                                            // 7326
                                                                                                                       // 7327
	        /**                                                                                                           // 7328
	         * Decrypts serialized ciphertext.                                                                            // 7329
	         *                                                                                                            // 7330
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7331
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7332
	         * @param {WordArray} key The key.                                                                            // 7333
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7334
	         *                                                                                                            // 7335
	         * @return {WordArray} The plaintext.                                                                         // 7336
	         *                                                                                                            // 7337
	         * @static                                                                                                    // 7338
	         *                                                                                                            // 7339
	         * @example                                                                                                   // 7340
	         *                                                                                                            // 7341
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7344
	        decrypt: function (cipher, ciphertext, key, cfg) {                                                            // 7345
	            // Apply config defaults                                                                                  // 7346
	            cfg = this.cfg.extend(cfg);                                                                               // 7347
                                                                                                                       // 7348
	            // Convert string to CipherParams                                                                         // 7349
	            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7350
                                                                                                                       // 7351
	            // Decrypt                                                                                                // 7352
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);                         // 7353
                                                                                                                       // 7354
	            return plaintext;                                                                                         // 7355
	        },                                                                                                            // 7356
                                                                                                                       // 7357
	        /**                                                                                                           // 7358
	         * Converts serialized ciphertext to CipherParams,                                                            // 7359
	         * else assumed CipherParams already and returns ciphertext unchanged.                                        // 7360
	         *                                                                                                            // 7361
	         * @param {CipherParams|string} ciphertext The ciphertext.                                                    // 7362
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.                   // 7363
	         *                                                                                                            // 7364
	         * @return {CipherParams} The unserialized ciphertext.                                                        // 7365
	         *                                                                                                            // 7366
	         * @static                                                                                                    // 7367
	         *                                                                                                            // 7368
	         * @example                                                                                                   // 7369
	         *                                                                                                            // 7370
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);       // 7371
	         */                                                                                                           // 7372
	        _parse: function (ciphertext, format) {                                                                       // 7373
	            if (typeof ciphertext == 'string') {                                                                      // 7374
	                return format.parse(ciphertext, this);                                                                // 7375
	            } else {                                                                                                  // 7376
	                return ciphertext;                                                                                    // 7377
	            }                                                                                                         // 7378
	        }                                                                                                             // 7379
	    });                                                                                                               // 7380
                                                                                                                       // 7381
	    /**                                                                                                               // 7382
	     * Key derivation function namespace.                                                                             // 7383
	     */                                                                                                               // 7384
	    var C_kdf = C.kdf = {};                                                                                           // 7385
                                                                                                                       // 7386
	    /**                                                                                                               // 7387
	     * OpenSSL key derivation function.                                                                               // 7388
	     */                                                                                                               // 7389
	    var OpenSSLKdf = C_kdf.OpenSSL = {                                                                                // 7390
	        /**                                                                                                           // 7391
	         * Derives a key and IV from a password.                                                                      // 7392
	         *                                                                                                            // 7393
	         * @param {string} password The password to derive from.                                                      // 7394
	         * @param {number} keySize The size in words of the key to generate.                                          // 7395
	         * @param {number} ivSize The size in words of the IV to generate.                                            // 7396
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *                                                                                                            // 7398
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.                                  // 7399
	         *                                                                                                            // 7400
	         * @static                                                                                                    // 7401
	         *                                                                                                            // 7402
	         * @example                                                                                                   // 7403
	         *                                                                                                            // 7404
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);                          // 7405
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');              // 7406
	         */                                                                                                           // 7407
	        execute: function (password, keySize, ivSize, salt) {                                                         // 7408
	            // Generate random salt                                                                                   // 7409
	            if (!salt) {                                                                                              // 7410
	                salt = WordArray.random(64/8);                                                                        // 7411
	            }                                                                                                         // 7412
                                                                                                                       // 7413
	            // Derive key and IV                                                                                      // 7414
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);                           // 7415
                                                                                                                       // 7416
	            // Separate key and IV                                                                                    // 7417
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);                                          // 7418
	            key.sigBytes = keySize * 4;                                                                               // 7419
                                                                                                                       // 7420
	            // Return params                                                                                          // 7421
	            return CipherParams.create({ key: key, iv: iv, salt: salt });                                             // 7422
	        }                                                                                                             // 7423
	    };                                                                                                                // 7424
                                                                                                                       // 7425
	    /**                                                                                                               // 7426
	     * A serializable cipher wrapper that derives the key from a password,                                            // 7427
	     * and returns ciphertext as a serializable cipher params object.                                                 // 7428
	     */                                                                                                               // 7429
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({                                 // 7430
	        /**                                                                                                           // 7431
	         * Configuration options.                                                                                     // 7432
	         *                                                                                                            // 7433
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */                                                                                                           // 7435
	        cfg: SerializableCipher.cfg.extend({                                                                          // 7436
	            kdf: OpenSSLKdf                                                                                           // 7437
	        }),                                                                                                           // 7438
                                                                                                                       // 7439
	        /**                                                                                                           // 7440
	         * Encrypts a message using a password.                                                                       // 7441
	         *                                                                                                            // 7442
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7443
	         * @param {WordArray|string} message The message to encrypt.                                                  // 7444
	         * @param {string} password The password.                                                                     // 7445
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7446
	         *                                                                                                            // 7447
	         * @return {CipherParams} A cipher params object.                                                             // 7448
	         *                                                                                                            // 7449
	         * @static                                                                                                    // 7450
	         *                                                                                                            // 7451
	         * @example                                                                                                   // 7452
	         *                                                                                                            // 7453
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7456
	        encrypt: function (cipher, message, password, cfg) {                                                          // 7457
	            // Apply config defaults                                                                                  // 7458
	            cfg = this.cfg.extend(cfg);                                                                               // 7459
                                                                                                                       // 7460
	            // Derive key and other params                                                                            // 7461
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);                             // 7462
                                                                                                                       // 7463
	            // Add IV to config                                                                                       // 7464
	            cfg.iv = derivedParams.iv;                                                                                // 7465
                                                                                                                       // 7466
	            // Encrypt                                                                                                // 7467
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);          // 7468
                                                                                                                       // 7469
	            // Mix in derived params                                                                                  // 7470
	            ciphertext.mixIn(derivedParams);                                                                          // 7471
                                                                                                                       // 7472
	            return ciphertext;                                                                                        // 7473
	        },                                                                                                            // 7474
                                                                                                                       // 7475
	        /**                                                                                                           // 7476
	         * Decrypts serialized ciphertext using a password.                                                           // 7477
	         *                                                                                                            // 7478
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7479
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7480
	         * @param {string} password The password.                                                                     // 7481
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7482
	         *                                                                                                            // 7483
	         * @return {WordArray} The plaintext.                                                                         // 7484
	         *                                                                                                            // 7485
	         * @static                                                                                                    // 7486
	         *                                                                                                            // 7487
	         * @example                                                                                                   // 7488
	         *                                                                                                            // 7489
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7492
	        decrypt: function (cipher, ciphertext, password, cfg) {                                                       // 7493
	            // Apply config defaults                                                                                  // 7494
	            cfg = this.cfg.extend(cfg);                                                                               // 7495
                                                                                                                       // 7496
	            // Convert string to CipherParams                                                                         // 7497
	            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7498
                                                                                                                       // 7499
	            // Derive key and other params                                                                            // 7500
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);            // 7501
                                                                                                                       // 7502
	            // Add IV to config                                                                                       // 7503
	            cfg.iv = derivedParams.iv;                                                                                // 7504
                                                                                                                       // 7505
	            // Decrypt                                                                                                // 7506
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);        // 7507
                                                                                                                       // 7508
	            return plaintext;                                                                                         // 7509
	        }                                                                                                             // 7510
	    });                                                                                                               // 7511
	}());                                                                                                                 // 7512
                                                                                                                       // 7513
                                                                                                                       // 7514
}));                                                                                                                   // 7515
},{"./core":52}],52:[function(require,module,exports){                                                                 // 7516
;(function (root, factory) {                                                                                           // 7517
	if (typeof exports === "object") {                                                                                    // 7518
		// CommonJS                                                                                                          // 7519
		module.exports = exports = factory();                                                                                // 7520
	}                                                                                                                     // 7521
	else if (typeof define === "function" && define.amd) {                                                                // 7522
		// AMD                                                                                                               // 7523
		define([], factory);                                                                                                 // 7524
	}                                                                                                                     // 7525
	else {                                                                                                                // 7526
		// Global (browser)                                                                                                  // 7527
		root.CryptoJS = factory();                                                                                           // 7528
	}                                                                                                                     // 7529
}(this, function () {                                                                                                  // 7530
                                                                                                                       // 7531
	/**                                                                                                                   // 7532
	 * CryptoJS core components.                                                                                          // 7533
	 */                                                                                                                   // 7534
	var CryptoJS = CryptoJS || (function (Math, undefined) {                                                              // 7535
	    /**                                                                                                               // 7536
	     * CryptoJS namespace.                                                                                            // 7537
	     */                                                                                                               // 7538
	    var C = {};                                                                                                       // 7539
                                                                                                                       // 7540
	    /**                                                                                                               // 7541
	     * Library namespace.                                                                                             // 7542
	     */                                                                                                               // 7543
	    var C_lib = C.lib = {};                                                                                           // 7544
                                                                                                                       // 7545
	    /**                                                                                                               // 7546
	     * Base object for prototypal inheritance.                                                                        // 7547
	     */                                                                                                               // 7548
	    var Base = C_lib.Base = (function () {                                                                            // 7549
	        function F() {}                                                                                               // 7550
                                                                                                                       // 7551
	        return {                                                                                                      // 7552
	            /**                                                                                                       // 7553
	             * Creates a new object that inherits from this object.                                                   // 7554
	             *                                                                                                        // 7555
	             * @param {Object} overrides Properties to copy into the new object.                                      // 7556
	             *                                                                                                        // 7557
	             * @return {Object} The new object.                                                                       // 7558
	             *                                                                                                        // 7559
	             * @static                                                                                                // 7560
	             *                                                                                                        // 7561
	             * @example                                                                                               // 7562
	             *                                                                                                        // 7563
	             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7564
	             *         field: 'value',                                                                                // 7565
	             *                                                                                                        // 7566
	             *         method: function () {                                                                          // 7567
	             *         }                                                                                              // 7568
	             *     });                                                                                                // 7569
	             */                                                                                                       // 7570
	            extend: function (overrides) {                                                                            // 7571
	                // Spawn                                                                                              // 7572
	                F.prototype = this;                                                                                   // 7573
	                var subtype = new F();                                                                                // 7574
                                                                                                                       // 7575
	                // Augment                                                                                            // 7576
	                if (overrides) {                                                                                      // 7577
	                    subtype.mixIn(overrides);                                                                         // 7578
	                }                                                                                                     // 7579
                                                                                                                       // 7580
	                // Create default initializer                                                                         // 7581
	                if (!subtype.hasOwnProperty('init')) {                                                                // 7582
	                    subtype.init = function () {                                                                      // 7583
	                        subtype.$super.init.apply(this, arguments);                                                   // 7584
	                    };                                                                                                // 7585
	                }                                                                                                     // 7586
                                                                                                                       // 7587
	                // Initializer's prototype is the subtype object                                                      // 7588
	                subtype.init.prototype = subtype;                                                                     // 7589
                                                                                                                       // 7590
	                // Reference supertype                                                                                // 7591
	                subtype.$super = this;                                                                                // 7592
                                                                                                                       // 7593
	                return subtype;                                                                                       // 7594
	            },                                                                                                        // 7595
                                                                                                                       // 7596
	            /**                                                                                                       // 7597
	             * Extends this object and runs the init method.                                                          // 7598
	             * Arguments to create() will be passed to init().                                                        // 7599
	             *                                                                                                        // 7600
	             * @return {Object} The new object.                                                                       // 7601
	             *                                                                                                        // 7602
	             * @static                                                                                                // 7603
	             *                                                                                                        // 7604
	             * @example                                                                                               // 7605
	             *                                                                                                        // 7606
	             *     var instance = MyType.create();                                                                    // 7607
	             */                                                                                                       // 7608
	            create: function () {                                                                                     // 7609
	                var instance = this.extend();                                                                         // 7610
	                instance.init.apply(instance, arguments);                                                             // 7611
                                                                                                                       // 7612
	                return instance;                                                                                      // 7613
	            },                                                                                                        // 7614
                                                                                                                       // 7615
	            /**                                                                                                       // 7616
	             * Initializes a newly created object.                                                                    // 7617
	             * Override this method to add some logic when your objects are created.                                  // 7618
	             *                                                                                                        // 7619
	             * @example                                                                                               // 7620
	             *                                                                                                        // 7621
	             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7622
	             *         init: function () {                                                                            // 7623
	             *             // ...                                                                                     // 7624
	             *         }                                                                                              // 7625
	             *     });                                                                                                // 7626
	             */                                                                                                       // 7627
	            init: function () {                                                                                       // 7628
	            },                                                                                                        // 7629
                                                                                                                       // 7630
	            /**                                                                                                       // 7631
	             * Copies properties into this object.                                                                    // 7632
	             *                                                                                                        // 7633
	             * @param {Object} properties The properties to mix in.                                                   // 7634
	             *                                                                                                        // 7635
	             * @example                                                                                               // 7636
	             *                                                                                                        // 7637
	             *     MyType.mixIn({                                                                                     // 7638
	             *         field: 'value'                                                                                 // 7639
	             *     });                                                                                                // 7640
	             */                                                                                                       // 7641
	            mixIn: function (properties) {                                                                            // 7642
	                for (var propertyName in properties) {                                                                // 7643
	                    if (properties.hasOwnProperty(propertyName)) {                                                    // 7644
	                        this[propertyName] = properties[propertyName];                                                // 7645
	                    }                                                                                                 // 7646
	                }                                                                                                     // 7647
                                                                                                                       // 7648
	                // IE won't copy toString using the loop above                                                        // 7649
	                if (properties.hasOwnProperty('toString')) {                                                          // 7650
	                    this.toString = properties.toString;                                                              // 7651
	                }                                                                                                     // 7652
	            },                                                                                                        // 7653
                                                                                                                       // 7654
	            /**                                                                                                       // 7655
	             * Creates a copy of this object.                                                                         // 7656
	             *                                                                                                        // 7657
	             * @return {Object} The clone.                                                                            // 7658
	             *                                                                                                        // 7659
	             * @example                                                                                               // 7660
	             *                                                                                                        // 7661
	             *     var clone = instance.clone();                                                                      // 7662
	             */                                                                                                       // 7663
	            clone: function () {                                                                                      // 7664
	                return this.init.prototype.extend(this);                                                              // 7665
	            }                                                                                                         // 7666
	        };                                                                                                            // 7667
	    }());                                                                                                             // 7668
                                                                                                                       // 7669
	    /**                                                                                                               // 7670
	     * An array of 32-bit words.                                                                                      // 7671
	     *                                                                                                                // 7672
	     * @property {Array} words The array of 32-bit words.                                                             // 7673
	     * @property {number} sigBytes The number of significant bytes in this word array.                                // 7674
	     */                                                                                                               // 7675
	    var WordArray = C_lib.WordArray = Base.extend({                                                                   // 7676
	        /**                                                                                                           // 7677
	         * Initializes a newly created word array.                                                                    // 7678
	         *                                                                                                            // 7679
	         * @param {Array} words (Optional) An array of 32-bit words.                                                  // 7680
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 7681
	         *                                                                                                            // 7682
	         * @example                                                                                                   // 7683
	         *                                                                                                            // 7684
	         *     var wordArray = CryptoJS.lib.WordArray.create();                                                       // 7685
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);                               // 7686
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);                            // 7687
	         */                                                                                                           // 7688
	        init: function (words, sigBytes) {                                                                            // 7689
	            words = this.words = words || [];                                                                         // 7690
                                                                                                                       // 7691
	            if (sigBytes != undefined) {                                                                              // 7692
	                this.sigBytes = sigBytes;                                                                             // 7693
	            } else {                                                                                                  // 7694
	                this.sigBytes = words.length * 4;                                                                     // 7695
	            }                                                                                                         // 7696
	        },                                                                                                            // 7697
                                                                                                                       // 7698
	        /**                                                                                                           // 7699
	         * Converts this word array to a string.                                                                      // 7700
	         *                                                                                                            // 7701
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex                // 7702
	         *                                                                                                            // 7703
	         * @return {string} The stringified word array.                                                               // 7704
	         *                                                                                                            // 7705
	         * @example                                                                                                   // 7706
	         *                                                                                                            // 7707
	         *     var string = wordArray + '';                                                                           // 7708
	         *     var string = wordArray.toString();                                                                     // 7709
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);                                                    // 7710
	         */                                                                                                           // 7711
	        toString: function (encoder) {                                                                                // 7712
	            return (encoder || Hex).stringify(this);                                                                  // 7713
	        },                                                                                                            // 7714
                                                                                                                       // 7715
	        /**                                                                                                           // 7716
	         * Concatenates a word array to this word array.                                                              // 7717
	         *                                                                                                            // 7718
	         * @param {WordArray} wordArray The word array to append.                                                     // 7719
	         *                                                                                                            // 7720
	         * @return {WordArray} This word array.                                                                       // 7721
	         *                                                                                                            // 7722
	         * @example                                                                                                   // 7723
	         *                                                                                                            // 7724
	         *     wordArray1.concat(wordArray2);                                                                         // 7725
	         */                                                                                                           // 7726
	        concat: function (wordArray) {                                                                                // 7727
	            // Shortcuts                                                                                              // 7728
	            var thisWords = this.words;                                                                               // 7729
	            var thatWords = wordArray.words;                                                                          // 7730
	            var thisSigBytes = this.sigBytes;                                                                         // 7731
	            var thatSigBytes = wordArray.sigBytes;                                                                    // 7732
                                                                                                                       // 7733
	            // Clamp excess bits                                                                                      // 7734
	            this.clamp();                                                                                             // 7735
                                                                                                                       // 7736
	            // Concat                                                                                                 // 7737
	            if (thisSigBytes % 4) {                                                                                   // 7738
	                // Copy one byte at a time                                                                            // 7739
	                for (var i = 0; i < thatSigBytes; i++) {                                                              // 7740
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                // 7741
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);           // 7742
	                }                                                                                                     // 7743
	            } else {                                                                                                  // 7744
	                // Copy one word at a time                                                                            // 7745
	                for (var i = 0; i < thatSigBytes; i += 4) {                                                           // 7746
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];                                         // 7747
	                }                                                                                                     // 7748
	            }                                                                                                         // 7749
	            this.sigBytes += thatSigBytes;                                                                            // 7750
                                                                                                                       // 7751
	            // Chainable                                                                                              // 7752
	            return this;                                                                                              // 7753
	        },                                                                                                            // 7754
                                                                                                                       // 7755
	        /**                                                                                                           // 7756
	         * Removes insignificant bits.                                                                                // 7757
	         *                                                                                                            // 7758
	         * @example                                                                                                   // 7759
	         *                                                                                                            // 7760
	         *     wordArray.clamp();                                                                                     // 7761
	         */                                                                                                           // 7762
	        clamp: function () {                                                                                          // 7763
	            // Shortcuts                                                                                              // 7764
	            var words = this.words;                                                                                   // 7765
	            var sigBytes = this.sigBytes;                                                                             // 7766
                                                                                                                       // 7767
	            // Clamp                                                                                                  // 7768
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);                                         // 7769
	            words.length = Math.ceil(sigBytes / 4);                                                                   // 7770
	        },                                                                                                            // 7771
                                                                                                                       // 7772
	        /**                                                                                                           // 7773
	         * Creates a copy of this word array.                                                                         // 7774
	         *                                                                                                            // 7775
	         * @return {WordArray} The clone.                                                                             // 7776
	         *                                                                                                            // 7777
	         * @example                                                                                                   // 7778
	         *                                                                                                            // 7779
	         *     var clone = wordArray.clone();                                                                         // 7780
	         */                                                                                                           // 7781
	        clone: function () {                                                                                          // 7782
	            var clone = Base.clone.call(this);                                                                        // 7783
	            clone.words = this.words.slice(0);                                                                        // 7784
                                                                                                                       // 7785
	            return clone;                                                                                             // 7786
	        },                                                                                                            // 7787
                                                                                                                       // 7788
	        /**                                                                                                           // 7789
	         * Creates a word array filled with random bytes.                                                             // 7790
	         *                                                                                                            // 7791
	         * @param {number} nBytes The number of random bytes to generate.                                             // 7792
	         *                                                                                                            // 7793
	         * @return {WordArray} The random word array.                                                                 // 7794
	         *                                                                                                            // 7795
	         * @static                                                                                                    // 7796
	         *                                                                                                            // 7797
	         * @example                                                                                                   // 7798
	         *                                                                                                            // 7799
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);                                                     // 7800
	         */                                                                                                           // 7801
	        random: function (nBytes) {                                                                                   // 7802
	            var words = [];                                                                                           // 7803
                                                                                                                       // 7804
	            var r = (function (m_w) {                                                                                 // 7805
	                var m_w = m_w;                                                                                        // 7806
	                var m_z = 0x3ade68b1;                                                                                 // 7807
	                var mask = 0xffffffff;                                                                                // 7808
                                                                                                                       // 7809
	                return function () {                                                                                  // 7810
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;                                           // 7811
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;                                           // 7812
	                    var result = ((m_z << 0x10) + m_w) & mask;                                                        // 7813
	                    result /= 0x100000000;                                                                            // 7814
	                    result += 0.5;                                                                                    // 7815
	                    return result * (Math.random() > .5 ? 1 : -1);                                                    // 7816
	                }                                                                                                     // 7817
	            });                                                                                                       // 7818
                                                                                                                       // 7819
	            for (var i = 0, rcache; i < nBytes; i += 4) {                                                             // 7820
	                var _r = r((rcache || Math.random()) * 0x100000000);                                                  // 7821
                                                                                                                       // 7822
	                rcache = _r() * 0x3ade67b7;                                                                           // 7823
	                words.push((_r() * 0x100000000) | 0);                                                                 // 7824
	            }                                                                                                         // 7825
                                                                                                                       // 7826
	            return new WordArray.init(words, nBytes);                                                                 // 7827
	        }                                                                                                             // 7828
	    });                                                                                                               // 7829
                                                                                                                       // 7830
	    /**                                                                                                               // 7831
	     * Encoder namespace.                                                                                             // 7832
	     */                                                                                                               // 7833
	    var C_enc = C.enc = {};                                                                                           // 7834
                                                                                                                       // 7835
	    /**                                                                                                               // 7836
	     * Hex encoding strategy.                                                                                         // 7837
	     */                                                                                                               // 7838
	    var Hex = C_enc.Hex = {                                                                                           // 7839
	        /**                                                                                                           // 7840
	         * Converts a word array to a hex string.                                                                     // 7841
	         *                                                                                                            // 7842
	         * @param {WordArray} wordArray The word array.                                                               // 7843
	         *                                                                                                            // 7844
	         * @return {string} The hex string.                                                                           // 7845
	         *                                                                                                            // 7846
	         * @static                                                                                                    // 7847
	         *                                                                                                            // 7848
	         * @example                                                                                                   // 7849
	         *                                                                                                            // 7850
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);                                                 // 7851
	         */                                                                                                           // 7852
	        stringify: function (wordArray) {                                                                             // 7853
	            // Shortcuts                                                                                              // 7854
	            var words = wordArray.words;                                                                              // 7855
	            var sigBytes = wordArray.sigBytes;                                                                        // 7856
                                                                                                                       // 7857
	            // Convert                                                                                                // 7858
	            var hexChars = [];                                                                                        // 7859
	            for (var i = 0; i < sigBytes; i++) {                                                                      // 7860
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 7861
	                hexChars.push((bite >>> 4).toString(16));                                                             // 7862
	                hexChars.push((bite & 0x0f).toString(16));                                                            // 7863
	            }                                                                                                         // 7864
                                                                                                                       // 7865
	            return hexChars.join('');                                                                                 // 7866
	        },                                                                                                            // 7867
                                                                                                                       // 7868
	        /**                                                                                                           // 7869
	         * Converts a hex string to a word array.                                                                     // 7870
	         *                                                                                                            // 7871
	         * @param {string} hexStr The hex string.                                                                     // 7872
	         *                                                                                                            // 7873
	         * @return {WordArray} The word array.                                                                        // 7874
	         *                                                                                                            // 7875
	         * @static                                                                                                    // 7876
	         *                                                                                                            // 7877
	         * @example                                                                                                   // 7878
	         *                                                                                                            // 7879
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);                                                     // 7880
	         */                                                                                                           // 7881
	        parse: function (hexStr) {                                                                                    // 7882
	            // Shortcut                                                                                               // 7883
	            var hexStrLength = hexStr.length;                                                                         // 7884
                                                                                                                       // 7885
	            // Convert                                                                                                // 7886
	            var words = [];                                                                                           // 7887
	            for (var i = 0; i < hexStrLength; i += 2) {                                                               // 7888
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);                            // 7889
	            }                                                                                                         // 7890
                                                                                                                       // 7891
	            return new WordArray.init(words, hexStrLength / 2);                                                       // 7892
	        }                                                                                                             // 7893
	    };                                                                                                                // 7894
                                                                                                                       // 7895
	    /**                                                                                                               // 7896
	     * Latin1 encoding strategy.                                                                                      // 7897
	     */                                                                                                               // 7898
	    var Latin1 = C_enc.Latin1 = {                                                                                     // 7899
	        /**                                                                                                           // 7900
	         * Converts a word array to a Latin1 string.                                                                  // 7901
	         *                                                                                                            // 7902
	         * @param {WordArray} wordArray The word array.                                                               // 7903
	         *                                                                                                            // 7904
	         * @return {string} The Latin1 string.                                                                        // 7905
	         *                                                                                                            // 7906
	         * @static                                                                                                    // 7907
	         *                                                                                                            // 7908
	         * @example                                                                                                   // 7909
	         *                                                                                                            // 7910
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);                                           // 7911
	         */                                                                                                           // 7912
	        stringify: function (wordArray) {                                                                             // 7913
	            // Shortcuts                                                                                              // 7914
	            var words = wordArray.words;                                                                              // 7915
	            var sigBytes = wordArray.sigBytes;                                                                        // 7916
                                                                                                                       // 7917
	            // Convert                                                                                                // 7918
	            var latin1Chars = [];                                                                                     // 7919
	            for (var i = 0; i < sigBytes; i++) {                                                                      // 7920
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 7921
	                latin1Chars.push(String.fromCharCode(bite));                                                          // 7922
	            }                                                                                                         // 7923
                                                                                                                       // 7924
	            return latin1Chars.join('');                                                                              // 7925
	        },                                                                                                            // 7926
                                                                                                                       // 7927
	        /**                                                                                                           // 7928
	         * Converts a Latin1 string to a word array.                                                                  // 7929
	         *                                                                                                            // 7930
	         * @param {string} latin1Str The Latin1 string.                                                               // 7931
	         *                                                                                                            // 7932
	         * @return {WordArray} The word array.                                                                        // 7933
	         *                                                                                                            // 7934
	         * @static                                                                                                    // 7935
	         *                                                                                                            // 7936
	         * @example                                                                                                   // 7937
	         *                                                                                                            // 7938
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);                                               // 7939
	         */                                                                                                           // 7940
	        parse: function (latin1Str) {                                                                                 // 7941
	            // Shortcut                                                                                               // 7942
	            var latin1StrLength = latin1Str.length;                                                                   // 7943
                                                                                                                       // 7944
	            // Convert                                                                                                // 7945
	            var words = [];                                                                                           // 7946
	            for (var i = 0; i < latin1StrLength; i++) {                                                               // 7947
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);                             // 7948
	            }                                                                                                         // 7949
                                                                                                                       // 7950
	            return new WordArray.init(words, latin1StrLength);                                                        // 7951
	        }                                                                                                             // 7952
	    };                                                                                                                // 7953
                                                                                                                       // 7954
	    /**                                                                                                               // 7955
	     * UTF-8 encoding strategy.                                                                                       // 7956
	     */                                                                                                               // 7957
	    var Utf8 = C_enc.Utf8 = {                                                                                         // 7958
	        /**                                                                                                           // 7959
	         * Converts a word array to a UTF-8 string.                                                                   // 7960
	         *                                                                                                            // 7961
	         * @param {WordArray} wordArray The word array.                                                               // 7962
	         *                                                                                                            // 7963
	         * @return {string} The UTF-8 string.                                                                         // 7964
	         *                                                                                                            // 7965
	         * @static                                                                                                    // 7966
	         *                                                                                                            // 7967
	         * @example                                                                                                   // 7968
	         *                                                                                                            // 7969
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);                                               // 7970
	         */                                                                                                           // 7971
	        stringify: function (wordArray) {                                                                             // 7972
	            try {                                                                                                     // 7973
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));                                       // 7974
	            } catch (e) {                                                                                             // 7975
	                throw new Error('Malformed UTF-8 data');                                                              // 7976
	            }                                                                                                         // 7977
	        },                                                                                                            // 7978
                                                                                                                       // 7979
	        /**                                                                                                           // 7980
	         * Converts a UTF-8 string to a word array.                                                                   // 7981
	         *                                                                                                            // 7982
	         * @param {string} utf8Str The UTF-8 string.                                                                  // 7983
	         *                                                                                                            // 7984
	         * @return {WordArray} The word array.                                                                        // 7985
	         *                                                                                                            // 7986
	         * @static                                                                                                    // 7987
	         *                                                                                                            // 7988
	         * @example                                                                                                   // 7989
	         *                                                                                                            // 7990
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);                                                   // 7991
	         */                                                                                                           // 7992
	        parse: function (utf8Str) {                                                                                   // 7993
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));                                               // 7994
	        }                                                                                                             // 7995
	    };                                                                                                                // 7996
                                                                                                                       // 7997
	    /**                                                                                                               // 7998
	     * Abstract buffered block algorithm template.                                                                    // 7999
	     *                                                                                                                // 8000
	     * The property blockSize must be implemented in a concrete subtype.                                              // 8001
	     *                                                                                                                // 8002
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */                                                                                                               // 8004
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({                                         // 8005
	        /**                                                                                                           // 8006
	         * Resets this block algorithm's data buffer to its initial state.                                            // 8007
	         *                                                                                                            // 8008
	         * @example                                                                                                   // 8009
	         *                                                                                                            // 8010
	         *     bufferedBlockAlgorithm.reset();                                                                        // 8011
	         */                                                                                                           // 8012
	        reset: function () {                                                                                          // 8013
	            // Initial values                                                                                         // 8014
	            this._data = new WordArray.init();                                                                        // 8015
	            this._nDataBytes = 0;                                                                                     // 8016
	        },                                                                                                            // 8017
                                                                                                                       // 8018
	        /**                                                                                                           // 8019
	         * Adds new data to this block algorithm's buffer.                                                            // 8020
	         *                                                                                                            // 8021
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.       // 8022
	         *                                                                                                            // 8023
	         * @example                                                                                                   // 8024
	         *                                                                                                            // 8025
	         *     bufferedBlockAlgorithm._append('data');                                                                // 8026
	         *     bufferedBlockAlgorithm._append(wordArray);                                                             // 8027
	         */                                                                                                           // 8028
	        _append: function (data) {                                                                                    // 8029
	            // Convert string to WordArray, else assume WordArray already                                             // 8030
	            if (typeof data == 'string') {                                                                            // 8031
	                data = Utf8.parse(data);                                                                              // 8032
	            }                                                                                                         // 8033
                                                                                                                       // 8034
	            // Append                                                                                                 // 8035
	            this._data.concat(data);                                                                                  // 8036
	            this._nDataBytes += data.sigBytes;                                                                        // 8037
	        },                                                                                                            // 8038
                                                                                                                       // 8039
	        /**                                                                                                           // 8040
	         * Processes available data blocks.                                                                           // 8041
	         *                                                                                                            // 8042
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.              // 8043
	         *                                                                                                            // 8044
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.                        // 8045
	         *                                                                                                            // 8046
	         * @return {WordArray} The processed data.                                                                    // 8047
	         *                                                                                                            // 8048
	         * @example                                                                                                   // 8049
	         *                                                                                                            // 8050
	         *     var processedData = bufferedBlockAlgorithm._process();                                                 // 8051
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');                                        // 8052
	         */                                                                                                           // 8053
	        _process: function (doFlush) {                                                                                // 8054
	            // Shortcuts                                                                                              // 8055
	            var data = this._data;                                                                                    // 8056
	            var dataWords = data.words;                                                                               // 8057
	            var dataSigBytes = data.sigBytes;                                                                         // 8058
	            var blockSize = this.blockSize;                                                                           // 8059
	            var blockSizeBytes = blockSize * 4;                                                                       // 8060
                                                                                                                       // 8061
	            // Count blocks ready                                                                                     // 8062
	            var nBlocksReady = dataSigBytes / blockSizeBytes;                                                         // 8063
	            if (doFlush) {                                                                                            // 8064
	                // Round up to include partial blocks                                                                 // 8065
	                nBlocksReady = Math.ceil(nBlocksReady);                                                               // 8066
	            } else {                                                                                                  // 8067
	                // Round down to include only full blocks,                                                            // 8068
	                // less the number of blocks that must remain in the buffer                                           // 8069
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);                                 // 8070
	            }                                                                                                         // 8071
                                                                                                                       // 8072
	            // Count words ready                                                                                      // 8073
	            var nWordsReady = nBlocksReady * blockSize;                                                               // 8074
                                                                                                                       // 8075
	            // Count bytes ready                                                                                      // 8076
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);                                                // 8077
                                                                                                                       // 8078
	            // Process blocks                                                                                         // 8079
	            if (nWordsReady) {                                                                                        // 8080
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {                                     // 8081
	                    // Perform concrete-algorithm logic                                                               // 8082
	                    this._doProcessBlock(dataWords, offset);                                                          // 8083
	                }                                                                                                     // 8084
                                                                                                                       // 8085
	                // Remove processed words                                                                             // 8086
	                var processedWords = dataWords.splice(0, nWordsReady);                                                // 8087
	                data.sigBytes -= nBytesReady;                                                                         // 8088
	            }                                                                                                         // 8089
                                                                                                                       // 8090
	            // Return processed words                                                                                 // 8091
	            return new WordArray.init(processedWords, nBytesReady);                                                   // 8092
	        },                                                                                                            // 8093
                                                                                                                       // 8094
	        /**                                                                                                           // 8095
	         * Creates a copy of this object.                                                                             // 8096
	         *                                                                                                            // 8097
	         * @return {Object} The clone.                                                                                // 8098
	         *                                                                                                            // 8099
	         * @example                                                                                                   // 8100
	         *                                                                                                            // 8101
	         *     var clone = bufferedBlockAlgorithm.clone();                                                            // 8102
	         */                                                                                                           // 8103
	        clone: function () {                                                                                          // 8104
	            var clone = Base.clone.call(this);                                                                        // 8105
	            clone._data = this._data.clone();                                                                         // 8106
                                                                                                                       // 8107
	            return clone;                                                                                             // 8108
	        },                                                                                                            // 8109
                                                                                                                       // 8110
	        _minBufferSize: 0                                                                                             // 8111
	    });                                                                                                               // 8112
                                                                                                                       // 8113
	    /**                                                                                                               // 8114
	     * Abstract hasher template.                                                                                      // 8115
	     *                                                                                                                // 8116
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)        // 8117
	     */                                                                                                               // 8118
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({                                                       // 8119
	        /**                                                                                                           // 8120
	         * Configuration options.                                                                                     // 8121
	         */                                                                                                           // 8122
	        cfg: Base.extend(),                                                                                           // 8123
                                                                                                                       // 8124
	        /**                                                                                                           // 8125
	         * Initializes a newly created hasher.                                                                        // 8126
	         *                                                                                                            // 8127
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.                 // 8128
	         *                                                                                                            // 8129
	         * @example                                                                                                   // 8130
	         *                                                                                                            // 8131
	         *     var hasher = CryptoJS.algo.SHA256.create();                                                            // 8132
	         */                                                                                                           // 8133
	        init: function (cfg) {                                                                                        // 8134
	            // Apply config defaults                                                                                  // 8135
	            this.cfg = this.cfg.extend(cfg);                                                                          // 8136
                                                                                                                       // 8137
	            // Set initial values                                                                                     // 8138
	            this.reset();                                                                                             // 8139
	        },                                                                                                            // 8140
                                                                                                                       // 8141
	        /**                                                                                                           // 8142
	         * Resets this hasher to its initial state.                                                                   // 8143
	         *                                                                                                            // 8144
	         * @example                                                                                                   // 8145
	         *                                                                                                            // 8146
	         *     hasher.reset();                                                                                        // 8147
	         */                                                                                                           // 8148
	        reset: function () {                                                                                          // 8149
	            // Reset data buffer                                                                                      // 8150
	            BufferedBlockAlgorithm.reset.call(this);                                                                  // 8151
                                                                                                                       // 8152
	            // Perform concrete-hasher logic                                                                          // 8153
	            this._doReset();                                                                                          // 8154
	        },                                                                                                            // 8155
                                                                                                                       // 8156
	        /**                                                                                                           // 8157
	         * Updates this hasher with a message.                                                                        // 8158
	         *                                                                                                            // 8159
	         * @param {WordArray|string} messageUpdate The message to append.                                             // 8160
	         *                                                                                                            // 8161
	         * @return {Hasher} This hasher.                                                                              // 8162
	         *                                                                                                            // 8163
	         * @example                                                                                                   // 8164
	         *                                                                                                            // 8165
	         *     hasher.update('message');                                                                              // 8166
	         *     hasher.update(wordArray);                                                                              // 8167
	         */                                                                                                           // 8168
	        update: function (messageUpdate) {                                                                            // 8169
	            // Append                                                                                                 // 8170
	            this._append(messageUpdate);                                                                              // 8171
                                                                                                                       // 8172
	            // Update the hash                                                                                        // 8173
	            this._process();                                                                                          // 8174
                                                                                                                       // 8175
	            // Chainable                                                                                              // 8176
	            return this;                                                                                              // 8177
	        },                                                                                                            // 8178
                                                                                                                       // 8179
	        /**                                                                                                           // 8180
	         * Finalizes the hash computation.                                                                            // 8181
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 8182
	         *                                                                                                            // 8183
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 8184
	         *                                                                                                            // 8185
	         * @return {WordArray} The hash.                                                                              // 8186
	         *                                                                                                            // 8187
	         * @example                                                                                                   // 8188
	         *                                                                                                            // 8189
	         *     var hash = hasher.finalize();                                                                          // 8190
	         *     var hash = hasher.finalize('message');                                                                 // 8191
	         *     var hash = hasher.finalize(wordArray);                                                                 // 8192
	         */                                                                                                           // 8193
	        finalize: function (messageUpdate) {                                                                          // 8194
	            // Final message update                                                                                   // 8195
	            if (messageUpdate) {                                                                                      // 8196
	                this._append(messageUpdate);                                                                          // 8197
	            }                                                                                                         // 8198
                                                                                                                       // 8199
	            // Perform concrete-hasher logic                                                                          // 8200
	            var hash = this._doFinalize();                                                                            // 8201
                                                                                                                       // 8202
	            return hash;                                                                                              // 8203
	        },                                                                                                            // 8204
                                                                                                                       // 8205
	        blockSize: 512/32,                                                                                            // 8206
                                                                                                                       // 8207
	        /**                                                                                                           // 8208
	         * Creates a shortcut function to a hasher's object interface.                                                // 8209
	         *                                                                                                            // 8210
	         * @param {Hasher} hasher The hasher to create a helper for.                                                  // 8211
	         *                                                                                                            // 8212
	         * @return {Function} The shortcut function.                                                                  // 8213
	         *                                                                                                            // 8214
	         * @static                                                                                                    // 8215
	         *                                                                                                            // 8216
	         * @example                                                                                                   // 8217
	         *                                                                                                            // 8218
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);                                  // 8219
	         */                                                                                                           // 8220
	        _createHelper: function (hasher) {                                                                            // 8221
	            return function (message, cfg) {                                                                          // 8222
	                return new hasher.init(cfg).finalize(message);                                                        // 8223
	            };                                                                                                        // 8224
	        },                                                                                                            // 8225
                                                                                                                       // 8226
	        /**                                                                                                           // 8227
	         * Creates a shortcut function to the HMAC's object interface.                                                // 8228
	         *                                                                                                            // 8229
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.                                              // 8230
	         *                                                                                                            // 8231
	         * @return {Function} The shortcut function.                                                                  // 8232
	         *                                                                                                            // 8233
	         * @static                                                                                                    // 8234
	         *                                                                                                            // 8235
	         * @example                                                                                                   // 8236
	         *                                                                                                            // 8237
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);                          // 8238
	         */                                                                                                           // 8239
	        _createHmacHelper: function (hasher) {                                                                        // 8240
	            return function (message, key) {                                                                          // 8241
	                return new C_algo.HMAC.init(hasher, key).finalize(message);                                           // 8242
	            };                                                                                                        // 8243
	        }                                                                                                             // 8244
	    });                                                                                                               // 8245
                                                                                                                       // 8246
	    /**                                                                                                               // 8247
	     * Algorithm namespace.                                                                                           // 8248
	     */                                                                                                               // 8249
	    var C_algo = C.algo = {};                                                                                         // 8250
                                                                                                                       // 8251
	    return C;                                                                                                         // 8252
	}(Math));                                                                                                             // 8253
                                                                                                                       // 8254
                                                                                                                       // 8255
	return CryptoJS;                                                                                                      // 8256
                                                                                                                       // 8257
}));                                                                                                                   // 8258
},{}],53:[function(require,module,exports){                                                                            // 8259
;(function (root, factory) {                                                                                           // 8260
	if (typeof exports === "object") {                                                                                    // 8261
		// CommonJS                                                                                                          // 8262
		module.exports = exports = factory(require("./core"));                                                               // 8263
	}                                                                                                                     // 8264
	else if (typeof define === "function" && define.amd) {                                                                // 8265
		// AMD                                                                                                               // 8266
		define(["./core"], factory);                                                                                         // 8267
	}                                                                                                                     // 8268
	else {                                                                                                                // 8269
		// Global (browser)                                                                                                  // 8270
		factory(root.CryptoJS);                                                                                              // 8271
	}                                                                                                                     // 8272
}(this, function (CryptoJS) {                                                                                          // 8273
                                                                                                                       // 8274
	(function () {                                                                                                        // 8275
	    // Shortcuts                                                                                                      // 8276
	    var C = CryptoJS;                                                                                                 // 8277
	    var C_lib = C.lib;                                                                                                // 8278
	    var WordArray = C_lib.WordArray;                                                                                  // 8279
	    var C_enc = C.enc;                                                                                                // 8280
                                                                                                                       // 8281
	    /**                                                                                                               // 8282
	     * Base64 encoding strategy.                                                                                      // 8283
	     */                                                                                                               // 8284
	    var Base64 = C_enc.Base64 = {                                                                                     // 8285
	        /**                                                                                                           // 8286
	         * Converts a word array to a Base64 string.                                                                  // 8287
	         *                                                                                                            // 8288
	         * @param {WordArray} wordArray The word array.                                                               // 8289
	         *                                                                                                            // 8290
	         * @return {string} The Base64 string.                                                                        // 8291
	         *                                                                                                            // 8292
	         * @static                                                                                                    // 8293
	         *                                                                                                            // 8294
	         * @example                                                                                                   // 8295
	         *                                                                                                            // 8296
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);                                           // 8297
	         */                                                                                                           // 8298
	        stringify: function (wordArray) {                                                                             // 8299
	            // Shortcuts                                                                                              // 8300
	            var words = wordArray.words;                                                                              // 8301
	            var sigBytes = wordArray.sigBytes;                                                                        // 8302
	            var map = this._map;                                                                                      // 8303
                                                                                                                       // 8304
	            // Clamp excess bits                                                                                      // 8305
	            wordArray.clamp();                                                                                        // 8306
                                                                                                                       // 8307
	            // Convert                                                                                                // 8308
	            var base64Chars = [];                                                                                     // 8309
	            for (var i = 0; i < sigBytes; i += 3) {                                                                   // 8310
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;                               // 8311
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;                               // 8312
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;                               // 8313
                                                                                                                       // 8314
	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;                                                   // 8315
                                                                                                                       // 8316
	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {                                          // 8317
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));                                 // 8318
	                }                                                                                                     // 8319
	            }                                                                                                         // 8320
                                                                                                                       // 8321
	            // Add padding                                                                                            // 8322
	            var paddingChar = map.charAt(64);                                                                         // 8323
	            if (paddingChar) {                                                                                        // 8324
	                while (base64Chars.length % 4) {                                                                      // 8325
	                    base64Chars.push(paddingChar);                                                                    // 8326
	                }                                                                                                     // 8327
	            }                                                                                                         // 8328
                                                                                                                       // 8329
	            return base64Chars.join('');                                                                              // 8330
	        },                                                                                                            // 8331
                                                                                                                       // 8332
	        /**                                                                                                           // 8333
	         * Converts a Base64 string to a word array.                                                                  // 8334
	         *                                                                                                            // 8335
	         * @param {string} base64Str The Base64 string.                                                               // 8336
	         *                                                                                                            // 8337
	         * @return {WordArray} The word array.                                                                        // 8338
	         *                                                                                                            // 8339
	         * @static                                                                                                    // 8340
	         *                                                                                                            // 8341
	         * @example                                                                                                   // 8342
	         *                                                                                                            // 8343
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);                                               // 8344
	         */                                                                                                           // 8345
	        parse: function (base64Str) {                                                                                 // 8346
	            // Shortcuts                                                                                              // 8347
	            var base64StrLength = base64Str.length;                                                                   // 8348
	            var map = this._map;                                                                                      // 8349
                                                                                                                       // 8350
	            // Ignore padding                                                                                         // 8351
	            var paddingChar = map.charAt(64);                                                                         // 8352
	            if (paddingChar) {                                                                                        // 8353
	                var paddingIndex = base64Str.indexOf(paddingChar);                                                    // 8354
	                if (paddingIndex != -1) {                                                                             // 8355
	                    base64StrLength = paddingIndex;                                                                   // 8356
	                }                                                                                                     // 8357
	            }                                                                                                         // 8358
                                                                                                                       // 8359
	            // Convert                                                                                                // 8360
	            var words = [];                                                                                           // 8361
	            var nBytes = 0;                                                                                           // 8362
	            for (var i = 0; i < base64StrLength; i++) {                                                               // 8363
	                if (i % 4) {                                                                                          // 8364
	                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);                                // 8365
	                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);                               // 8366
	                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);                                // 8367
	                    nBytes++;                                                                                         // 8368
	                }                                                                                                     // 8369
	            }                                                                                                         // 8370
                                                                                                                       // 8371
	            return WordArray.create(words, nBytes);                                                                   // 8372
	        },                                                                                                            // 8373
                                                                                                                       // 8374
	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='                                     // 8375
	    };                                                                                                                // 8376
	}());                                                                                                                 // 8377
                                                                                                                       // 8378
                                                                                                                       // 8379
	return CryptoJS.enc.Base64;                                                                                           // 8380
                                                                                                                       // 8381
}));                                                                                                                   // 8382
},{"./core":52}],54:[function(require,module,exports){                                                                 // 8383
;(function (root, factory) {                                                                                           // 8384
	if (typeof exports === "object") {                                                                                    // 8385
		// CommonJS                                                                                                          // 8386
		module.exports = exports = factory(require("./core"));                                                               // 8387
	}                                                                                                                     // 8388
	else if (typeof define === "function" && define.amd) {                                                                // 8389
		// AMD                                                                                                               // 8390
		define(["./core"], factory);                                                                                         // 8391
	}                                                                                                                     // 8392
	else {                                                                                                                // 8393
		// Global (browser)                                                                                                  // 8394
		factory(root.CryptoJS);                                                                                              // 8395
	}                                                                                                                     // 8396
}(this, function (CryptoJS) {                                                                                          // 8397
                                                                                                                       // 8398
	(function () {                                                                                                        // 8399
	    // Shortcuts                                                                                                      // 8400
	    var C = CryptoJS;                                                                                                 // 8401
	    var C_lib = C.lib;                                                                                                // 8402
	    var WordArray = C_lib.WordArray;                                                                                  // 8403
	    var C_enc = C.enc;                                                                                                // 8404
                                                                                                                       // 8405
	    /**                                                                                                               // 8406
	     * UTF-16 BE encoding strategy.                                                                                   // 8407
	     */                                                                                                               // 8408
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {                                                                     // 8409
	        /**                                                                                                           // 8410
	         * Converts a word array to a UTF-16 BE string.                                                               // 8411
	         *                                                                                                            // 8412
	         * @param {WordArray} wordArray The word array.                                                               // 8413
	         *                                                                                                            // 8414
	         * @return {string} The UTF-16 BE string.                                                                     // 8415
	         *                                                                                                            // 8416
	         * @static                                                                                                    // 8417
	         *                                                                                                            // 8418
	         * @example                                                                                                   // 8419
	         *                                                                                                            // 8420
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);                                             // 8421
	         */                                                                                                           // 8422
	        stringify: function (wordArray) {                                                                             // 8423
	            // Shortcuts                                                                                              // 8424
	            var words = wordArray.words;                                                                              // 8425
	            var sigBytes = wordArray.sigBytes;                                                                        // 8426
                                                                                                                       // 8427
	            // Convert                                                                                                // 8428
	            var utf16Chars = [];                                                                                      // 8429
	            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8430
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;                                     // 8431
	                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8432
	            }                                                                                                         // 8433
                                                                                                                       // 8434
	            return utf16Chars.join('');                                                                               // 8435
	        },                                                                                                            // 8436
                                                                                                                       // 8437
	        /**                                                                                                           // 8438
	         * Converts a UTF-16 BE string to a word array.                                                               // 8439
	         *                                                                                                            // 8440
	         * @param {string} utf16Str The UTF-16 BE string.                                                             // 8441
	         *                                                                                                            // 8442
	         * @return {WordArray} The word array.                                                                        // 8443
	         *                                                                                                            // 8444
	         * @static                                                                                                    // 8445
	         *                                                                                                            // 8446
	         * @example                                                                                                   // 8447
	         *                                                                                                            // 8448
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);                                                 // 8449
	         */                                                                                                           // 8450
	        parse: function (utf16Str) {                                                                                  // 8451
	            // Shortcut                                                                                               // 8452
	            var utf16StrLength = utf16Str.length;                                                                     // 8453
                                                                                                                       // 8454
	            // Convert                                                                                                // 8455
	            var words = [];                                                                                           // 8456
	            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8457
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);                                      // 8458
	            }                                                                                                         // 8459
                                                                                                                       // 8460
	            return WordArray.create(words, utf16StrLength * 2);                                                       // 8461
	        }                                                                                                             // 8462
	    };                                                                                                                // 8463
                                                                                                                       // 8464
	    /**                                                                                                               // 8465
	     * UTF-16 LE encoding strategy.                                                                                   // 8466
	     */                                                                                                               // 8467
	    C_enc.Utf16LE = {                                                                                                 // 8468
	        /**                                                                                                           // 8469
	         * Converts a word array to a UTF-16 LE string.                                                               // 8470
	         *                                                                                                            // 8471
	         * @param {WordArray} wordArray The word array.                                                               // 8472
	         *                                                                                                            // 8473
	         * @return {string} The UTF-16 LE string.                                                                     // 8474
	         *                                                                                                            // 8475
	         * @static                                                                                                    // 8476
	         *                                                                                                            // 8477
	         * @example                                                                                                   // 8478
	         *                                                                                                            // 8479
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);                                              // 8480
	         */                                                                                                           // 8481
	        stringify: function (wordArray) {                                                                             // 8482
	            // Shortcuts                                                                                              // 8483
	            var words = wordArray.words;                                                                              // 8484
	            var sigBytes = wordArray.sigBytes;                                                                        // 8485
                                                                                                                       // 8486
	            // Convert                                                                                                // 8487
	            var utf16Chars = [];                                                                                      // 8488
	            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8489
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);                         // 8490
	                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8491
	            }                                                                                                         // 8492
                                                                                                                       // 8493
	            return utf16Chars.join('');                                                                               // 8494
	        },                                                                                                            // 8495
                                                                                                                       // 8496
	        /**                                                                                                           // 8497
	         * Converts a UTF-16 LE string to a word array.                                                               // 8498
	         *                                                                                                            // 8499
	         * @param {string} utf16Str The UTF-16 LE string.                                                             // 8500
	         *                                                                                                            // 8501
	         * @return {WordArray} The word array.                                                                        // 8502
	         *                                                                                                            // 8503
	         * @static                                                                                                    // 8504
	         *                                                                                                            // 8505
	         * @example                                                                                                   // 8506
	         *                                                                                                            // 8507
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);                                                  // 8508
	         */                                                                                                           // 8509
	        parse: function (utf16Str) {                                                                                  // 8510
	            // Shortcut                                                                                               // 8511
	            var utf16StrLength = utf16Str.length;                                                                     // 8512
                                                                                                                       // 8513
	            // Convert                                                                                                // 8514
	            var words = [];                                                                                           // 8515
	            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8516
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));                          // 8517
	            }                                                                                                         // 8518
                                                                                                                       // 8519
	            return WordArray.create(words, utf16StrLength * 2);                                                       // 8520
	        }                                                                                                             // 8521
	    };                                                                                                                // 8522
                                                                                                                       // 8523
	    function swapEndian(word) {                                                                                       // 8524
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);                                              // 8525
	    }                                                                                                                 // 8526
	}());                                                                                                                 // 8527
                                                                                                                       // 8528
                                                                                                                       // 8529
	return CryptoJS.enc.Utf16;                                                                                            // 8530
                                                                                                                       // 8531
}));                                                                                                                   // 8532
},{"./core":52}],55:[function(require,module,exports){                                                                 // 8533
;(function (root, factory, undef) {                                                                                    // 8534
	if (typeof exports === "object") {                                                                                    // 8535
		// CommonJS                                                                                                          // 8536
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));                         // 8537
	}                                                                                                                     // 8538
	else if (typeof define === "function" && define.amd) {                                                                // 8539
		// AMD                                                                                                               // 8540
		define(["./core", "./sha1", "./hmac"], factory);                                                                     // 8541
	}                                                                                                                     // 8542
	else {                                                                                                                // 8543
		// Global (browser)                                                                                                  // 8544
		factory(root.CryptoJS);                                                                                              // 8545
	}                                                                                                                     // 8546
}(this, function (CryptoJS) {                                                                                          // 8547
                                                                                                                       // 8548
	(function () {                                                                                                        // 8549
	    // Shortcuts                                                                                                      // 8550
	    var C = CryptoJS;                                                                                                 // 8551
	    var C_lib = C.lib;                                                                                                // 8552
	    var Base = C_lib.Base;                                                                                            // 8553
	    var WordArray = C_lib.WordArray;                                                                                  // 8554
	    var C_algo = C.algo;                                                                                              // 8555
	    var MD5 = C_algo.MD5;                                                                                             // 8556
                                                                                                                       // 8557
	    /**                                                                                                               // 8558
	     * This key derivation function is meant to conform with EVP_BytesToKey.                                          // 8559
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html                                                                // 8560
	     */                                                                                                               // 8561
	    var EvpKDF = C_algo.EvpKDF = Base.extend({                                                                        // 8562
	        /**                                                                                                           // 8563
	         * Configuration options.                                                                                     // 8564
	         *                                                                                                            // 8565
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 8566
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5                                          // 8567
	         * @property {number} iterations The number of iterations to perform. Default: 1                              // 8568
	         */                                                                                                           // 8569
	        cfg: Base.extend({                                                                                            // 8570
	            keySize: 128/32,                                                                                          // 8571
	            hasher: MD5,                                                                                              // 8572
	            iterations: 1                                                                                             // 8573
	        }),                                                                                                           // 8574
                                                                                                                       // 8575
	        /**                                                                                                           // 8576
	         * Initializes a newly created key derivation function.                                                       // 8577
	         *                                                                                                            // 8578
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 8579
	         *                                                                                                            // 8580
	         * @example                                                                                                   // 8581
	         *                                                                                                            // 8582
	         *     var kdf = CryptoJS.algo.EvpKDF.create();                                                               // 8583
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });                                                 // 8584
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });                               // 8585
	         */                                                                                                           // 8586
	        init: function (cfg) {                                                                                        // 8587
	            this.cfg = this.cfg.extend(cfg);                                                                          // 8588
	        },                                                                                                            // 8589
                                                                                                                       // 8590
	        /**                                                                                                           // 8591
	         * Derives a key from a password.                                                                             // 8592
	         *                                                                                                            // 8593
	         * @param {WordArray|string} password The password.                                                           // 8594
	         * @param {WordArray|string} salt A salt.                                                                     // 8595
	         *                                                                                                            // 8596
	         * @return {WordArray} The derived key.                                                                       // 8597
	         *                                                                                                            // 8598
	         * @example                                                                                                   // 8599
	         *                                                                                                            // 8600
	         *     var key = kdf.compute(password, salt);                                                                 // 8601
	         */                                                                                                           // 8602
	        compute: function (password, salt) {                                                                          // 8603
	            // Shortcut                                                                                               // 8604
	            var cfg = this.cfg;                                                                                       // 8605
                                                                                                                       // 8606
	            // Init hasher                                                                                            // 8607
	            var hasher = cfg.hasher.create();                                                                         // 8608
                                                                                                                       // 8609
	            // Initial values                                                                                         // 8610
	            var derivedKey = WordArray.create();                                                                      // 8611
                                                                                                                       // 8612
	            // Shortcuts                                                                                              // 8613
	            var derivedKeyWords = derivedKey.words;                                                                   // 8614
	            var keySize = cfg.keySize;                                                                                // 8615
	            var iterations = cfg.iterations;                                                                          // 8616
                                                                                                                       // 8617
	            // Generate key                                                                                           // 8618
	            while (derivedKeyWords.length < keySize) {                                                                // 8619
	                if (block) {                                                                                          // 8620
	                    hasher.update(block);                                                                             // 8621
	                }                                                                                                     // 8622
	                var block = hasher.update(password).finalize(salt);                                                   // 8623
	                hasher.reset();                                                                                       // 8624
                                                                                                                       // 8625
	                // Iterations                                                                                         // 8626
	                for (var i = 1; i < iterations; i++) {                                                                // 8627
	                    block = hasher.finalize(block);                                                                   // 8628
	                    hasher.reset();                                                                                   // 8629
	                }                                                                                                     // 8630
                                                                                                                       // 8631
	                derivedKey.concat(block);                                                                             // 8632
	            }                                                                                                         // 8633
	            derivedKey.sigBytes = keySize * 4;                                                                        // 8634
                                                                                                                       // 8635
	            return derivedKey;                                                                                        // 8636
	        }                                                                                                             // 8637
	    });                                                                                                               // 8638
                                                                                                                       // 8639
	    /**                                                                                                               // 8640
	     * Derives a key from a password.                                                                                 // 8641
	     *                                                                                                                // 8642
	     * @param {WordArray|string} password The password.                                                               // 8643
	     * @param {WordArray|string} salt A salt.                                                                         // 8644
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 8645
	     *                                                                                                                // 8646
	     * @return {WordArray} The derived key.                                                                           // 8647
	     *                                                                                                                // 8648
	     * @static                                                                                                        // 8649
	     *                                                                                                                // 8650
	     * @example                                                                                                       // 8651
	     *                                                                                                                // 8652
	     *     var key = CryptoJS.EvpKDF(password, salt);                                                                 // 8653
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });                                                 // 8654
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });                               // 8655
	     */                                                                                                               // 8656
	    C.EvpKDF = function (password, salt, cfg) {                                                                       // 8657
	        return EvpKDF.create(cfg).compute(password, salt);                                                            // 8658
	    };                                                                                                                // 8659
	}());                                                                                                                 // 8660
                                                                                                                       // 8661
                                                                                                                       // 8662
	return CryptoJS.EvpKDF;                                                                                               // 8663
                                                                                                                       // 8664
}));                                                                                                                   // 8665
},{"./core":52,"./hmac":57,"./sha1":76}],56:[function(require,module,exports){                                         // 8666
;(function (root, factory, undef) {                                                                                    // 8667
	if (typeof exports === "object") {                                                                                    // 8668
		// CommonJS                                                                                                          // 8669
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 8670
	}                                                                                                                     // 8671
	else if (typeof define === "function" && define.amd) {                                                                // 8672
		// AMD                                                                                                               // 8673
		define(["./core", "./cipher-core"], factory);                                                                        // 8674
	}                                                                                                                     // 8675
	else {                                                                                                                // 8676
		// Global (browser)                                                                                                  // 8677
		factory(root.CryptoJS);                                                                                              // 8678
	}                                                                                                                     // 8679
}(this, function (CryptoJS) {                                                                                          // 8680
                                                                                                                       // 8681
	(function (undefined) {                                                                                               // 8682
	    // Shortcuts                                                                                                      // 8683
	    var C = CryptoJS;                                                                                                 // 8684
	    var C_lib = C.lib;                                                                                                // 8685
	    var CipherParams = C_lib.CipherParams;                                                                            // 8686
	    var C_enc = C.enc;                                                                                                // 8687
	    var Hex = C_enc.Hex;                                                                                              // 8688
	    var C_format = C.format;                                                                                          // 8689
                                                                                                                       // 8690
	    var HexFormatter = C_format.Hex = {                                                                               // 8691
	        /**                                                                                                           // 8692
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.                       // 8693
	         *                                                                                                            // 8694
	         * @param {CipherParams} cipherParams The cipher params object.                                               // 8695
	         *                                                                                                            // 8696
	         * @return {string} The hexadecimally encoded string.                                                         // 8697
	         *                                                                                                            // 8698
	         * @static                                                                                                    // 8699
	         *                                                                                                            // 8700
	         * @example                                                                                                   // 8701
	         *                                                                                                            // 8702
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);                                           // 8703
	         */                                                                                                           // 8704
	        stringify: function (cipherParams) {                                                                          // 8705
	            return cipherParams.ciphertext.toString(Hex);                                                             // 8706
	        },                                                                                                            // 8707
                                                                                                                       // 8708
	        /**                                                                                                           // 8709
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.                              // 8710
	         *                                                                                                            // 8711
	         * @param {string} input The hexadecimally encoded string.                                                    // 8712
	         *                                                                                                            // 8713
	         * @return {CipherParams} The cipher params object.                                                           // 8714
	         *                                                                                                            // 8715
	         * @static                                                                                                    // 8716
	         *                                                                                                            // 8717
	         * @example                                                                                                   // 8718
	         *                                                                                                            // 8719
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);                                               // 8720
	         */                                                                                                           // 8721
	        parse: function (input) {                                                                                     // 8722
	            var ciphertext = Hex.parse(input);                                                                        // 8723
	            return CipherParams.create({ ciphertext: ciphertext });                                                   // 8724
	        }                                                                                                             // 8725
	    };                                                                                                                // 8726
	}());                                                                                                                 // 8727
                                                                                                                       // 8728
                                                                                                                       // 8729
	return CryptoJS.format.Hex;                                                                                           // 8730
                                                                                                                       // 8731
}));                                                                                                                   // 8732
},{"./cipher-core":51,"./core":52}],57:[function(require,module,exports){                                              // 8733
;(function (root, factory) {                                                                                           // 8734
	if (typeof exports === "object") {                                                                                    // 8735
		// CommonJS                                                                                                          // 8736
		module.exports = exports = factory(require("./core"));                                                               // 8737
	}                                                                                                                     // 8738
	else if (typeof define === "function" && define.amd) {                                                                // 8739
		// AMD                                                                                                               // 8740
		define(["./core"], factory);                                                                                         // 8741
	}                                                                                                                     // 8742
	else {                                                                                                                // 8743
		// Global (browser)                                                                                                  // 8744
		factory(root.CryptoJS);                                                                                              // 8745
	}                                                                                                                     // 8746
}(this, function (CryptoJS) {                                                                                          // 8747
                                                                                                                       // 8748
	(function () {                                                                                                        // 8749
	    // Shortcuts                                                                                                      // 8750
	    var C = CryptoJS;                                                                                                 // 8751
	    var C_lib = C.lib;                                                                                                // 8752
	    var Base = C_lib.Base;                                                                                            // 8753
	    var C_enc = C.enc;                                                                                                // 8754
	    var Utf8 = C_enc.Utf8;                                                                                            // 8755
	    var C_algo = C.algo;                                                                                              // 8756
                                                                                                                       // 8757
	    /**                                                                                                               // 8758
	     * HMAC algorithm.                                                                                                // 8759
	     */                                                                                                               // 8760
	    var HMAC = C_algo.HMAC = Base.extend({                                                                            // 8761
	        /**                                                                                                           // 8762
	         * Initializes a newly created HMAC.                                                                          // 8763
	         *                                                                                                            // 8764
	         * @param {Hasher} hasher The hash algorithm to use.                                                          // 8765
	         * @param {WordArray|string} key The secret key.                                                              // 8766
	         *                                                                                                            // 8767
	         * @example                                                                                                   // 8768
	         *                                                                                                            // 8769
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);                                 // 8770
	         */                                                                                                           // 8771
	        init: function (hasher, key) {                                                                                // 8772
	            // Init hasher                                                                                            // 8773
	            hasher = this._hasher = new hasher.init();                                                                // 8774
                                                                                                                       // 8775
	            // Convert string to WordArray, else assume WordArray already                                             // 8776
	            if (typeof key == 'string') {                                                                             // 8777
	                key = Utf8.parse(key);                                                                                // 8778
	            }                                                                                                         // 8779
                                                                                                                       // 8780
	            // Shortcuts                                                                                              // 8781
	            var hasherBlockSize = hasher.blockSize;                                                                   // 8782
	            var hasherBlockSizeBytes = hasherBlockSize * 4;                                                           // 8783
                                                                                                                       // 8784
	            // Allow arbitrary length keys                                                                            // 8785
	            if (key.sigBytes > hasherBlockSizeBytes) {                                                                // 8786
	                key = hasher.finalize(key);                                                                           // 8787
	            }                                                                                                         // 8788
                                                                                                                       // 8789
	            // Clamp excess bits                                                                                      // 8790
	            key.clamp();                                                                                              // 8791
                                                                                                                       // 8792
	            // Clone key for inner and outer pads                                                                     // 8793
	            var oKey = this._oKey = key.clone();                                                                      // 8794
	            var iKey = this._iKey = key.clone();                                                                      // 8795
                                                                                                                       // 8796
	            // Shortcuts                                                                                              // 8797
	            var oKeyWords = oKey.words;                                                                               // 8798
	            var iKeyWords = iKey.words;                                                                               // 8799
                                                                                                                       // 8800
	            // XOR keys with pad constants                                                                            // 8801
	            for (var i = 0; i < hasherBlockSize; i++) {                                                               // 8802
	                oKeyWords[i] ^= 0x5c5c5c5c;                                                                           // 8803
	                iKeyWords[i] ^= 0x36363636;                                                                           // 8804
	            }                                                                                                         // 8805
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;                                                     // 8806
                                                                                                                       // 8807
	            // Set initial values                                                                                     // 8808
	            this.reset();                                                                                             // 8809
	        },                                                                                                            // 8810
                                                                                                                       // 8811
	        /**                                                                                                           // 8812
	         * Resets this HMAC to its initial state.                                                                     // 8813
	         *                                                                                                            // 8814
	         * @example                                                                                                   // 8815
	         *                                                                                                            // 8816
	         *     hmacHasher.reset();                                                                                    // 8817
	         */                                                                                                           // 8818
	        reset: function () {                                                                                          // 8819
	            // Shortcut                                                                                               // 8820
	            var hasher = this._hasher;                                                                                // 8821
                                                                                                                       // 8822
	            // Reset                                                                                                  // 8823
	            hasher.reset();                                                                                           // 8824
	            hasher.update(this._iKey);                                                                                // 8825
	        },                                                                                                            // 8826
                                                                                                                       // 8827
	        /**                                                                                                           // 8828
	         * Updates this HMAC with a message.                                                                          // 8829
	         *                                                                                                            // 8830
	         * @param {WordArray|string} messageUpdate The message to append.                                             // 8831
	         *                                                                                                            // 8832
	         * @return {HMAC} This HMAC instance.                                                                         // 8833
	         *                                                                                                            // 8834
	         * @example                                                                                                   // 8835
	         *                                                                                                            // 8836
	         *     hmacHasher.update('message');                                                                          // 8837
	         *     hmacHasher.update(wordArray);                                                                          // 8838
	         */                                                                                                           // 8839
	        update: function (messageUpdate) {                                                                            // 8840
	            this._hasher.update(messageUpdate);                                                                       // 8841
                                                                                                                       // 8842
	            // Chainable                                                                                              // 8843
	            return this;                                                                                              // 8844
	        },                                                                                                            // 8845
                                                                                                                       // 8846
	        /**                                                                                                           // 8847
	         * Finalizes the HMAC computation.                                                                            // 8848
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 8849
	         *                                                                                                            // 8850
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 8851
	         *                                                                                                            // 8852
	         * @return {WordArray} The HMAC.                                                                              // 8853
	         *                                                                                                            // 8854
	         * @example                                                                                                   // 8855
	         *                                                                                                            // 8856
	         *     var hmac = hmacHasher.finalize();                                                                      // 8857
	         *     var hmac = hmacHasher.finalize('message');                                                             // 8858
	         *     var hmac = hmacHasher.finalize(wordArray);                                                             // 8859
	         */                                                                                                           // 8860
	        finalize: function (messageUpdate) {                                                                          // 8861
	            // Shortcut                                                                                               // 8862
	            var hasher = this._hasher;                                                                                // 8863
                                                                                                                       // 8864
	            // Compute HMAC                                                                                           // 8865
	            var innerHash = hasher.finalize(messageUpdate);                                                           // 8866
	            hasher.reset();                                                                                           // 8867
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));                                         // 8868
                                                                                                                       // 8869
	            return hmac;                                                                                              // 8870
	        }                                                                                                             // 8871
	    });                                                                                                               // 8872
	}());                                                                                                                 // 8873
                                                                                                                       // 8874
                                                                                                                       // 8875
}));                                                                                                                   // 8876
},{"./core":52}],58:[function(require,module,exports){                                                                 // 8877
;(function (root, factory, undef) {                                                                                    // 8878
	if (typeof exports === "object") {                                                                                    // 8879
		// CommonJS                                                                                                          // 8880
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
	}                                                                                                                     // 8882
	else if (typeof define === "function" && define.amd) {                                                                // 8883
		// AMD                                                                                                               // 8884
		define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
	}                                                                                                                     // 8886
	else {                                                                                                                // 8887
		// Global (browser)                                                                                                  // 8888
		root.CryptoJS = factory(root.CryptoJS);                                                                              // 8889
	}                                                                                                                     // 8890
}(this, function (CryptoJS) {                                                                                          // 8891
                                                                                                                       // 8892
	return CryptoJS;                                                                                                      // 8893
                                                                                                                       // 8894
}));                                                                                                                   // 8895
},{"./aes":50,"./cipher-core":51,"./core":52,"./enc-base64":53,"./enc-utf16":54,"./evpkdf":55,"./format-hex":56,"./hmac":57,"./lib-typedarrays":59,"./md5":60,"./mode-cfb":61,"./mode-ctr":63,"./mode-ctr-gladman":62,"./mode-ecb":64,"./mode-ofb":65,"./pad-ansix923":66,"./pad-iso10126":67,"./pad-iso97971":68,"./pad-nopadding":69,"./pad-zeropadding":70,"./pbkdf2":71,"./rabbit":73,"./rabbit-legacy":72,"./rc4":74,"./ripemd160":75,"./sha1":76,"./sha224":77,"./sha256":78,"./sha3":79,"./sha384":80,"./sha512":81,"./tripledes":82,"./x64-core":83}],59:[function(require,module,exports){
;(function (root, factory) {                                                                                           // 8897
	if (typeof exports === "object") {                                                                                    // 8898
		// CommonJS                                                                                                          // 8899
		module.exports = exports = factory(require("./core"));                                                               // 8900
	}                                                                                                                     // 8901
	else if (typeof define === "function" && define.amd) {                                                                // 8902
		// AMD                                                                                                               // 8903
		define(["./core"], factory);                                                                                         // 8904
	}                                                                                                                     // 8905
	else {                                                                                                                // 8906
		// Global (browser)                                                                                                  // 8907
		factory(root.CryptoJS);                                                                                              // 8908
	}                                                                                                                     // 8909
}(this, function (CryptoJS) {                                                                                          // 8910
                                                                                                                       // 8911
	(function () {                                                                                                        // 8912
	    // Check if typed arrays are supported                                                                            // 8913
	    if (typeof ArrayBuffer != 'function') {                                                                           // 8914
	        return;                                                                                                       // 8915
	    }                                                                                                                 // 8916
                                                                                                                       // 8917
	    // Shortcuts                                                                                                      // 8918
	    var C = CryptoJS;                                                                                                 // 8919
	    var C_lib = C.lib;                                                                                                // 8920
	    var WordArray = C_lib.WordArray;                                                                                  // 8921
                                                                                                                       // 8922
	    // Reference original init                                                                                        // 8923
	    var superInit = WordArray.init;                                                                                   // 8924
                                                                                                                       // 8925
	    // Augment WordArray.init to handle typed arrays                                                                  // 8926
	    var subInit = WordArray.init = function (typedArray) {                                                            // 8927
	        // Convert buffers to uint8                                                                                   // 8928
	        if (typedArray instanceof ArrayBuffer) {                                                                      // 8929
	            typedArray = new Uint8Array(typedArray);                                                                  // 8930
	        }                                                                                                             // 8931
                                                                                                                       // 8932
	        // Convert other array views to uint8                                                                         // 8933
	        if (                                                                                                          // 8934
	            typedArray instanceof Int8Array ||                                                                        // 8935
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||                  // 8936
	            typedArray instanceof Int16Array ||                                                                       // 8937
	            typedArray instanceof Uint16Array ||                                                                      // 8938
	            typedArray instanceof Int32Array ||                                                                       // 8939
	            typedArray instanceof Uint32Array ||                                                                      // 8940
	            typedArray instanceof Float32Array ||                                                                     // 8941
	            typedArray instanceof Float64Array                                                                        // 8942
	        ) {                                                                                                           // 8943
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);             // 8944
	        }                                                                                                             // 8945
                                                                                                                       // 8946
	        // Handle Uint8Array                                                                                          // 8947
	        if (typedArray instanceof Uint8Array) {                                                                       // 8948
	            // Shortcut                                                                                               // 8949
	            var typedArrayByteLength = typedArray.byteLength;                                                         // 8950
                                                                                                                       // 8951
	            // Extract bytes                                                                                          // 8952
	            var words = [];                                                                                           // 8953
	            for (var i = 0; i < typedArrayByteLength; i++) {                                                          // 8954
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);                                                // 8955
	            }                                                                                                         // 8956
                                                                                                                       // 8957
	            // Initialize this word array                                                                             // 8958
	            superInit.call(this, words, typedArrayByteLength);                                                        // 8959
	        } else {                                                                                                      // 8960
	            // Else call normal init                                                                                  // 8961
	            superInit.apply(this, arguments);                                                                         // 8962
	        }                                                                                                             // 8963
	    };                                                                                                                // 8964
                                                                                                                       // 8965
	    subInit.prototype = WordArray;                                                                                    // 8966
	}());                                                                                                                 // 8967
                                                                                                                       // 8968
                                                                                                                       // 8969
	return CryptoJS.lib.WordArray;                                                                                        // 8970
                                                                                                                       // 8971
}));                                                                                                                   // 8972
},{"./core":52}],60:[function(require,module,exports){                                                                 // 8973
;(function (root, factory) {                                                                                           // 8974
	if (typeof exports === "object") {                                                                                    // 8975
		// CommonJS                                                                                                          // 8976
		module.exports = exports = factory(require("./core"));                                                               // 8977
	}                                                                                                                     // 8978
	else if (typeof define === "function" && define.amd) {                                                                // 8979
		// AMD                                                                                                               // 8980
		define(["./core"], factory);                                                                                         // 8981
	}                                                                                                                     // 8982
	else {                                                                                                                // 8983
		// Global (browser)                                                                                                  // 8984
		factory(root.CryptoJS);                                                                                              // 8985
	}                                                                                                                     // 8986
}(this, function (CryptoJS) {                                                                                          // 8987
                                                                                                                       // 8988
	(function (Math) {                                                                                                    // 8989
	    // Shortcuts                                                                                                      // 8990
	    var C = CryptoJS;                                                                                                 // 8991
	    var C_lib = C.lib;                                                                                                // 8992
	    var WordArray = C_lib.WordArray;                                                                                  // 8993
	    var Hasher = C_lib.Hasher;                                                                                        // 8994
	    var C_algo = C.algo;                                                                                              // 8995
                                                                                                                       // 8996
	    // Constants table                                                                                                // 8997
	    var T = [];                                                                                                       // 8998
                                                                                                                       // 8999
	    // Compute constants                                                                                              // 9000
	    (function () {                                                                                                    // 9001
	        for (var i = 0; i < 64; i++) {                                                                                // 9002
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;                                                     // 9003
	        }                                                                                                             // 9004
	    }());                                                                                                             // 9005
                                                                                                                       // 9006
	    /**                                                                                                               // 9007
	     * MD5 hash algorithm.                                                                                            // 9008
	     */                                                                                                               // 9009
	    var MD5 = C_algo.MD5 = Hasher.extend({                                                                            // 9010
	        _doReset: function () {                                                                                       // 9011
	            this._hash = new WordArray.init([                                                                         // 9012
	                0x67452301, 0xefcdab89,                                                                               // 9013
	                0x98badcfe, 0x10325476                                                                                // 9014
	            ]);                                                                                                       // 9015
	        },                                                                                                            // 9016
                                                                                                                       // 9017
	        _doProcessBlock: function (M, offset) {                                                                       // 9018
	            // Swap endian                                                                                            // 9019
	            for (var i = 0; i < 16; i++) {                                                                            // 9020
	                // Shortcuts                                                                                          // 9021
	                var offset_i = offset + i;                                                                            // 9022
	                var M_offset_i = M[offset_i];                                                                         // 9023
                                                                                                                       // 9024
	                M[offset_i] = (                                                                                       // 9025
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 9026
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 9027
	                );                                                                                                    // 9028
	            }                                                                                                         // 9029
                                                                                                                       // 9030
	            // Shortcuts                                                                                              // 9031
	            var H = this._hash.words;                                                                                 // 9032
                                                                                                                       // 9033
	            var M_offset_0  = M[offset + 0];                                                                          // 9034
	            var M_offset_1  = M[offset + 1];                                                                          // 9035
	            var M_offset_2  = M[offset + 2];                                                                          // 9036
	            var M_offset_3  = M[offset + 3];                                                                          // 9037
	            var M_offset_4  = M[offset + 4];                                                                          // 9038
	            var M_offset_5  = M[offset + 5];                                                                          // 9039
	            var M_offset_6  = M[offset + 6];                                                                          // 9040
	            var M_offset_7  = M[offset + 7];                                                                          // 9041
	            var M_offset_8  = M[offset + 8];                                                                          // 9042
	            var M_offset_9  = M[offset + 9];                                                                          // 9043
	            var M_offset_10 = M[offset + 10];                                                                         // 9044
	            var M_offset_11 = M[offset + 11];                                                                         // 9045
	            var M_offset_12 = M[offset + 12];                                                                         // 9046
	            var M_offset_13 = M[offset + 13];                                                                         // 9047
	            var M_offset_14 = M[offset + 14];                                                                         // 9048
	            var M_offset_15 = M[offset + 15];                                                                         // 9049
                                                                                                                       // 9050
	            // Working varialbes                                                                                      // 9051
	            var a = H[0];                                                                                             // 9052
	            var b = H[1];                                                                                             // 9053
	            var c = H[2];                                                                                             // 9054
	            var d = H[3];                                                                                             // 9055
                                                                                                                       // 9056
	            // Computation                                                                                            // 9057
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);                                                                // 9058
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);                                                                // 9059
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);                                                                // 9060
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);                                                                // 9061
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);                                                                // 9062
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);                                                                // 9063
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);                                                                // 9064
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);                                                                // 9065
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);                                                                // 9066
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);                                                                // 9067
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);                                                               // 9068
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);                                                               // 9069
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);                                                               // 9070
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);                                                               // 9071
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);                                                               // 9072
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);                                                               // 9073
                                                                                                                       // 9074
	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);                                                               // 9075
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);                                                               // 9076
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);                                                               // 9077
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);                                                               // 9078
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);                                                               // 9079
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);                                                               // 9080
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);                                                               // 9081
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);                                                               // 9082
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);                                                               // 9083
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);                                                               // 9084
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);                                                               // 9085
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);                                                               // 9086
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);                                                               // 9087
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);                                                               // 9088
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);                                                               // 9089
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);                                                               // 9090
                                                                                                                       // 9091
	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);                                                               // 9092
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);                                                               // 9093
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);                                                               // 9094
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);                                                               // 9095
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);                                                               // 9096
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);                                                               // 9097
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);                                                               // 9098
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);                                                               // 9099
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);                                                               // 9100
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);                                                               // 9101
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);                                                               // 9102
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);                                                               // 9103
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);                                                               // 9104
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);                                                               // 9105
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);                                                               // 9106
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);                                                               // 9107
                                                                                                                       // 9108
	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);                                                               // 9109
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);                                                               // 9110
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);                                                               // 9111
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);                                                               // 9112
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);                                                               // 9113
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);                                                               // 9114
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);                                                               // 9115
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);                                                               // 9116
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);                                                               // 9117
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);                                                               // 9118
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);                                                               // 9119
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);                                                               // 9120
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);                                                               // 9121
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);                                                               // 9122
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);                                                               // 9123
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);                                                               // 9124
                                                                                                                       // 9125
	            // Intermediate hash value                                                                                // 9126
	            H[0] = (H[0] + a) | 0;                                                                                    // 9127
	            H[1] = (H[1] + b) | 0;                                                                                    // 9128
	            H[2] = (H[2] + c) | 0;                                                                                    // 9129
	            H[3] = (H[3] + d) | 0;                                                                                    // 9130
	        },                                                                                                            // 9131
                                                                                                                       // 9132
	        _doFinalize: function () {                                                                                    // 9133
	            // Shortcuts                                                                                              // 9134
	            var data = this._data;                                                                                    // 9135
	            var dataWords = data.words;                                                                               // 9136
                                                                                                                       // 9137
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 9138
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 9139
                                                                                                                       // 9140
	            // Add padding                                                                                            // 9141
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 9142
                                                                                                                       // 9143
	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);                                                   // 9144
	            var nBitsTotalL = nBitsTotal;                                                                             // 9145
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (                                                       // 9146
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |                                         // 9147
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)                                           // 9148
	            );                                                                                                        // 9149
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 9150
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |                                         // 9151
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)                                           // 9152
	            );                                                                                                        // 9153
                                                                                                                       // 9154
	            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 9155
                                                                                                                       // 9156
	            // Hash final blocks                                                                                      // 9157
	            this._process();                                                                                          // 9158
                                                                                                                       // 9159
	            // Shortcuts                                                                                              // 9160
	            var hash = this._hash;                                                                                    // 9161
	            var H = hash.words;                                                                                       // 9162
                                                                                                                       // 9163
	            // Swap endian                                                                                            // 9164
	            for (var i = 0; i < 4; i++) {                                                                             // 9165
	                // Shortcut                                                                                           // 9166
	                var H_i = H[i];                                                                                       // 9167
                                                                                                                       // 9168
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 9169
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 9170
	            }                                                                                                         // 9171
                                                                                                                       // 9172
	            // Return final computed hash                                                                             // 9173
	            return hash;                                                                                              // 9174
	        },                                                                                                            // 9175
                                                                                                                       // 9176
	        clone: function () {                                                                                          // 9177
	            var clone = Hasher.clone.call(this);                                                                      // 9178
	            clone._hash = this._hash.clone();                                                                         // 9179
                                                                                                                       // 9180
	            return clone;                                                                                             // 9181
	        }                                                                                                             // 9182
	    });                                                                                                               // 9183
                                                                                                                       // 9184
	    function FF(a, b, c, d, x, s, t) {                                                                                // 9185
	        var n = a + ((b & c) | (~b & d)) + x + t;                                                                     // 9186
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9187
	    }                                                                                                                 // 9188
                                                                                                                       // 9189
	    function GG(a, b, c, d, x, s, t) {                                                                                // 9190
	        var n = a + ((b & d) | (c & ~d)) + x + t;                                                                     // 9191
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9192
	    }                                                                                                                 // 9193
                                                                                                                       // 9194
	    function HH(a, b, c, d, x, s, t) {                                                                                // 9195
	        var n = a + (b ^ c ^ d) + x + t;                                                                              // 9196
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9197
	    }                                                                                                                 // 9198
                                                                                                                       // 9199
	    function II(a, b, c, d, x, s, t) {                                                                                // 9200
	        var n = a + (c ^ (b | ~d)) + x + t;                                                                           // 9201
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9202
	    }                                                                                                                 // 9203
                                                                                                                       // 9204
	    /**                                                                                                               // 9205
	     * Shortcut function to the hasher's object interface.                                                            // 9206
	     *                                                                                                                // 9207
	     * @param {WordArray|string} message The message to hash.                                                         // 9208
	     *                                                                                                                // 9209
	     * @return {WordArray} The hash.                                                                                  // 9210
	     *                                                                                                                // 9211
	     * @static                                                                                                        // 9212
	     *                                                                                                                // 9213
	     * @example                                                                                                       // 9214
	     *                                                                                                                // 9215
	     *     var hash = CryptoJS.MD5('message');                                                                        // 9216
	     *     var hash = CryptoJS.MD5(wordArray);                                                                        // 9217
	     */                                                                                                               // 9218
	    C.MD5 = Hasher._createHelper(MD5);                                                                                // 9219
                                                                                                                       // 9220
	    /**                                                                                                               // 9221
	     * Shortcut function to the HMAC's object interface.                                                              // 9222
	     *                                                                                                                // 9223
	     * @param {WordArray|string} message The message to hash.                                                         // 9224
	     * @param {WordArray|string} key The secret key.                                                                  // 9225
	     *                                                                                                                // 9226
	     * @return {WordArray} The HMAC.                                                                                  // 9227
	     *                                                                                                                // 9228
	     * @static                                                                                                        // 9229
	     *                                                                                                                // 9230
	     * @example                                                                                                       // 9231
	     *                                                                                                                // 9232
	     *     var hmac = CryptoJS.HmacMD5(message, key);                                                                 // 9233
	     */                                                                                                               // 9234
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);                                                                        // 9235
	}(Math));                                                                                                             // 9236
                                                                                                                       // 9237
                                                                                                                       // 9238
	return CryptoJS.MD5;                                                                                                  // 9239
                                                                                                                       // 9240
}));                                                                                                                   // 9241
},{"./core":52}],61:[function(require,module,exports){                                                                 // 9242
;(function (root, factory, undef) {                                                                                    // 9243
	if (typeof exports === "object") {                                                                                    // 9244
		// CommonJS                                                                                                          // 9245
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9246
	}                                                                                                                     // 9247
	else if (typeof define === "function" && define.amd) {                                                                // 9248
		// AMD                                                                                                               // 9249
		define(["./core", "./cipher-core"], factory);                                                                        // 9250
	}                                                                                                                     // 9251
	else {                                                                                                                // 9252
		// Global (browser)                                                                                                  // 9253
		factory(root.CryptoJS);                                                                                              // 9254
	}                                                                                                                     // 9255
}(this, function (CryptoJS) {                                                                                          // 9256
                                                                                                                       // 9257
	/**                                                                                                                   // 9258
	 * Cipher Feedback block mode.                                                                                        // 9259
	 */                                                                                                                   // 9260
	CryptoJS.mode.CFB = (function () {                                                                                    // 9261
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9262
                                                                                                                       // 9263
	    CFB.Encryptor = CFB.extend({                                                                                      // 9264
	        processBlock: function (words, offset) {                                                                      // 9265
	            // Shortcuts                                                                                              // 9266
	            var cipher = this._cipher;                                                                                // 9267
	            var blockSize = cipher.blockSize;                                                                         // 9268
                                                                                                                       // 9269
	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9270
                                                                                                                       // 9271
	            // Remember this block to use with next block                                                             // 9272
	            this._prevBlock = words.slice(offset, offset + blockSize);                                                // 9273
	        }                                                                                                             // 9274
	    });                                                                                                               // 9275
                                                                                                                       // 9276
	    CFB.Decryptor = CFB.extend({                                                                                      // 9277
	        processBlock: function (words, offset) {                                                                      // 9278
	            // Shortcuts                                                                                              // 9279
	            var cipher = this._cipher;                                                                                // 9280
	            var blockSize = cipher.blockSize;                                                                         // 9281
                                                                                                                       // 9282
	            // Remember this block to use with next block                                                             // 9283
	            var thisBlock = words.slice(offset, offset + blockSize);                                                  // 9284
                                                                                                                       // 9285
	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9286
                                                                                                                       // 9287
	            // This block becomes the previous block                                                                  // 9288
	            this._prevBlock = thisBlock;                                                                              // 9289
	        }                                                                                                             // 9290
	    });                                                                                                               // 9291
                                                                                                                       // 9292
	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {                                          // 9293
	        // Shortcut                                                                                                   // 9294
	        var iv = this._iv;                                                                                            // 9295
                                                                                                                       // 9296
	        // Generate keystream                                                                                         // 9297
	        if (iv) {                                                                                                     // 9298
	            var keystream = iv.slice(0);                                                                              // 9299
                                                                                                                       // 9300
	            // Remove IV for subsequent blocks                                                                        // 9301
	            this._iv = undefined;                                                                                     // 9302
	        } else {                                                                                                      // 9303
	            var keystream = this._prevBlock;                                                                          // 9304
	        }                                                                                                             // 9305
	        cipher.encryptBlock(keystream, 0);                                                                            // 9306
                                                                                                                       // 9307
	        // Encrypt                                                                                                    // 9308
	        for (var i = 0; i < blockSize; i++) {                                                                         // 9309
	            words[offset + i] ^= keystream[i];                                                                        // 9310
	        }                                                                                                             // 9311
	    }                                                                                                                 // 9312
                                                                                                                       // 9313
	    return CFB;                                                                                                       // 9314
	}());                                                                                                                 // 9315
                                                                                                                       // 9316
                                                                                                                       // 9317
	return CryptoJS.mode.CFB;                                                                                             // 9318
                                                                                                                       // 9319
}));                                                                                                                   // 9320
},{"./cipher-core":51,"./core":52}],62:[function(require,module,exports){                                              // 9321
;(function (root, factory, undef) {                                                                                    // 9322
	if (typeof exports === "object") {                                                                                    // 9323
		// CommonJS                                                                                                          // 9324
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9325
	}                                                                                                                     // 9326
	else if (typeof define === "function" && define.amd) {                                                                // 9327
		// AMD                                                                                                               // 9328
		define(["./core", "./cipher-core"], factory);                                                                        // 9329
	}                                                                                                                     // 9330
	else {                                                                                                                // 9331
		// Global (browser)                                                                                                  // 9332
		factory(root.CryptoJS);                                                                                              // 9333
	}                                                                                                                     // 9334
}(this, function (CryptoJS) {                                                                                          // 9335
                                                                                                                       // 9336
	/** @preserve                                                                                                         // 9337
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c                                                     // 9338
	 * derived from CryptoJS.mode.CTR                                                                                     // 9339
	 * Jan Hruby jhruby.web@gmail.com                                                                                     // 9340
	 */                                                                                                                   // 9341
	CryptoJS.mode.CTRGladman = (function () {                                                                             // 9342
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();                                                           // 9343
                                                                                                                       // 9344
		function incWord(word)                                                                                               // 9345
		{                                                                                                                    // 9346
			if (((word >> 24) & 0xff) === 0xff) { //overflow                                                                    // 9347
			var b1 = (word >> 16)&0xff;                                                                                         // 9348
			var b2 = (word >> 8)&0xff;                                                                                          // 9349
			var b3 = word & 0xff;                                                                                               // 9350
                                                                                                                       // 9351
			if (b1 === 0xff) // overflow b1                                                                                     // 9352
			{                                                                                                                   // 9353
			b1 = 0;                                                                                                             // 9354
			if (b2 === 0xff)                                                                                                    // 9355
			{                                                                                                                   // 9356
				b2 = 0;                                                                                                            // 9357
				if (b3 === 0xff)                                                                                                   // 9358
				{                                                                                                                  // 9359
					b3 = 0;                                                                                                           // 9360
				}                                                                                                                  // 9361
				else                                                                                                               // 9362
				{                                                                                                                  // 9363
					++b3;                                                                                                             // 9364
				}                                                                                                                  // 9365
			}                                                                                                                   // 9366
			else                                                                                                                // 9367
			{                                                                                                                   // 9368
				++b2;                                                                                                              // 9369
			}                                                                                                                   // 9370
			}                                                                                                                   // 9371
			else                                                                                                                // 9372
			{                                                                                                                   // 9373
			++b1;                                                                                                               // 9374
			}                                                                                                                   // 9375
                                                                                                                       // 9376
			word = 0;                                                                                                           // 9377
			word += (b1 << 16);                                                                                                 // 9378
			word += (b2 << 8);                                                                                                  // 9379
			word += b3;                                                                                                         // 9380
			}                                                                                                                   // 9381
			else                                                                                                                // 9382
			{                                                                                                                   // 9383
			word += (0x01 << 24);                                                                                               // 9384
			}                                                                                                                   // 9385
			return word;                                                                                                        // 9386
		}                                                                                                                    // 9387
                                                                                                                       // 9388
		function incCounter(counter)                                                                                         // 9389
		{                                                                                                                    // 9390
			if ((counter[0] = incWord(counter[0])) === 0)                                                                       // 9391
			{                                                                                                                   // 9392
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8                                    // 9393
				counter[1] = incWord(counter[1]);                                                                                  // 9394
			}                                                                                                                   // 9395
			return counter;                                                                                                     // 9396
		}                                                                                                                    // 9397
                                                                                                                       // 9398
	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({                                                        // 9399
	        processBlock: function (words, offset) {                                                                      // 9400
	            // Shortcuts                                                                                              // 9401
	            var cipher = this._cipher                                                                                 // 9402
	            var blockSize = cipher.blockSize;                                                                         // 9403
	            var iv = this._iv;                                                                                        // 9404
	            var counter = this._counter;                                                                              // 9405
                                                                                                                       // 9406
	            // Generate keystream                                                                                     // 9407
	            if (iv) {                                                                                                 // 9408
	                counter = this._counter = iv.slice(0);                                                                // 9409
                                                                                                                       // 9410
	                // Remove IV for subsequent blocks                                                                    // 9411
	                this._iv = undefined;                                                                                 // 9412
	            }                                                                                                         // 9413
                                                                                                                       // 9414
				incCounter(counter);                                                                                               // 9415
                                                                                                                       // 9416
				var keystream = counter.slice(0);                                                                                  // 9417
	            cipher.encryptBlock(keystream, 0);                                                                        // 9418
                                                                                                                       // 9419
	            // Encrypt                                                                                                // 9420
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9421
	                words[offset + i] ^= keystream[i];                                                                    // 9422
	            }                                                                                                         // 9423
	        }                                                                                                             // 9424
	    });                                                                                                               // 9425
                                                                                                                       // 9426
	    CTRGladman.Decryptor = Encryptor;                                                                                 // 9427
                                                                                                                       // 9428
	    return CTRGladman;                                                                                                // 9429
	}());                                                                                                                 // 9430
                                                                                                                       // 9431
                                                                                                                       // 9432
                                                                                                                       // 9433
                                                                                                                       // 9434
	return CryptoJS.mode.CTRGladman;                                                                                      // 9435
                                                                                                                       // 9436
}));                                                                                                                   // 9437
},{"./cipher-core":51,"./core":52}],63:[function(require,module,exports){                                              // 9438
;(function (root, factory, undef) {                                                                                    // 9439
	if (typeof exports === "object") {                                                                                    // 9440
		// CommonJS                                                                                                          // 9441
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9442
	}                                                                                                                     // 9443
	else if (typeof define === "function" && define.amd) {                                                                // 9444
		// AMD                                                                                                               // 9445
		define(["./core", "./cipher-core"], factory);                                                                        // 9446
	}                                                                                                                     // 9447
	else {                                                                                                                // 9448
		// Global (browser)                                                                                                  // 9449
		factory(root.CryptoJS);                                                                                              // 9450
	}                                                                                                                     // 9451
}(this, function (CryptoJS) {                                                                                          // 9452
                                                                                                                       // 9453
	/**                                                                                                                   // 9454
	 * Counter block mode.                                                                                                // 9455
	 */                                                                                                                   // 9456
	CryptoJS.mode.CTR = (function () {                                                                                    // 9457
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9458
                                                                                                                       // 9459
	    var Encryptor = CTR.Encryptor = CTR.extend({                                                                      // 9460
	        processBlock: function (words, offset) {                                                                      // 9461
	            // Shortcuts                                                                                              // 9462
	            var cipher = this._cipher                                                                                 // 9463
	            var blockSize = cipher.blockSize;                                                                         // 9464
	            var iv = this._iv;                                                                                        // 9465
	            var counter = this._counter;                                                                              // 9466
                                                                                                                       // 9467
	            // Generate keystream                                                                                     // 9468
	            if (iv) {                                                                                                 // 9469
	                counter = this._counter = iv.slice(0);                                                                // 9470
                                                                                                                       // 9471
	                // Remove IV for subsequent blocks                                                                    // 9472
	                this._iv = undefined;                                                                                 // 9473
	            }                                                                                                         // 9474
	            var keystream = counter.slice(0);                                                                         // 9475
	            cipher.encryptBlock(keystream, 0);                                                                        // 9476
                                                                                                                       // 9477
	            // Increment counter                                                                                      // 9478
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0                                                 // 9479
                                                                                                                       // 9480
	            // Encrypt                                                                                                // 9481
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9482
	                words[offset + i] ^= keystream[i];                                                                    // 9483
	            }                                                                                                         // 9484
	        }                                                                                                             // 9485
	    });                                                                                                               // 9486
                                                                                                                       // 9487
	    CTR.Decryptor = Encryptor;                                                                                        // 9488
                                                                                                                       // 9489
	    return CTR;                                                                                                       // 9490
	}());                                                                                                                 // 9491
                                                                                                                       // 9492
                                                                                                                       // 9493
	return CryptoJS.mode.CTR;                                                                                             // 9494
                                                                                                                       // 9495
}));                                                                                                                   // 9496
},{"./cipher-core":51,"./core":52}],64:[function(require,module,exports){                                              // 9497
;(function (root, factory, undef) {                                                                                    // 9498
	if (typeof exports === "object") {                                                                                    // 9499
		// CommonJS                                                                                                          // 9500
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9501
	}                                                                                                                     // 9502
	else if (typeof define === "function" && define.amd) {                                                                // 9503
		// AMD                                                                                                               // 9504
		define(["./core", "./cipher-core"], factory);                                                                        // 9505
	}                                                                                                                     // 9506
	else {                                                                                                                // 9507
		// Global (browser)                                                                                                  // 9508
		factory(root.CryptoJS);                                                                                              // 9509
	}                                                                                                                     // 9510
}(this, function (CryptoJS) {                                                                                          // 9511
                                                                                                                       // 9512
	/**                                                                                                                   // 9513
	 * Electronic Codebook block mode.                                                                                    // 9514
	 */                                                                                                                   // 9515
	CryptoJS.mode.ECB = (function () {                                                                                    // 9516
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9517
                                                                                                                       // 9518
	    ECB.Encryptor = ECB.extend({                                                                                      // 9519
	        processBlock: function (words, offset) {                                                                      // 9520
	            this._cipher.encryptBlock(words, offset);                                                                 // 9521
	        }                                                                                                             // 9522
	    });                                                                                                               // 9523
                                                                                                                       // 9524
	    ECB.Decryptor = ECB.extend({                                                                                      // 9525
	        processBlock: function (words, offset) {                                                                      // 9526
	            this._cipher.decryptBlock(words, offset);                                                                 // 9527
	        }                                                                                                             // 9528
	    });                                                                                                               // 9529
                                                                                                                       // 9530
	    return ECB;                                                                                                       // 9531
	}());                                                                                                                 // 9532
                                                                                                                       // 9533
                                                                                                                       // 9534
	return CryptoJS.mode.ECB;                                                                                             // 9535
                                                                                                                       // 9536
}));                                                                                                                   // 9537
},{"./cipher-core":51,"./core":52}],65:[function(require,module,exports){                                              // 9538
;(function (root, factory, undef) {                                                                                    // 9539
	if (typeof exports === "object") {                                                                                    // 9540
		// CommonJS                                                                                                          // 9541
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9542
	}                                                                                                                     // 9543
	else if (typeof define === "function" && define.amd) {                                                                // 9544
		// AMD                                                                                                               // 9545
		define(["./core", "./cipher-core"], factory);                                                                        // 9546
	}                                                                                                                     // 9547
	else {                                                                                                                // 9548
		// Global (browser)                                                                                                  // 9549
		factory(root.CryptoJS);                                                                                              // 9550
	}                                                                                                                     // 9551
}(this, function (CryptoJS) {                                                                                          // 9552
                                                                                                                       // 9553
	/**                                                                                                                   // 9554
	 * Output Feedback block mode.                                                                                        // 9555
	 */                                                                                                                   // 9556
	CryptoJS.mode.OFB = (function () {                                                                                    // 9557
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9558
                                                                                                                       // 9559
	    var Encryptor = OFB.Encryptor = OFB.extend({                                                                      // 9560
	        processBlock: function (words, offset) {                                                                      // 9561
	            // Shortcuts                                                                                              // 9562
	            var cipher = this._cipher                                                                                 // 9563
	            var blockSize = cipher.blockSize;                                                                         // 9564
	            var iv = this._iv;                                                                                        // 9565
	            var keystream = this._keystream;                                                                          // 9566
                                                                                                                       // 9567
	            // Generate keystream                                                                                     // 9568
	            if (iv) {                                                                                                 // 9569
	                keystream = this._keystream = iv.slice(0);                                                            // 9570
                                                                                                                       // 9571
	                // Remove IV for subsequent blocks                                                                    // 9572
	                this._iv = undefined;                                                                                 // 9573
	            }                                                                                                         // 9574
	            cipher.encryptBlock(keystream, 0);                                                                        // 9575
                                                                                                                       // 9576
	            // Encrypt                                                                                                // 9577
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9578
	                words[offset + i] ^= keystream[i];                                                                    // 9579
	            }                                                                                                         // 9580
	        }                                                                                                             // 9581
	    });                                                                                                               // 9582
                                                                                                                       // 9583
	    OFB.Decryptor = Encryptor;                                                                                        // 9584
                                                                                                                       // 9585
	    return OFB;                                                                                                       // 9586
	}());                                                                                                                 // 9587
                                                                                                                       // 9588
                                                                                                                       // 9589
	return CryptoJS.mode.OFB;                                                                                             // 9590
                                                                                                                       // 9591
}));                                                                                                                   // 9592
},{"./cipher-core":51,"./core":52}],66:[function(require,module,exports){                                              // 9593
;(function (root, factory, undef) {                                                                                    // 9594
	if (typeof exports === "object") {                                                                                    // 9595
		// CommonJS                                                                                                          // 9596
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9597
	}                                                                                                                     // 9598
	else if (typeof define === "function" && define.amd) {                                                                // 9599
		// AMD                                                                                                               // 9600
		define(["./core", "./cipher-core"], factory);                                                                        // 9601
	}                                                                                                                     // 9602
	else {                                                                                                                // 9603
		// Global (browser)                                                                                                  // 9604
		factory(root.CryptoJS);                                                                                              // 9605
	}                                                                                                                     // 9606
}(this, function (CryptoJS) {                                                                                          // 9607
                                                                                                                       // 9608
	/**                                                                                                                   // 9609
	 * ANSI X.923 padding strategy.                                                                                       // 9610
	 */                                                                                                                   // 9611
	CryptoJS.pad.AnsiX923 = {                                                                                             // 9612
	    pad: function (data, blockSize) {                                                                                 // 9613
	        // Shortcuts                                                                                                  // 9614
	        var dataSigBytes = data.sigBytes;                                                                             // 9615
	        var blockSizeBytes = blockSize * 4;                                                                           // 9616
                                                                                                                       // 9617
	        // Count padding bytes                                                                                        // 9618
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;                                           // 9619
                                                                                                                       // 9620
	        // Compute last byte position                                                                                 // 9621
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;                                                           // 9622
                                                                                                                       // 9623
	        // Pad                                                                                                        // 9624
	        data.clamp();                                                                                                 // 9625
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);                               // 9626
	        data.sigBytes += nPaddingBytes;                                                                               // 9627
	    },                                                                                                                // 9628
                                                                                                                       // 9629
	    unpad: function (data) {                                                                                          // 9630
	        // Get number of padding bytes from last byte                                                                 // 9631
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9632
                                                                                                                       // 9633
	        // Remove padding                                                                                             // 9634
	        data.sigBytes -= nPaddingBytes;                                                                               // 9635
	    }                                                                                                                 // 9636
	};                                                                                                                    // 9637
                                                                                                                       // 9638
                                                                                                                       // 9639
	return CryptoJS.pad.Ansix923;                                                                                         // 9640
                                                                                                                       // 9641
}));                                                                                                                   // 9642
},{"./cipher-core":51,"./core":52}],67:[function(require,module,exports){                                              // 9643
;(function (root, factory, undef) {                                                                                    // 9644
	if (typeof exports === "object") {                                                                                    // 9645
		// CommonJS                                                                                                          // 9646
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9647
	}                                                                                                                     // 9648
	else if (typeof define === "function" && define.amd) {                                                                // 9649
		// AMD                                                                                                               // 9650
		define(["./core", "./cipher-core"], factory);                                                                        // 9651
	}                                                                                                                     // 9652
	else {                                                                                                                // 9653
		// Global (browser)                                                                                                  // 9654
		factory(root.CryptoJS);                                                                                              // 9655
	}                                                                                                                     // 9656
}(this, function (CryptoJS) {                                                                                          // 9657
                                                                                                                       // 9658
	/**                                                                                                                   // 9659
	 * ISO 10126 padding strategy.                                                                                        // 9660
	 */                                                                                                                   // 9661
	CryptoJS.pad.Iso10126 = {                                                                                             // 9662
	    pad: function (data, blockSize) {                                                                                 // 9663
	        // Shortcut                                                                                                   // 9664
	        var blockSizeBytes = blockSize * 4;                                                                           // 9665
                                                                                                                       // 9666
	        // Count padding bytes                                                                                        // 9667
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                          // 9668
                                                                                                                       // 9669
	        // Pad                                                                                                        // 9670
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).                                                // 9671
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));                                         // 9672
	    },                                                                                                                // 9673
                                                                                                                       // 9674
	    unpad: function (data) {                                                                                          // 9675
	        // Get number of padding bytes from last byte                                                                 // 9676
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9677
                                                                                                                       // 9678
	        // Remove padding                                                                                             // 9679
	        data.sigBytes -= nPaddingBytes;                                                                               // 9680
	    }                                                                                                                 // 9681
	};                                                                                                                    // 9682
                                                                                                                       // 9683
                                                                                                                       // 9684
	return CryptoJS.pad.Iso10126;                                                                                         // 9685
                                                                                                                       // 9686
}));                                                                                                                   // 9687
},{"./cipher-core":51,"./core":52}],68:[function(require,module,exports){                                              // 9688
;(function (root, factory, undef) {                                                                                    // 9689
	if (typeof exports === "object") {                                                                                    // 9690
		// CommonJS                                                                                                          // 9691
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9692
	}                                                                                                                     // 9693
	else if (typeof define === "function" && define.amd) {                                                                // 9694
		// AMD                                                                                                               // 9695
		define(["./core", "./cipher-core"], factory);                                                                        // 9696
	}                                                                                                                     // 9697
	else {                                                                                                                // 9698
		// Global (browser)                                                                                                  // 9699
		factory(root.CryptoJS);                                                                                              // 9700
	}                                                                                                                     // 9701
}(this, function (CryptoJS) {                                                                                          // 9702
                                                                                                                       // 9703
	/**                                                                                                                   // 9704
	 * ISO/IEC 9797-1 Padding Method 2.                                                                                   // 9705
	 */                                                                                                                   // 9706
	CryptoJS.pad.Iso97971 = {                                                                                             // 9707
	    pad: function (data, blockSize) {                                                                                 // 9708
	        // Add 0x80 byte                                                                                              // 9709
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));                                                  // 9710
                                                                                                                       // 9711
	        // Zero pad the rest                                                                                          // 9712
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);                                                                // 9713
	    },                                                                                                                // 9714
                                                                                                                       // 9715
	    unpad: function (data) {                                                                                          // 9716
	        // Remove zero padding                                                                                        // 9717
	        CryptoJS.pad.ZeroPadding.unpad(data);                                                                         // 9718
                                                                                                                       // 9719
	        // Remove one more byte -- the 0x80 byte                                                                      // 9720
	        data.sigBytes--;                                                                                              // 9721
	    }                                                                                                                 // 9722
	};                                                                                                                    // 9723
                                                                                                                       // 9724
                                                                                                                       // 9725
	return CryptoJS.pad.Iso97971;                                                                                         // 9726
                                                                                                                       // 9727
}));                                                                                                                   // 9728
},{"./cipher-core":51,"./core":52}],69:[function(require,module,exports){                                              // 9729
;(function (root, factory, undef) {                                                                                    // 9730
	if (typeof exports === "object") {                                                                                    // 9731
		// CommonJS                                                                                                          // 9732
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9733
	}                                                                                                                     // 9734
	else if (typeof define === "function" && define.amd) {                                                                // 9735
		// AMD                                                                                                               // 9736
		define(["./core", "./cipher-core"], factory);                                                                        // 9737
	}                                                                                                                     // 9738
	else {                                                                                                                // 9739
		// Global (browser)                                                                                                  // 9740
		factory(root.CryptoJS);                                                                                              // 9741
	}                                                                                                                     // 9742
}(this, function (CryptoJS) {                                                                                          // 9743
                                                                                                                       // 9744
	/**                                                                                                                   // 9745
	 * A noop padding strategy.                                                                                           // 9746
	 */                                                                                                                   // 9747
	CryptoJS.pad.NoPadding = {                                                                                            // 9748
	    pad: function () {                                                                                                // 9749
	    },                                                                                                                // 9750
                                                                                                                       // 9751
	    unpad: function () {                                                                                              // 9752
	    }                                                                                                                 // 9753
	};                                                                                                                    // 9754
                                                                                                                       // 9755
                                                                                                                       // 9756
	return CryptoJS.pad.NoPadding;                                                                                        // 9757
                                                                                                                       // 9758
}));                                                                                                                   // 9759
},{"./cipher-core":51,"./core":52}],70:[function(require,module,exports){                                              // 9760
;(function (root, factory, undef) {                                                                                    // 9761
	if (typeof exports === "object") {                                                                                    // 9762
		// CommonJS                                                                                                          // 9763
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9764
	}                                                                                                                     // 9765
	else if (typeof define === "function" && define.amd) {                                                                // 9766
		// AMD                                                                                                               // 9767
		define(["./core", "./cipher-core"], factory);                                                                        // 9768
	}                                                                                                                     // 9769
	else {                                                                                                                // 9770
		// Global (browser)                                                                                                  // 9771
		factory(root.CryptoJS);                                                                                              // 9772
	}                                                                                                                     // 9773
}(this, function (CryptoJS) {                                                                                          // 9774
                                                                                                                       // 9775
	/**                                                                                                                   // 9776
	 * Zero padding strategy.                                                                                             // 9777
	 */                                                                                                                   // 9778
	CryptoJS.pad.ZeroPadding = {                                                                                          // 9779
	    pad: function (data, blockSize) {                                                                                 // 9780
	        // Shortcut                                                                                                   // 9781
	        var blockSizeBytes = blockSize * 4;                                                                           // 9782
                                                                                                                       // 9783
	        // Pad                                                                                                        // 9784
	        data.clamp();                                                                                                 // 9785
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);                       // 9786
	    },                                                                                                                // 9787
                                                                                                                       // 9788
	    unpad: function (data) {                                                                                          // 9789
	        // Shortcut                                                                                                   // 9790
	        var dataWords = data.words;                                                                                   // 9791
                                                                                                                       // 9792
	        // Unpad                                                                                                      // 9793
	        var i = data.sigBytes - 1;                                                                                    // 9794
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {                                               // 9795
	            i--;                                                                                                      // 9796
	        }                                                                                                             // 9797
	        data.sigBytes = i + 1;                                                                                        // 9798
	    }                                                                                                                 // 9799
	};                                                                                                                    // 9800
                                                                                                                       // 9801
                                                                                                                       // 9802
	return CryptoJS.pad.ZeroPadding;                                                                                      // 9803
                                                                                                                       // 9804
}));                                                                                                                   // 9805
},{"./cipher-core":51,"./core":52}],71:[function(require,module,exports){                                              // 9806
;(function (root, factory, undef) {                                                                                    // 9807
	if (typeof exports === "object") {                                                                                    // 9808
		// CommonJS                                                                                                          // 9809
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));                         // 9810
	}                                                                                                                     // 9811
	else if (typeof define === "function" && define.amd) {                                                                // 9812
		// AMD                                                                                                               // 9813
		define(["./core", "./sha1", "./hmac"], factory);                                                                     // 9814
	}                                                                                                                     // 9815
	else {                                                                                                                // 9816
		// Global (browser)                                                                                                  // 9817
		factory(root.CryptoJS);                                                                                              // 9818
	}                                                                                                                     // 9819
}(this, function (CryptoJS) {                                                                                          // 9820
                                                                                                                       // 9821
	(function () {                                                                                                        // 9822
	    // Shortcuts                                                                                                      // 9823
	    var C = CryptoJS;                                                                                                 // 9824
	    var C_lib = C.lib;                                                                                                // 9825
	    var Base = C_lib.Base;                                                                                            // 9826
	    var WordArray = C_lib.WordArray;                                                                                  // 9827
	    var C_algo = C.algo;                                                                                              // 9828
	    var SHA1 = C_algo.SHA1;                                                                                           // 9829
	    var HMAC = C_algo.HMAC;                                                                                           // 9830
                                                                                                                       // 9831
	    /**                                                                                                               // 9832
	     * Password-Based Key Derivation Function 2 algorithm.                                                            // 9833
	     */                                                                                                               // 9834
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({                                                                        // 9835
	        /**                                                                                                           // 9836
	         * Configuration options.                                                                                     // 9837
	         *                                                                                                            // 9838
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 9839
	         * @property {Hasher} hasher The hasher to use. Default: SHA1                                                 // 9840
	         * @property {number} iterations The number of iterations to perform. Default: 1                              // 9841
	         */                                                                                                           // 9842
	        cfg: Base.extend({                                                                                            // 9843
	            keySize: 128/32,                                                                                          // 9844
	            hasher: SHA1,                                                                                             // 9845
	            iterations: 1                                                                                             // 9846
	        }),                                                                                                           // 9847
                                                                                                                       // 9848
	        /**                                                                                                           // 9849
	         * Initializes a newly created key derivation function.                                                       // 9850
	         *                                                                                                            // 9851
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 9852
	         *                                                                                                            // 9853
	         * @example                                                                                                   // 9854
	         *                                                                                                            // 9855
	         *     var kdf = CryptoJS.algo.PBKDF2.create();                                                               // 9856
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });                                                 // 9857
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });                               // 9858
	         */                                                                                                           // 9859
	        init: function (cfg) {                                                                                        // 9860
	            this.cfg = this.cfg.extend(cfg);                                                                          // 9861
	        },                                                                                                            // 9862
                                                                                                                       // 9863
	        /**                                                                                                           // 9864
	         * Computes the Password-Based Key Derivation Function 2.                                                     // 9865
	         *                                                                                                            // 9866
	         * @param {WordArray|string} password The password.                                                           // 9867
	         * @param {WordArray|string} salt A salt.                                                                     // 9868
	         *                                                                                                            // 9869
	         * @return {WordArray} The derived key.                                                                       // 9870
	         *                                                                                                            // 9871
	         * @example                                                                                                   // 9872
	         *                                                                                                            // 9873
	         *     var key = kdf.compute(password, salt);                                                                 // 9874
	         */                                                                                                           // 9875
	        compute: function (password, salt) {                                                                          // 9876
	            // Shortcut                                                                                               // 9877
	            var cfg = this.cfg;                                                                                       // 9878
                                                                                                                       // 9879
	            // Init HMAC                                                                                              // 9880
	            var hmac = HMAC.create(cfg.hasher, password);                                                             // 9881
                                                                                                                       // 9882
	            // Initial values                                                                                         // 9883
	            var derivedKey = WordArray.create();                                                                      // 9884
	            var blockIndex = WordArray.create([0x00000001]);                                                          // 9885
                                                                                                                       // 9886
	            // Shortcuts                                                                                              // 9887
	            var derivedKeyWords = derivedKey.words;                                                                   // 9888
	            var blockIndexWords = blockIndex.words;                                                                   // 9889
	            var keySize = cfg.keySize;                                                                                // 9890
	            var iterations = cfg.iterations;                                                                          // 9891
                                                                                                                       // 9892
	            // Generate key                                                                                           // 9893
	            while (derivedKeyWords.length < keySize) {                                                                // 9894
	                var block = hmac.update(salt).finalize(blockIndex);                                                   // 9895
	                hmac.reset();                                                                                         // 9896
                                                                                                                       // 9897
	                // Shortcuts                                                                                          // 9898
	                var blockWords = block.words;                                                                         // 9899
	                var blockWordsLength = blockWords.length;                                                             // 9900
                                                                                                                       // 9901
	                // Iterations                                                                                         // 9902
	                var intermediate = block;                                                                             // 9903
	                for (var i = 1; i < iterations; i++) {                                                                // 9904
	                    intermediate = hmac.finalize(intermediate);                                                       // 9905
	                    hmac.reset();                                                                                     // 9906
                                                                                                                       // 9907
	                    // Shortcut                                                                                       // 9908
	                    var intermediateWords = intermediate.words;                                                       // 9909
                                                                                                                       // 9910
	                    // XOR intermediate with block                                                                    // 9911
	                    for (var j = 0; j < blockWordsLength; j++) {                                                      // 9912
	                        blockWords[j] ^= intermediateWords[j];                                                        // 9913
	                    }                                                                                                 // 9914
	                }                                                                                                     // 9915
                                                                                                                       // 9916
	                derivedKey.concat(block);                                                                             // 9917
	                blockIndexWords[0]++;                                                                                 // 9918
	            }                                                                                                         // 9919
	            derivedKey.sigBytes = keySize * 4;                                                                        // 9920
                                                                                                                       // 9921
	            return derivedKey;                                                                                        // 9922
	        }                                                                                                             // 9923
	    });                                                                                                               // 9924
                                                                                                                       // 9925
	    /**                                                                                                               // 9926
	     * Computes the Password-Based Key Derivation Function 2.                                                         // 9927
	     *                                                                                                                // 9928
	     * @param {WordArray|string} password The password.                                                               // 9929
	     * @param {WordArray|string} salt A salt.                                                                         // 9930
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 9931
	     *                                                                                                                // 9932
	     * @return {WordArray} The derived key.                                                                           // 9933
	     *                                                                                                                // 9934
	     * @static                                                                                                        // 9935
	     *                                                                                                                // 9936
	     * @example                                                                                                       // 9937
	     *                                                                                                                // 9938
	     *     var key = CryptoJS.PBKDF2(password, salt);                                                                 // 9939
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });                                                 // 9940
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });                               // 9941
	     */                                                                                                               // 9942
	    C.PBKDF2 = function (password, salt, cfg) {                                                                       // 9943
	        return PBKDF2.create(cfg).compute(password, salt);                                                            // 9944
	    };                                                                                                                // 9945
	}());                                                                                                                 // 9946
                                                                                                                       // 9947
                                                                                                                       // 9948
	return CryptoJS.PBKDF2;                                                                                               // 9949
                                                                                                                       // 9950
}));                                                                                                                   // 9951
},{"./core":52,"./hmac":57,"./sha1":76}],72:[function(require,module,exports){                                         // 9952
;(function (root, factory, undef) {                                                                                    // 9953
	if (typeof exports === "object") {                                                                                    // 9954
		// CommonJS                                                                                                          // 9955
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 9957
	else if (typeof define === "function" && define.amd) {                                                                // 9958
		// AMD                                                                                                               // 9959
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 9960
	}                                                                                                                     // 9961
	else {                                                                                                                // 9962
		// Global (browser)                                                                                                  // 9963
		factory(root.CryptoJS);                                                                                              // 9964
	}                                                                                                                     // 9965
}(this, function (CryptoJS) {                                                                                          // 9966
                                                                                                                       // 9967
	(function () {                                                                                                        // 9968
	    // Shortcuts                                                                                                      // 9969
	    var C = CryptoJS;                                                                                                 // 9970
	    var C_lib = C.lib;                                                                                                // 9971
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 9972
	    var C_algo = C.algo;                                                                                              // 9973
                                                                                                                       // 9974
	    // Reusable objects                                                                                               // 9975
	    var S  = [];                                                                                                      // 9976
	    var C_ = [];                                                                                                      // 9977
	    var G  = [];                                                                                                      // 9978
                                                                                                                       // 9979
	    /**                                                                                                               // 9980
	     * Rabbit stream cipher algorithm.                                                                                // 9981
	     *                                                                                                                // 9982
	     * This is a legacy version that neglected to convert the key to little-endian.                                   // 9983
	     * This error doesn't affect the cipher's security,                                                               // 9984
	     * but it does affect its compatibility with other implementations.                                               // 9985
	     */                                                                                                               // 9986
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({                                                    // 9987
	        _doReset: function () {                                                                                       // 9988
	            // Shortcuts                                                                                              // 9989
	            var K = this._key.words;                                                                                  // 9990
	            var iv = this.cfg.iv;                                                                                     // 9991
                                                                                                                       // 9992
	            // Generate initial state values                                                                          // 9993
	            var X = this._X = [                                                                                       // 9994
	                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 9995
	                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 9996
	                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 9997
	                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 9998
	            ];                                                                                                        // 9999
                                                                                                                       // 10000
	            // Generate initial counter values                                                                        // 10001
	            var C = this._C = [                                                                                       // 10002
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 10003
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 10004
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 10005
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 10006
	            ];                                                                                                        // 10007
                                                                                                                       // 10008
	            // Carry bit                                                                                              // 10009
	            this._b = 0;                                                                                              // 10010
                                                                                                                       // 10011
	            // Iterate the system four times                                                                          // 10012
	            for (var i = 0; i < 4; i++) {                                                                             // 10013
	                nextState.call(this);                                                                                 // 10014
	            }                                                                                                         // 10015
                                                                                                                       // 10016
	            // Modify the counters                                                                                    // 10017
	            for (var i = 0; i < 8; i++) {                                                                             // 10018
	                C[i] ^= X[(i + 4) & 7];                                                                               // 10019
	            }                                                                                                         // 10020
                                                                                                                       // 10021
	            // IV setup                                                                                               // 10022
	            if (iv) {                                                                                                 // 10023
	                // Shortcuts                                                                                          // 10024
	                var IV = iv.words;                                                                                    // 10025
	                var IV_0 = IV[0];                                                                                     // 10026
	                var IV_1 = IV[1];                                                                                     // 10027
                                                                                                                       // 10028
	                // Generate four subvectors                                                                           // 10029
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 10032
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 10033
                                                                                                                       // 10034
	                // Modify counter values                                                                              // 10035
	                C[0] ^= i0;                                                                                           // 10036
	                C[1] ^= i1;                                                                                           // 10037
	                C[2] ^= i2;                                                                                           // 10038
	                C[3] ^= i3;                                                                                           // 10039
	                C[4] ^= i0;                                                                                           // 10040
	                C[5] ^= i1;                                                                                           // 10041
	                C[6] ^= i2;                                                                                           // 10042
	                C[7] ^= i3;                                                                                           // 10043
                                                                                                                       // 10044
	                // Iterate the system four times                                                                      // 10045
	                for (var i = 0; i < 4; i++) {                                                                         // 10046
	                    nextState.call(this);                                                                             // 10047
	                }                                                                                                     // 10048
	            }                                                                                                         // 10049
	        },                                                                                                            // 10050
                                                                                                                       // 10051
	        _doProcessBlock: function (M, offset) {                                                                       // 10052
	            // Shortcut                                                                                               // 10053
	            var X = this._X;                                                                                          // 10054
                                                                                                                       // 10055
	            // Iterate the system                                                                                     // 10056
	            nextState.call(this);                                                                                     // 10057
                                                                                                                       // 10058
	            // Generate four keystream words                                                                          // 10059
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 10060
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 10061
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 10062
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 10063
                                                                                                                       // 10064
	            for (var i = 0; i < 4; i++) {                                                                             // 10065
	                // Swap endian                                                                                        // 10066
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 10067
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 10068
                                                                                                                       // 10069
	                // Encrypt                                                                                            // 10070
	                M[offset + i] ^= S[i];                                                                                // 10071
	            }                                                                                                         // 10072
	        },                                                                                                            // 10073
                                                                                                                       // 10074
	        blockSize: 128/32,                                                                                            // 10075
                                                                                                                       // 10076
	        ivSize: 64/32                                                                                                 // 10077
	    });                                                                                                               // 10078
                                                                                                                       // 10079
	    function nextState() {                                                                                            // 10080
	        // Shortcuts                                                                                                  // 10081
	        var X = this._X;                                                                                              // 10082
	        var C = this._C;                                                                                              // 10083
                                                                                                                       // 10084
	        // Save old counter values                                                                                    // 10085
	        for (var i = 0; i < 8; i++) {                                                                                 // 10086
	            C_[i] = C[i];                                                                                             // 10087
	        }                                                                                                             // 10088
                                                                                                                       // 10089
	        // Calculate new counter values                                                                               // 10090
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 10091
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 10092
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 10093
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 10094
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 10095
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 10096
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 10097
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 10098
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 10099
                                                                                                                       // 10100
	        // Calculate the g-values                                                                                     // 10101
	        for (var i = 0; i < 8; i++) {                                                                                 // 10102
	            var gx = X[i] + C[i];                                                                                     // 10103
                                                                                                                       // 10104
	            // Construct high and low argument for squaring                                                           // 10105
	            var ga = gx & 0xffff;                                                                                     // 10106
	            var gb = gx >>> 16;                                                                                       // 10107
                                                                                                                       // 10108
	            // Calculate high and low result of squaring                                                              // 10109
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 10110
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 10111
                                                                                                                       // 10112
	            // High XOR low                                                                                           // 10113
	            G[i] = gh ^ gl;                                                                                           // 10114
	        }                                                                                                             // 10115
                                                                                                                       // 10116
	        // Calculate new state values                                                                                 // 10117
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 10118
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 10119
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 10120
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 10121
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 10122
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 10123
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 10124
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 10125
	    }                                                                                                                 // 10126
                                                                                                                       // 10127
	    /**                                                                                                               // 10128
	     * Shortcut functions to the cipher's object interface.                                                           // 10129
	     *                                                                                                                // 10130
	     * @example                                                                                                       // 10131
	     *                                                                                                                // 10132
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);                                         // 10133
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);                                      // 10134
	     */                                                                                                               // 10135
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);                                                        // 10136
	}());                                                                                                                 // 10137
                                                                                                                       // 10138
                                                                                                                       // 10139
	return CryptoJS.RabbitLegacy;                                                                                         // 10140
                                                                                                                       // 10141
}));                                                                                                                   // 10142
},{"./cipher-core":51,"./core":52,"./enc-base64":53,"./evpkdf":55,"./md5":60}],73:[function(require,module,exports){   // 10143
;(function (root, factory, undef) {                                                                                    // 10144
	if (typeof exports === "object") {                                                                                    // 10145
		// CommonJS                                                                                                          // 10146
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10148
	else if (typeof define === "function" && define.amd) {                                                                // 10149
		// AMD                                                                                                               // 10150
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10151
	}                                                                                                                     // 10152
	else {                                                                                                                // 10153
		// Global (browser)                                                                                                  // 10154
		factory(root.CryptoJS);                                                                                              // 10155
	}                                                                                                                     // 10156
}(this, function (CryptoJS) {                                                                                          // 10157
                                                                                                                       // 10158
	(function () {                                                                                                        // 10159
	    // Shortcuts                                                                                                      // 10160
	    var C = CryptoJS;                                                                                                 // 10161
	    var C_lib = C.lib;                                                                                                // 10162
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10163
	    var C_algo = C.algo;                                                                                              // 10164
                                                                                                                       // 10165
	    // Reusable objects                                                                                               // 10166
	    var S  = [];                                                                                                      // 10167
	    var C_ = [];                                                                                                      // 10168
	    var G  = [];                                                                                                      // 10169
                                                                                                                       // 10170
	    /**                                                                                                               // 10171
	     * Rabbit stream cipher algorithm                                                                                 // 10172
	     */                                                                                                               // 10173
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({                                                                // 10174
	        _doReset: function () {                                                                                       // 10175
	            // Shortcuts                                                                                              // 10176
	            var K = this._key.words;                                                                                  // 10177
	            var iv = this.cfg.iv;                                                                                     // 10178
                                                                                                                       // 10179
	            // Swap endian                                                                                            // 10180
	            for (var i = 0; i < 4; i++) {                                                                             // 10181
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |                                                // 10182
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);                                                 // 10183
	            }                                                                                                         // 10184
                                                                                                                       // 10185
	            // Generate initial state values                                                                          // 10186
	            var X = this._X = [                                                                                       // 10187
	                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 10188
	                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 10189
	                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 10190
	                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 10191
	            ];                                                                                                        // 10192
                                                                                                                       // 10193
	            // Generate initial counter values                                                                        // 10194
	            var C = this._C = [                                                                                       // 10195
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 10196
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 10197
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 10198
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 10199
	            ];                                                                                                        // 10200
                                                                                                                       // 10201
	            // Carry bit                                                                                              // 10202
	            this._b = 0;                                                                                              // 10203
                                                                                                                       // 10204
	            // Iterate the system four times                                                                          // 10205
	            for (var i = 0; i < 4; i++) {                                                                             // 10206
	                nextState.call(this);                                                                                 // 10207
	            }                                                                                                         // 10208
                                                                                                                       // 10209
	            // Modify the counters                                                                                    // 10210
	            for (var i = 0; i < 8; i++) {                                                                             // 10211
	                C[i] ^= X[(i + 4) & 7];                                                                               // 10212
	            }                                                                                                         // 10213
                                                                                                                       // 10214
	            // IV setup                                                                                               // 10215
	            if (iv) {                                                                                                 // 10216
	                // Shortcuts                                                                                          // 10217
	                var IV = iv.words;                                                                                    // 10218
	                var IV_0 = IV[0];                                                                                     // 10219
	                var IV_1 = IV[1];                                                                                     // 10220
                                                                                                                       // 10221
	                // Generate four subvectors                                                                           // 10222
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 10225
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 10226
                                                                                                                       // 10227
	                // Modify counter values                                                                              // 10228
	                C[0] ^= i0;                                                                                           // 10229
	                C[1] ^= i1;                                                                                           // 10230
	                C[2] ^= i2;                                                                                           // 10231
	                C[3] ^= i3;                                                                                           // 10232
	                C[4] ^= i0;                                                                                           // 10233
	                C[5] ^= i1;                                                                                           // 10234
	                C[6] ^= i2;                                                                                           // 10235
	                C[7] ^= i3;                                                                                           // 10236
                                                                                                                       // 10237
	                // Iterate the system four times                                                                      // 10238
	                for (var i = 0; i < 4; i++) {                                                                         // 10239
	                    nextState.call(this);                                                                             // 10240
	                }                                                                                                     // 10241
	            }                                                                                                         // 10242
	        },                                                                                                            // 10243
                                                                                                                       // 10244
	        _doProcessBlock: function (M, offset) {                                                                       // 10245
	            // Shortcut                                                                                               // 10246
	            var X = this._X;                                                                                          // 10247
                                                                                                                       // 10248
	            // Iterate the system                                                                                     // 10249
	            nextState.call(this);                                                                                     // 10250
                                                                                                                       // 10251
	            // Generate four keystream words                                                                          // 10252
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 10253
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 10254
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 10255
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 10256
                                                                                                                       // 10257
	            for (var i = 0; i < 4; i++) {                                                                             // 10258
	                // Swap endian                                                                                        // 10259
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 10260
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 10261
                                                                                                                       // 10262
	                // Encrypt                                                                                            // 10263
	                M[offset + i] ^= S[i];                                                                                // 10264
	            }                                                                                                         // 10265
	        },                                                                                                            // 10266
                                                                                                                       // 10267
	        blockSize: 128/32,                                                                                            // 10268
                                                                                                                       // 10269
	        ivSize: 64/32                                                                                                 // 10270
	    });                                                                                                               // 10271
                                                                                                                       // 10272
	    function nextState() {                                                                                            // 10273
	        // Shortcuts                                                                                                  // 10274
	        var X = this._X;                                                                                              // 10275
	        var C = this._C;                                                                                              // 10276
                                                                                                                       // 10277
	        // Save old counter values                                                                                    // 10278
	        for (var i = 0; i < 8; i++) {                                                                                 // 10279
	            C_[i] = C[i];                                                                                             // 10280
	        }                                                                                                             // 10281
                                                                                                                       // 10282
	        // Calculate new counter values                                                                               // 10283
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 10284
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 10285
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 10286
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 10287
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 10288
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 10289
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 10290
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 10291
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 10292
                                                                                                                       // 10293
	        // Calculate the g-values                                                                                     // 10294
	        for (var i = 0; i < 8; i++) {                                                                                 // 10295
	            var gx = X[i] + C[i];                                                                                     // 10296
                                                                                                                       // 10297
	            // Construct high and low argument for squaring                                                           // 10298
	            var ga = gx & 0xffff;                                                                                     // 10299
	            var gb = gx >>> 16;                                                                                       // 10300
                                                                                                                       // 10301
	            // Calculate high and low result of squaring                                                              // 10302
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 10303
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 10304
                                                                                                                       // 10305
	            // High XOR low                                                                                           // 10306
	            G[i] = gh ^ gl;                                                                                           // 10307
	        }                                                                                                             // 10308
                                                                                                                       // 10309
	        // Calculate new state values                                                                                 // 10310
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 10311
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 10312
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 10313
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 10314
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 10315
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 10316
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 10317
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 10318
	    }                                                                                                                 // 10319
                                                                                                                       // 10320
	    /**                                                                                                               // 10321
	     * Shortcut functions to the cipher's object interface.                                                           // 10322
	     *                                                                                                                // 10323
	     * @example                                                                                                       // 10324
	     *                                                                                                                // 10325
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);                                               // 10326
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);                                            // 10327
	     */                                                                                                               // 10328
	    C.Rabbit = StreamCipher._createHelper(Rabbit);                                                                    // 10329
	}());                                                                                                                 // 10330
                                                                                                                       // 10331
                                                                                                                       // 10332
	return CryptoJS.Rabbit;                                                                                               // 10333
                                                                                                                       // 10334
}));                                                                                                                   // 10335
},{"./cipher-core":51,"./core":52,"./enc-base64":53,"./evpkdf":55,"./md5":60}],74:[function(require,module,exports){   // 10336
;(function (root, factory, undef) {                                                                                    // 10337
	if (typeof exports === "object") {                                                                                    // 10338
		// CommonJS                                                                                                          // 10339
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10341
	else if (typeof define === "function" && define.amd) {                                                                // 10342
		// AMD                                                                                                               // 10343
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10344
	}                                                                                                                     // 10345
	else {                                                                                                                // 10346
		// Global (browser)                                                                                                  // 10347
		factory(root.CryptoJS);                                                                                              // 10348
	}                                                                                                                     // 10349
}(this, function (CryptoJS) {                                                                                          // 10350
                                                                                                                       // 10351
	(function () {                                                                                                        // 10352
	    // Shortcuts                                                                                                      // 10353
	    var C = CryptoJS;                                                                                                 // 10354
	    var C_lib = C.lib;                                                                                                // 10355
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10356
	    var C_algo = C.algo;                                                                                              // 10357
                                                                                                                       // 10358
	    /**                                                                                                               // 10359
	     * RC4 stream cipher algorithm.                                                                                   // 10360
	     */                                                                                                               // 10361
	    var RC4 = C_algo.RC4 = StreamCipher.extend({                                                                      // 10362
	        _doReset: function () {                                                                                       // 10363
	            // Shortcuts                                                                                              // 10364
	            var key = this._key;                                                                                      // 10365
	            var keyWords = key.words;                                                                                 // 10366
	            var keySigBytes = key.sigBytes;                                                                           // 10367
                                                                                                                       // 10368
	            // Init sbox                                                                                              // 10369
	            var S = this._S = [];                                                                                     // 10370
	            for (var i = 0; i < 256; i++) {                                                                           // 10371
	                S[i] = i;                                                                                             // 10372
	            }                                                                                                         // 10373
                                                                                                                       // 10374
	            // Key setup                                                                                              // 10375
	            for (var i = 0, j = 0; i < 256; i++) {                                                                    // 10376
	                var keyByteIndex = i % keySigBytes;                                                                   // 10377
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;                // 10378
                                                                                                                       // 10379
	                j = (j + S[i] + keyByte) % 256;                                                                       // 10380
                                                                                                                       // 10381
	                // Swap                                                                                               // 10382
	                var t = S[i];                                                                                         // 10383
	                S[i] = S[j];                                                                                          // 10384
	                S[j] = t;                                                                                             // 10385
	            }                                                                                                         // 10386
                                                                                                                       // 10387
	            // Counters                                                                                               // 10388
	            this._i = this._j = 0;                                                                                    // 10389
	        },                                                                                                            // 10390
                                                                                                                       // 10391
	        _doProcessBlock: function (M, offset) {                                                                       // 10392
	            M[offset] ^= generateKeystreamWord.call(this);                                                            // 10393
	        },                                                                                                            // 10394
                                                                                                                       // 10395
	        keySize: 256/32,                                                                                              // 10396
                                                                                                                       // 10397
	        ivSize: 0                                                                                                     // 10398
	    });                                                                                                               // 10399
                                                                                                                       // 10400
	    function generateKeystreamWord() {                                                                                // 10401
	        // Shortcuts                                                                                                  // 10402
	        var S = this._S;                                                                                              // 10403
	        var i = this._i;                                                                                              // 10404
	        var j = this._j;                                                                                              // 10405
                                                                                                                       // 10406
	        // Generate keystream word                                                                                    // 10407
	        var keystreamWord = 0;                                                                                        // 10408
	        for (var n = 0; n < 4; n++) {                                                                                 // 10409
	            i = (i + 1) % 256;                                                                                        // 10410
	            j = (j + S[i]) % 256;                                                                                     // 10411
                                                                                                                       // 10412
	            // Swap                                                                                                   // 10413
	            var t = S[i];                                                                                             // 10414
	            S[i] = S[j];                                                                                              // 10415
	            S[j] = t;                                                                                                 // 10416
                                                                                                                       // 10417
	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);                                                  // 10418
	        }                                                                                                             // 10419
                                                                                                                       // 10420
	        // Update counters                                                                                            // 10421
	        this._i = i;                                                                                                  // 10422
	        this._j = j;                                                                                                  // 10423
                                                                                                                       // 10424
	        return keystreamWord;                                                                                         // 10425
	    }                                                                                                                 // 10426
                                                                                                                       // 10427
	    /**                                                                                                               // 10428
	     * Shortcut functions to the cipher's object interface.                                                           // 10429
	     *                                                                                                                // 10430
	     * @example                                                                                                       // 10431
	     *                                                                                                                // 10432
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);                                                  // 10433
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);                                               // 10434
	     */                                                                                                               // 10435
	    C.RC4 = StreamCipher._createHelper(RC4);                                                                          // 10436
                                                                                                                       // 10437
	    /**                                                                                                               // 10438
	     * Modified RC4 stream cipher algorithm.                                                                          // 10439
	     */                                                                                                               // 10440
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({                                                                       // 10441
	        /**                                                                                                           // 10442
	         * Configuration options.                                                                                     // 10443
	         *                                                                                                            // 10444
	         * @property {number} drop The number of keystream words to drop. Default 192                                 // 10445
	         */                                                                                                           // 10446
	        cfg: RC4.cfg.extend({                                                                                         // 10447
	            drop: 192                                                                                                 // 10448
	        }),                                                                                                           // 10449
                                                                                                                       // 10450
	        _doReset: function () {                                                                                       // 10451
	            RC4._doReset.call(this);                                                                                  // 10452
                                                                                                                       // 10453
	            // Drop                                                                                                   // 10454
	            for (var i = this.cfg.drop; i > 0; i--) {                                                                 // 10455
	                generateKeystreamWord.call(this);                                                                     // 10456
	            }                                                                                                         // 10457
	        }                                                                                                             // 10458
	    });                                                                                                               // 10459
                                                                                                                       // 10460
	    /**                                                                                                               // 10461
	     * Shortcut functions to the cipher's object interface.                                                           // 10462
	     *                                                                                                                // 10463
	     * @example                                                                                                       // 10464
	     *                                                                                                                // 10465
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);                                              // 10466
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);                                           // 10467
	     */                                                                                                               // 10468
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);                                                                  // 10469
	}());                                                                                                                 // 10470
                                                                                                                       // 10471
                                                                                                                       // 10472
	return CryptoJS.RC4;                                                                                                  // 10473
                                                                                                                       // 10474
}));                                                                                                                   // 10475
},{"./cipher-core":51,"./core":52,"./enc-base64":53,"./evpkdf":55,"./md5":60}],75:[function(require,module,exports){   // 10476
;(function (root, factory) {                                                                                           // 10477
	if (typeof exports === "object") {                                                                                    // 10478
		// CommonJS                                                                                                          // 10479
		module.exports = exports = factory(require("./core"));                                                               // 10480
	}                                                                                                                     // 10481
	else if (typeof define === "function" && define.amd) {                                                                // 10482
		// AMD                                                                                                               // 10483
		define(["./core"], factory);                                                                                         // 10484
	}                                                                                                                     // 10485
	else {                                                                                                                // 10486
		// Global (browser)                                                                                                  // 10487
		factory(root.CryptoJS);                                                                                              // 10488
	}                                                                                                                     // 10489
}(this, function (CryptoJS) {                                                                                          // 10490
                                                                                                                       // 10491
	/** @preserve                                                                                                         // 10492
	(c) 2012 by Cédric Mesnil. All rights reserved.                                                                       // 10493
                                                                                                                       // 10494
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
                                                                                                                       // 10496
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
                                                                                                                       // 10499
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/                                                                                                                    // 10501
                                                                                                                       // 10502
	(function (Math) {                                                                                                    // 10503
	    // Shortcuts                                                                                                      // 10504
	    var C = CryptoJS;                                                                                                 // 10505
	    var C_lib = C.lib;                                                                                                // 10506
	    var WordArray = C_lib.WordArray;                                                                                  // 10507
	    var Hasher = C_lib.Hasher;                                                                                        // 10508
	    var C_algo = C.algo;                                                                                              // 10509
                                                                                                                       // 10510
	    // Constants table                                                                                                // 10511
	    var _zl = WordArray.create([                                                                                      // 10512
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,                                                // 10513
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,                                                // 10514
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,                                                // 10515
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,                                                // 10516
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);                                              // 10517
	    var _zr = WordArray.create([                                                                                      // 10518
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,                                                // 10519
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,                                                // 10520
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,                                               // 10521
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,                                                // 10522
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);                                             // 10523
	    var _sl = WordArray.create([                                                                                      // 10524
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,                                              // 10525
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,                                                // 10526
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,                                               // 10527
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,                                             // 10528
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);                                             // 10529
	    var _sr = WordArray.create([                                                                                      // 10530
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,                                                // 10531
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,                                                // 10532
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,                                                // 10533
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,                                               // 10534
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);                                             // 10535
                                                                                                                       // 10536
	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);                       // 10537
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);                       // 10538
                                                                                                                       // 10539
	    /**                                                                                                               // 10540
	     * RIPEMD160 hash algorithm.                                                                                      // 10541
	     */                                                                                                               // 10542
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({                                                                // 10543
	        _doReset: function () {                                                                                       // 10544
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);             // 10545
	        },                                                                                                            // 10546
                                                                                                                       // 10547
	        _doProcessBlock: function (M, offset) {                                                                       // 10548
                                                                                                                       // 10549
	            // Swap endian                                                                                            // 10550
	            for (var i = 0; i < 16; i++) {                                                                            // 10551
	                // Shortcuts                                                                                          // 10552
	                var offset_i = offset + i;                                                                            // 10553
	                var M_offset_i = M[offset_i];                                                                         // 10554
                                                                                                                       // 10555
	                // Swap                                                                                               // 10556
	                M[offset_i] = (                                                                                       // 10557
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 10558
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 10559
	                );                                                                                                    // 10560
	            }                                                                                                         // 10561
	            // Shortcut                                                                                               // 10562
	            var H  = this._hash.words;                                                                                // 10563
	            var hl = _hl.words;                                                                                       // 10564
	            var hr = _hr.words;                                                                                       // 10565
	            var zl = _zl.words;                                                                                       // 10566
	            var zr = _zr.words;                                                                                       // 10567
	            var sl = _sl.words;                                                                                       // 10568
	            var sr = _sr.words;                                                                                       // 10569
                                                                                                                       // 10570
	            // Working variables                                                                                      // 10571
	            var al, bl, cl, dl, el;                                                                                   // 10572
	            var ar, br, cr, dr, er;                                                                                   // 10573
                                                                                                                       // 10574
	            ar = al = H[0];                                                                                           // 10575
	            br = bl = H[1];                                                                                           // 10576
	            cr = cl = H[2];                                                                                           // 10577
	            dr = dl = H[3];                                                                                           // 10578
	            er = el = H[4];                                                                                           // 10579
	            // Computation                                                                                            // 10580
	            var t;                                                                                                    // 10581
	            for (var i = 0; i < 80; i += 1) {                                                                         // 10582
	                t = (al +  M[offset+zl[i]])|0;                                                                        // 10583
	                if (i<16){                                                                                            // 10584
		            t +=  f1(bl,cl,dl) + hl[0];                                                                              // 10585
	                } else if (i<32) {                                                                                    // 10586
		            t +=  f2(bl,cl,dl) + hl[1];                                                                              // 10587
	                } else if (i<48) {                                                                                    // 10588
		            t +=  f3(bl,cl,dl) + hl[2];                                                                              // 10589
	                } else if (i<64) {                                                                                    // 10590
		            t +=  f4(bl,cl,dl) + hl[3];                                                                              // 10591
	                } else {// if (i<80) {                                                                                // 10592
		            t +=  f5(bl,cl,dl) + hl[4];                                                                              // 10593
	                }                                                                                                     // 10594
	                t = t|0;                                                                                              // 10595
	                t =  rotl(t,sl[i]);                                                                                   // 10596
	                t = (t+el)|0;                                                                                         // 10597
	                al = el;                                                                                              // 10598
	                el = dl;                                                                                              // 10599
	                dl = rotl(cl, 10);                                                                                    // 10600
	                cl = bl;                                                                                              // 10601
	                bl = t;                                                                                               // 10602
                                                                                                                       // 10603
	                t = (ar + M[offset+zr[i]])|0;                                                                         // 10604
	                if (i<16){                                                                                            // 10605
		            t +=  f5(br,cr,dr) + hr[0];                                                                              // 10606
	                } else if (i<32) {                                                                                    // 10607
		            t +=  f4(br,cr,dr) + hr[1];                                                                              // 10608
	                } else if (i<48) {                                                                                    // 10609
		            t +=  f3(br,cr,dr) + hr[2];                                                                              // 10610
	                } else if (i<64) {                                                                                    // 10611
		            t +=  f2(br,cr,dr) + hr[3];                                                                              // 10612
	                } else {// if (i<80) {                                                                                // 10613
		            t +=  f1(br,cr,dr) + hr[4];                                                                              // 10614
	                }                                                                                                     // 10615
	                t = t|0;                                                                                              // 10616
	                t =  rotl(t,sr[i]) ;                                                                                  // 10617
	                t = (t+er)|0;                                                                                         // 10618
	                ar = er;                                                                                              // 10619
	                er = dr;                                                                                              // 10620
	                dr = rotl(cr, 10);                                                                                    // 10621
	                cr = br;                                                                                              // 10622
	                br = t;                                                                                               // 10623
	            }                                                                                                         // 10624
	            // Intermediate hash value                                                                                // 10625
	            t    = (H[1] + cl + dr)|0;                                                                                // 10626
	            H[1] = (H[2] + dl + er)|0;                                                                                // 10627
	            H[2] = (H[3] + el + ar)|0;                                                                                // 10628
	            H[3] = (H[4] + al + br)|0;                                                                                // 10629
	            H[4] = (H[0] + bl + cr)|0;                                                                                // 10630
	            H[0] =  t;                                                                                                // 10631
	        },                                                                                                            // 10632
                                                                                                                       // 10633
	        _doFinalize: function () {                                                                                    // 10634
	            // Shortcuts                                                                                              // 10635
	            var data = this._data;                                                                                    // 10636
	            var dataWords = data.words;                                                                               // 10637
                                                                                                                       // 10638
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10639
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 10640
                                                                                                                       // 10641
	            // Add padding                                                                                            // 10642
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10643
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 10644
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |                                           // 10645
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)                                             // 10646
	            );                                                                                                        // 10647
	            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 10648
                                                                                                                       // 10649
	            // Hash final blocks                                                                                      // 10650
	            this._process();                                                                                          // 10651
                                                                                                                       // 10652
	            // Shortcuts                                                                                              // 10653
	            var hash = this._hash;                                                                                    // 10654
	            var H = hash.words;                                                                                       // 10655
                                                                                                                       // 10656
	            // Swap endian                                                                                            // 10657
	            for (var i = 0; i < 5; i++) {                                                                             // 10658
	                // Shortcut                                                                                           // 10659
	                var H_i = H[i];                                                                                       // 10660
                                                                                                                       // 10661
	                // Swap                                                                                               // 10662
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 10663
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 10664
	            }                                                                                                         // 10665
                                                                                                                       // 10666
	            // Return final computed hash                                                                             // 10667
	            return hash;                                                                                              // 10668
	        },                                                                                                            // 10669
                                                                                                                       // 10670
	        clone: function () {                                                                                          // 10671
	            var clone = Hasher.clone.call(this);                                                                      // 10672
	            clone._hash = this._hash.clone();                                                                         // 10673
                                                                                                                       // 10674
	            return clone;                                                                                             // 10675
	        }                                                                                                             // 10676
	    });                                                                                                               // 10677
                                                                                                                       // 10678
                                                                                                                       // 10679
	    function f1(x, y, z) {                                                                                            // 10680
	        return ((x) ^ (y) ^ (z));                                                                                     // 10681
                                                                                                                       // 10682
	    }                                                                                                                 // 10683
                                                                                                                       // 10684
	    function f2(x, y, z) {                                                                                            // 10685
	        return (((x)&(y)) | ((~x)&(z)));                                                                              // 10686
	    }                                                                                                                 // 10687
                                                                                                                       // 10688
	    function f3(x, y, z) {                                                                                            // 10689
	        return (((x) | (~(y))) ^ (z));                                                                                // 10690
	    }                                                                                                                 // 10691
                                                                                                                       // 10692
	    function f4(x, y, z) {                                                                                            // 10693
	        return (((x) & (z)) | ((y)&(~(z))));                                                                          // 10694
	    }                                                                                                                 // 10695
                                                                                                                       // 10696
	    function f5(x, y, z) {                                                                                            // 10697
	        return ((x) ^ ((y) |(~(z))));                                                                                 // 10698
                                                                                                                       // 10699
	    }                                                                                                                 // 10700
                                                                                                                       // 10701
	    function rotl(x,n) {                                                                                              // 10702
	        return (x<<n) | (x>>>(32-n));                                                                                 // 10703
	    }                                                                                                                 // 10704
                                                                                                                       // 10705
                                                                                                                       // 10706
	    /**                                                                                                               // 10707
	     * Shortcut function to the hasher's object interface.                                                            // 10708
	     *                                                                                                                // 10709
	     * @param {WordArray|string} message The message to hash.                                                         // 10710
	     *                                                                                                                // 10711
	     * @return {WordArray} The hash.                                                                                  // 10712
	     *                                                                                                                // 10713
	     * @static                                                                                                        // 10714
	     *                                                                                                                // 10715
	     * @example                                                                                                       // 10716
	     *                                                                                                                // 10717
	     *     var hash = CryptoJS.RIPEMD160('message');                                                                  // 10718
	     *     var hash = CryptoJS.RIPEMD160(wordArray);                                                                  // 10719
	     */                                                                                                               // 10720
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);                                                                    // 10721
                                                                                                                       // 10722
	    /**                                                                                                               // 10723
	     * Shortcut function to the HMAC's object interface.                                                              // 10724
	     *                                                                                                                // 10725
	     * @param {WordArray|string} message The message to hash.                                                         // 10726
	     * @param {WordArray|string} key The secret key.                                                                  // 10727
	     *                                                                                                                // 10728
	     * @return {WordArray} The HMAC.                                                                                  // 10729
	     *                                                                                                                // 10730
	     * @static                                                                                                        // 10731
	     *                                                                                                                // 10732
	     * @example                                                                                                       // 10733
	     *                                                                                                                // 10734
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);                                                           // 10735
	     */                                                                                                               // 10736
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);                                                            // 10737
	}(Math));                                                                                                             // 10738
                                                                                                                       // 10739
                                                                                                                       // 10740
	return CryptoJS.RIPEMD160;                                                                                            // 10741
                                                                                                                       // 10742
}));                                                                                                                   // 10743
},{"./core":52}],76:[function(require,module,exports){                                                                 // 10744
;(function (root, factory) {                                                                                           // 10745
	if (typeof exports === "object") {                                                                                    // 10746
		// CommonJS                                                                                                          // 10747
		module.exports = exports = factory(require("./core"));                                                               // 10748
	}                                                                                                                     // 10749
	else if (typeof define === "function" && define.amd) {                                                                // 10750
		// AMD                                                                                                               // 10751
		define(["./core"], factory);                                                                                         // 10752
	}                                                                                                                     // 10753
	else {                                                                                                                // 10754
		// Global (browser)                                                                                                  // 10755
		factory(root.CryptoJS);                                                                                              // 10756
	}                                                                                                                     // 10757
}(this, function (CryptoJS) {                                                                                          // 10758
                                                                                                                       // 10759
	(function () {                                                                                                        // 10760
	    // Shortcuts                                                                                                      // 10761
	    var C = CryptoJS;                                                                                                 // 10762
	    var C_lib = C.lib;                                                                                                // 10763
	    var WordArray = C_lib.WordArray;                                                                                  // 10764
	    var Hasher = C_lib.Hasher;                                                                                        // 10765
	    var C_algo = C.algo;                                                                                              // 10766
                                                                                                                       // 10767
	    // Reusable object                                                                                                // 10768
	    var W = [];                                                                                                       // 10769
                                                                                                                       // 10770
	    /**                                                                                                               // 10771
	     * SHA-1 hash algorithm.                                                                                          // 10772
	     */                                                                                                               // 10773
	    var SHA1 = C_algo.SHA1 = Hasher.extend({                                                                          // 10774
	        _doReset: function () {                                                                                       // 10775
	            this._hash = new WordArray.init([                                                                         // 10776
	                0x67452301, 0xefcdab89,                                                                               // 10777
	                0x98badcfe, 0x10325476,                                                                               // 10778
	                0xc3d2e1f0                                                                                            // 10779
	            ]);                                                                                                       // 10780
	        },                                                                                                            // 10781
                                                                                                                       // 10782
	        _doProcessBlock: function (M, offset) {                                                                       // 10783
	            // Shortcut                                                                                               // 10784
	            var H = this._hash.words;                                                                                 // 10785
                                                                                                                       // 10786
	            // Working variables                                                                                      // 10787
	            var a = H[0];                                                                                             // 10788
	            var b = H[1];                                                                                             // 10789
	            var c = H[2];                                                                                             // 10790
	            var d = H[3];                                                                                             // 10791
	            var e = H[4];                                                                                             // 10792
                                                                                                                       // 10793
	            // Computation                                                                                            // 10794
	            for (var i = 0; i < 80; i++) {                                                                            // 10795
	                if (i < 16) {                                                                                         // 10796
	                    W[i] = M[offset + i] | 0;                                                                         // 10797
	                } else {                                                                                              // 10798
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];                                              // 10799
	                    W[i] = (n << 1) | (n >>> 31);                                                                     // 10800
	                }                                                                                                     // 10801
                                                                                                                       // 10802
	                var t = ((a << 5) | (a >>> 27)) + e + W[i];                                                           // 10803
	                if (i < 20) {                                                                                         // 10804
	                    t += ((b & c) | (~b & d)) + 0x5a827999;                                                           // 10805
	                } else if (i < 40) {                                                                                  // 10806
	                    t += (b ^ c ^ d) + 0x6ed9eba1;                                                                    // 10807
	                } else if (i < 60) {                                                                                  // 10808
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;                                                  // 10809
	                } else /* if (i < 80) */ {                                                                            // 10810
	                    t += (b ^ c ^ d) - 0x359d3e2a;                                                                    // 10811
	                }                                                                                                     // 10812
                                                                                                                       // 10813
	                e = d;                                                                                                // 10814
	                d = c;                                                                                                // 10815
	                c = (b << 30) | (b >>> 2);                                                                            // 10816
	                b = a;                                                                                                // 10817
	                a = t;                                                                                                // 10818
	            }                                                                                                         // 10819
                                                                                                                       // 10820
	            // Intermediate hash value                                                                                // 10821
	            H[0] = (H[0] + a) | 0;                                                                                    // 10822
	            H[1] = (H[1] + b) | 0;                                                                                    // 10823
	            H[2] = (H[2] + c) | 0;                                                                                    // 10824
	            H[3] = (H[3] + d) | 0;                                                                                    // 10825
	            H[4] = (H[4] + e) | 0;                                                                                    // 10826
	        },                                                                                                            // 10827
                                                                                                                       // 10828
	        _doFinalize: function () {                                                                                    // 10829
	            // Shortcuts                                                                                              // 10830
	            var data = this._data;                                                                                    // 10831
	            var dataWords = data.words;                                                                               // 10832
                                                                                                                       // 10833
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10834
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 10835
                                                                                                                       // 10836
	            // Add padding                                                                                            // 10837
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10838
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 10839
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 10840
	            data.sigBytes = dataWords.length * 4;                                                                     // 10841
                                                                                                                       // 10842
	            // Hash final blocks                                                                                      // 10843
	            this._process();                                                                                          // 10844
                                                                                                                       // 10845
	            // Return final computed hash                                                                             // 10846
	            return this._hash;                                                                                        // 10847
	        },                                                                                                            // 10848
                                                                                                                       // 10849
	        clone: function () {                                                                                          // 10850
	            var clone = Hasher.clone.call(this);                                                                      // 10851
	            clone._hash = this._hash.clone();                                                                         // 10852
                                                                                                                       // 10853
	            return clone;                                                                                             // 10854
	        }                                                                                                             // 10855
	    });                                                                                                               // 10856
                                                                                                                       // 10857
	    /**                                                                                                               // 10858
	     * Shortcut function to the hasher's object interface.                                                            // 10859
	     *                                                                                                                // 10860
	     * @param {WordArray|string} message The message to hash.                                                         // 10861
	     *                                                                                                                // 10862
	     * @return {WordArray} The hash.                                                                                  // 10863
	     *                                                                                                                // 10864
	     * @static                                                                                                        // 10865
	     *                                                                                                                // 10866
	     * @example                                                                                                       // 10867
	     *                                                                                                                // 10868
	     *     var hash = CryptoJS.SHA1('message');                                                                       // 10869
	     *     var hash = CryptoJS.SHA1(wordArray);                                                                       // 10870
	     */                                                                                                               // 10871
	    C.SHA1 = Hasher._createHelper(SHA1);                                                                              // 10872
                                                                                                                       // 10873
	    /**                                                                                                               // 10874
	     * Shortcut function to the HMAC's object interface.                                                              // 10875
	     *                                                                                                                // 10876
	     * @param {WordArray|string} message The message to hash.                                                         // 10877
	     * @param {WordArray|string} key The secret key.                                                                  // 10878
	     *                                                                                                                // 10879
	     * @return {WordArray} The HMAC.                                                                                  // 10880
	     *                                                                                                                // 10881
	     * @static                                                                                                        // 10882
	     *                                                                                                                // 10883
	     * @example                                                                                                       // 10884
	     *                                                                                                                // 10885
	     *     var hmac = CryptoJS.HmacSHA1(message, key);                                                                // 10886
	     */                                                                                                               // 10887
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);                                                                      // 10888
	}());                                                                                                                 // 10889
                                                                                                                       // 10890
                                                                                                                       // 10891
	return CryptoJS.SHA1;                                                                                                 // 10892
                                                                                                                       // 10893
}));                                                                                                                   // 10894
},{"./core":52}],77:[function(require,module,exports){                                                                 // 10895
;(function (root, factory, undef) {                                                                                    // 10896
	if (typeof exports === "object") {                                                                                    // 10897
		// CommonJS                                                                                                          // 10898
		module.exports = exports = factory(require("./core"), require("./sha256"));                                          // 10899
	}                                                                                                                     // 10900
	else if (typeof define === "function" && define.amd) {                                                                // 10901
		// AMD                                                                                                               // 10902
		define(["./core", "./sha256"], factory);                                                                             // 10903
	}                                                                                                                     // 10904
	else {                                                                                                                // 10905
		// Global (browser)                                                                                                  // 10906
		factory(root.CryptoJS);                                                                                              // 10907
	}                                                                                                                     // 10908
}(this, function (CryptoJS) {                                                                                          // 10909
                                                                                                                       // 10910
	(function () {                                                                                                        // 10911
	    // Shortcuts                                                                                                      // 10912
	    var C = CryptoJS;                                                                                                 // 10913
	    var C_lib = C.lib;                                                                                                // 10914
	    var WordArray = C_lib.WordArray;                                                                                  // 10915
	    var C_algo = C.algo;                                                                                              // 10916
	    var SHA256 = C_algo.SHA256;                                                                                       // 10917
                                                                                                                       // 10918
	    /**                                                                                                               // 10919
	     * SHA-224 hash algorithm.                                                                                        // 10920
	     */                                                                                                               // 10921
	    var SHA224 = C_algo.SHA224 = SHA256.extend({                                                                      // 10922
	        _doReset: function () {                                                                                       // 10923
	            this._hash = new WordArray.init([                                                                         // 10924
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,                                                       // 10925
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4                                                        // 10926
	            ]);                                                                                                       // 10927
	        },                                                                                                            // 10928
                                                                                                                       // 10929
	        _doFinalize: function () {                                                                                    // 10930
	            var hash = SHA256._doFinalize.call(this);                                                                 // 10931
                                                                                                                       // 10932
	            hash.sigBytes -= 4;                                                                                       // 10933
                                                                                                                       // 10934
	            return hash;                                                                                              // 10935
	        }                                                                                                             // 10936
	    });                                                                                                               // 10937
                                                                                                                       // 10938
	    /**                                                                                                               // 10939
	     * Shortcut function to the hasher's object interface.                                                            // 10940
	     *                                                                                                                // 10941
	     * @param {WordArray|string} message The message to hash.                                                         // 10942
	     *                                                                                                                // 10943
	     * @return {WordArray} The hash.                                                                                  // 10944
	     *                                                                                                                // 10945
	     * @static                                                                                                        // 10946
	     *                                                                                                                // 10947
	     * @example                                                                                                       // 10948
	     *                                                                                                                // 10949
	     *     var hash = CryptoJS.SHA224('message');                                                                     // 10950
	     *     var hash = CryptoJS.SHA224(wordArray);                                                                     // 10951
	     */                                                                                                               // 10952
	    C.SHA224 = SHA256._createHelper(SHA224);                                                                          // 10953
                                                                                                                       // 10954
	    /**                                                                                                               // 10955
	     * Shortcut function to the HMAC's object interface.                                                              // 10956
	     *                                                                                                                // 10957
	     * @param {WordArray|string} message The message to hash.                                                         // 10958
	     * @param {WordArray|string} key The secret key.                                                                  // 10959
	     *                                                                                                                // 10960
	     * @return {WordArray} The HMAC.                                                                                  // 10961
	     *                                                                                                                // 10962
	     * @static                                                                                                        // 10963
	     *                                                                                                                // 10964
	     * @example                                                                                                       // 10965
	     *                                                                                                                // 10966
	     *     var hmac = CryptoJS.HmacSHA224(message, key);                                                              // 10967
	     */                                                                                                               // 10968
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);                                                                  // 10969
	}());                                                                                                                 // 10970
                                                                                                                       // 10971
                                                                                                                       // 10972
	return CryptoJS.SHA224;                                                                                               // 10973
                                                                                                                       // 10974
}));                                                                                                                   // 10975
},{"./core":52,"./sha256":78}],78:[function(require,module,exports){                                                   // 10976
;(function (root, factory) {                                                                                           // 10977
	if (typeof exports === "object") {                                                                                    // 10978
		// CommonJS                                                                                                          // 10979
		module.exports = exports = factory(require("./core"));                                                               // 10980
	}                                                                                                                     // 10981
	else if (typeof define === "function" && define.amd) {                                                                // 10982
		// AMD                                                                                                               // 10983
		define(["./core"], factory);                                                                                         // 10984
	}                                                                                                                     // 10985
	else {                                                                                                                // 10986
		// Global (browser)                                                                                                  // 10987
		factory(root.CryptoJS);                                                                                              // 10988
	}                                                                                                                     // 10989
}(this, function (CryptoJS) {                                                                                          // 10990
                                                                                                                       // 10991
	(function (Math) {                                                                                                    // 10992
	    // Shortcuts                                                                                                      // 10993
	    var C = CryptoJS;                                                                                                 // 10994
	    var C_lib = C.lib;                                                                                                // 10995
	    var WordArray = C_lib.WordArray;                                                                                  // 10996
	    var Hasher = C_lib.Hasher;                                                                                        // 10997
	    var C_algo = C.algo;                                                                                              // 10998
                                                                                                                       // 10999
	    // Initialization and round constants tables                                                                      // 11000
	    var H = [];                                                                                                       // 11001
	    var K = [];                                                                                                       // 11002
                                                                                                                       // 11003
	    // Compute constants                                                                                              // 11004
	    (function () {                                                                                                    // 11005
	        function isPrime(n) {                                                                                         // 11006
	            var sqrtN = Math.sqrt(n);                                                                                 // 11007
	            for (var factor = 2; factor <= sqrtN; factor++) {                                                         // 11008
	                if (!(n % factor)) {                                                                                  // 11009
	                    return false;                                                                                     // 11010
	                }                                                                                                     // 11011
	            }                                                                                                         // 11012
                                                                                                                       // 11013
	            return true;                                                                                              // 11014
	        }                                                                                                             // 11015
                                                                                                                       // 11016
	        function getFractionalBits(n) {                                                                               // 11017
	            return ((n - (n | 0)) * 0x100000000) | 0;                                                                 // 11018
	        }                                                                                                             // 11019
                                                                                                                       // 11020
	        var n = 2;                                                                                                    // 11021
	        var nPrime = 0;                                                                                               // 11022
	        while (nPrime < 64) {                                                                                         // 11023
	            if (isPrime(n)) {                                                                                         // 11024
	                if (nPrime < 8) {                                                                                     // 11025
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));                                                // 11026
	                }                                                                                                     // 11027
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));                                                    // 11028
                                                                                                                       // 11029
	                nPrime++;                                                                                             // 11030
	            }                                                                                                         // 11031
                                                                                                                       // 11032
	            n++;                                                                                                      // 11033
	        }                                                                                                             // 11034
	    }());                                                                                                             // 11035
                                                                                                                       // 11036
	    // Reusable object                                                                                                // 11037
	    var W = [];                                                                                                       // 11038
                                                                                                                       // 11039
	    /**                                                                                                               // 11040
	     * SHA-256 hash algorithm.                                                                                        // 11041
	     */                                                                                                               // 11042
	    var SHA256 = C_algo.SHA256 = Hasher.extend({                                                                      // 11043
	        _doReset: function () {                                                                                       // 11044
	            this._hash = new WordArray.init(H.slice(0));                                                              // 11045
	        },                                                                                                            // 11046
                                                                                                                       // 11047
	        _doProcessBlock: function (M, offset) {                                                                       // 11048
	            // Shortcut                                                                                               // 11049
	            var H = this._hash.words;                                                                                 // 11050
                                                                                                                       // 11051
	            // Working variables                                                                                      // 11052
	            var a = H[0];                                                                                             // 11053
	            var b = H[1];                                                                                             // 11054
	            var c = H[2];                                                                                             // 11055
	            var d = H[3];                                                                                             // 11056
	            var e = H[4];                                                                                             // 11057
	            var f = H[5];                                                                                             // 11058
	            var g = H[6];                                                                                             // 11059
	            var h = H[7];                                                                                             // 11060
                                                                                                                       // 11061
	            // Computation                                                                                            // 11062
	            for (var i = 0; i < 64; i++) {                                                                            // 11063
	                if (i < 16) {                                                                                         // 11064
	                    W[i] = M[offset + i] | 0;                                                                         // 11065
	                } else {                                                                                              // 11066
	                    var gamma0x = W[i - 15];                                                                          // 11067
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^                                              // 11068
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^                                              // 11069
	                                   (gamma0x >>> 3);                                                                   // 11070
                                                                                                                       // 11071
	                    var gamma1x = W[i - 2];                                                                           // 11072
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^                                              // 11073
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^                                              // 11074
	                                   (gamma1x >>> 10);                                                                  // 11075
                                                                                                                       // 11076
	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];                                                    // 11077
	                }                                                                                                     // 11078
                                                                                                                       // 11079
	                var ch  = (e & f) ^ (~e & g);                                                                         // 11080
	                var maj = (a & b) ^ (a & c) ^ (b & c);                                                                // 11081
                                                                                                                       // 11082
	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));           // 11083
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));           // 11084
                                                                                                                       // 11085
	                var t1 = h + sigma1 + ch + K[i] + W[i];                                                               // 11086
	                var t2 = sigma0 + maj;                                                                                // 11087
                                                                                                                       // 11088
	                h = g;                                                                                                // 11089
	                g = f;                                                                                                // 11090
	                f = e;                                                                                                // 11091
	                e = (d + t1) | 0;                                                                                     // 11092
	                d = c;                                                                                                // 11093
	                c = b;                                                                                                // 11094
	                b = a;                                                                                                // 11095
	                a = (t1 + t2) | 0;                                                                                    // 11096
	            }                                                                                                         // 11097
                                                                                                                       // 11098
	            // Intermediate hash value                                                                                // 11099
	            H[0] = (H[0] + a) | 0;                                                                                    // 11100
	            H[1] = (H[1] + b) | 0;                                                                                    // 11101
	            H[2] = (H[2] + c) | 0;                                                                                    // 11102
	            H[3] = (H[3] + d) | 0;                                                                                    // 11103
	            H[4] = (H[4] + e) | 0;                                                                                    // 11104
	            H[5] = (H[5] + f) | 0;                                                                                    // 11105
	            H[6] = (H[6] + g) | 0;                                                                                    // 11106
	            H[7] = (H[7] + h) | 0;                                                                                    // 11107
	        },                                                                                                            // 11108
                                                                                                                       // 11109
	        _doFinalize: function () {                                                                                    // 11110
	            // Shortcuts                                                                                              // 11111
	            var data = this._data;                                                                                    // 11112
	            var dataWords = data.words;                                                                               // 11113
                                                                                                                       // 11114
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11115
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11116
                                                                                                                       // 11117
	            // Add padding                                                                                            // 11118
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 11119
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 11120
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 11121
	            data.sigBytes = dataWords.length * 4;                                                                     // 11122
                                                                                                                       // 11123
	            // Hash final blocks                                                                                      // 11124
	            this._process();                                                                                          // 11125
                                                                                                                       // 11126
	            // Return final computed hash                                                                             // 11127
	            return this._hash;                                                                                        // 11128
	        },                                                                                                            // 11129
                                                                                                                       // 11130
	        clone: function () {                                                                                          // 11131
	            var clone = Hasher.clone.call(this);                                                                      // 11132
	            clone._hash = this._hash.clone();                                                                         // 11133
                                                                                                                       // 11134
	            return clone;                                                                                             // 11135
	        }                                                                                                             // 11136
	    });                                                                                                               // 11137
                                                                                                                       // 11138
	    /**                                                                                                               // 11139
	     * Shortcut function to the hasher's object interface.                                                            // 11140
	     *                                                                                                                // 11141
	     * @param {WordArray|string} message The message to hash.                                                         // 11142
	     *                                                                                                                // 11143
	     * @return {WordArray} The hash.                                                                                  // 11144
	     *                                                                                                                // 11145
	     * @static                                                                                                        // 11146
	     *                                                                                                                // 11147
	     * @example                                                                                                       // 11148
	     *                                                                                                                // 11149
	     *     var hash = CryptoJS.SHA256('message');                                                                     // 11150
	     *     var hash = CryptoJS.SHA256(wordArray);                                                                     // 11151
	     */                                                                                                               // 11152
	    C.SHA256 = Hasher._createHelper(SHA256);                                                                          // 11153
                                                                                                                       // 11154
	    /**                                                                                                               // 11155
	     * Shortcut function to the HMAC's object interface.                                                              // 11156
	     *                                                                                                                // 11157
	     * @param {WordArray|string} message The message to hash.                                                         // 11158
	     * @param {WordArray|string} key The secret key.                                                                  // 11159
	     *                                                                                                                // 11160
	     * @return {WordArray} The HMAC.                                                                                  // 11161
	     *                                                                                                                // 11162
	     * @static                                                                                                        // 11163
	     *                                                                                                                // 11164
	     * @example                                                                                                       // 11165
	     *                                                                                                                // 11166
	     *     var hmac = CryptoJS.HmacSHA256(message, key);                                                              // 11167
	     */                                                                                                               // 11168
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);                                                                  // 11169
	}(Math));                                                                                                             // 11170
                                                                                                                       // 11171
                                                                                                                       // 11172
	return CryptoJS.SHA256;                                                                                               // 11173
                                                                                                                       // 11174
}));                                                                                                                   // 11175
},{"./core":52}],79:[function(require,module,exports){                                                                 // 11176
;(function (root, factory, undef) {                                                                                    // 11177
	if (typeof exports === "object") {                                                                                    // 11178
		// CommonJS                                                                                                          // 11179
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                        // 11180
	}                                                                                                                     // 11181
	else if (typeof define === "function" && define.amd) {                                                                // 11182
		// AMD                                                                                                               // 11183
		define(["./core", "./x64-core"], factory);                                                                           // 11184
	}                                                                                                                     // 11185
	else {                                                                                                                // 11186
		// Global (browser)                                                                                                  // 11187
		factory(root.CryptoJS);                                                                                              // 11188
	}                                                                                                                     // 11189
}(this, function (CryptoJS) {                                                                                          // 11190
                                                                                                                       // 11191
	(function (Math) {                                                                                                    // 11192
	    // Shortcuts                                                                                                      // 11193
	    var C = CryptoJS;                                                                                                 // 11194
	    var C_lib = C.lib;                                                                                                // 11195
	    var WordArray = C_lib.WordArray;                                                                                  // 11196
	    var Hasher = C_lib.Hasher;                                                                                        // 11197
	    var C_x64 = C.x64;                                                                                                // 11198
	    var X64Word = C_x64.Word;                                                                                         // 11199
	    var C_algo = C.algo;                                                                                              // 11200
                                                                                                                       // 11201
	    // Constants tables                                                                                               // 11202
	    var RHO_OFFSETS = [];                                                                                             // 11203
	    var PI_INDEXES  = [];                                                                                             // 11204
	    var ROUND_CONSTANTS = [];                                                                                         // 11205
                                                                                                                       // 11206
	    // Compute Constants                                                                                              // 11207
	    (function () {                                                                                                    // 11208
	        // Compute rho offset constants                                                                               // 11209
	        var x = 1, y = 0;                                                                                             // 11210
	        for (var t = 0; t < 24; t++) {                                                                                // 11211
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;                                                    // 11212
                                                                                                                       // 11213
	            var newX = y % 5;                                                                                         // 11214
	            var newY = (2 * x + 3 * y) % 5;                                                                           // 11215
	            x = newX;                                                                                                 // 11216
	            y = newY;                                                                                                 // 11217
	        }                                                                                                             // 11218
                                                                                                                       // 11219
	        // Compute pi index constants                                                                                 // 11220
	        for (var x = 0; x < 5; x++) {                                                                                 // 11221
	            for (var y = 0; y < 5; y++) {                                                                             // 11222
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;                                                // 11223
	            }                                                                                                         // 11224
	        }                                                                                                             // 11225
                                                                                                                       // 11226
	        // Compute round constants                                                                                    // 11227
	        var LFSR = 0x01;                                                                                              // 11228
	        for (var i = 0; i < 24; i++) {                                                                                // 11229
	            var roundConstantMsw = 0;                                                                                 // 11230
	            var roundConstantLsw = 0;                                                                                 // 11231
                                                                                                                       // 11232
	            for (var j = 0; j < 7; j++) {                                                                             // 11233
	                if (LFSR & 0x01) {                                                                                    // 11234
	                    var bitPosition = (1 << j) - 1;                                                                   // 11235
	                    if (bitPosition < 32) {                                                                           // 11236
	                        roundConstantLsw ^= 1 << bitPosition;                                                         // 11237
	                    } else /* if (bitPosition >= 32) */ {                                                             // 11238
	                        roundConstantMsw ^= 1 << (bitPosition - 32);                                                  // 11239
	                    }                                                                                                 // 11240
	                }                                                                                                     // 11241
                                                                                                                       // 11242
	                // Compute next LFSR                                                                                  // 11243
	                if (LFSR & 0x80) {                                                                                    // 11244
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1                                     // 11245
	                    LFSR = (LFSR << 1) ^ 0x71;                                                                        // 11246
	                } else {                                                                                              // 11247
	                    LFSR <<= 1;                                                                                       // 11248
	                }                                                                                                     // 11249
	            }                                                                                                         // 11250
                                                                                                                       // 11251
	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);                                  // 11252
	        }                                                                                                             // 11253
	    }());                                                                                                             // 11254
                                                                                                                       // 11255
	    // Reusable objects for temporary values                                                                          // 11256
	    var T = [];                                                                                                       // 11257
	    (function () {                                                                                                    // 11258
	        for (var i = 0; i < 25; i++) {                                                                                // 11259
	            T[i] = X64Word.create();                                                                                  // 11260
	        }                                                                                                             // 11261
	    }());                                                                                                             // 11262
                                                                                                                       // 11263
	    /**                                                                                                               // 11264
	     * SHA-3 hash algorithm.                                                                                          // 11265
	     */                                                                                                               // 11266
	    var SHA3 = C_algo.SHA3 = Hasher.extend({                                                                          // 11267
	        /**                                                                                                           // 11268
	         * Configuration options.                                                                                     // 11269
	         *                                                                                                            // 11270
	         * @property {number} outputLength                                                                            // 11271
	         *   The desired number of bits in the output hash.                                                           // 11272
	         *   Only values permitted are: 224, 256, 384, 512.                                                           // 11273
	         *   Default: 512                                                                                             // 11274
	         */                                                                                                           // 11275
	        cfg: Hasher.cfg.extend({                                                                                      // 11276
	            outputLength: 512                                                                                         // 11277
	        }),                                                                                                           // 11278
                                                                                                                       // 11279
	        _doReset: function () {                                                                                       // 11280
	            var state = this._state = []                                                                              // 11281
	            for (var i = 0; i < 25; i++) {                                                                            // 11282
	                state[i] = new X64Word.init();                                                                        // 11283
	            }                                                                                                         // 11284
                                                                                                                       // 11285
	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;                                                 // 11286
	        },                                                                                                            // 11287
                                                                                                                       // 11288
	        _doProcessBlock: function (M, offset) {                                                                       // 11289
	            // Shortcuts                                                                                              // 11290
	            var state = this._state;                                                                                  // 11291
	            var nBlockSizeLanes = this.blockSize / 2;                                                                 // 11292
                                                                                                                       // 11293
	            // Absorb                                                                                                 // 11294
	            for (var i = 0; i < nBlockSizeLanes; i++) {                                                               // 11295
	                // Shortcuts                                                                                          // 11296
	                var M2i  = M[offset + 2 * i];                                                                         // 11297
	                var M2i1 = M[offset + 2 * i + 1];                                                                     // 11298
                                                                                                                       // 11299
	                // Swap endian                                                                                        // 11300
	                M2i = (                                                                                               // 11301
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |                                                     // 11302
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)                                                       // 11303
	                );                                                                                                    // 11304
	                M2i1 = (                                                                                              // 11305
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |                                                   // 11306
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)                                                     // 11307
	                );                                                                                                    // 11308
                                                                                                                       // 11309
	                // Absorb message into state                                                                          // 11310
	                var lane = state[i];                                                                                  // 11311
	                lane.high ^= M2i1;                                                                                    // 11312
	                lane.low  ^= M2i;                                                                                     // 11313
	            }                                                                                                         // 11314
                                                                                                                       // 11315
	            // Rounds                                                                                                 // 11316
	            for (var round = 0; round < 24; round++) {                                                                // 11317
	                // Theta                                                                                              // 11318
	                for (var x = 0; x < 5; x++) {                                                                         // 11319
	                    // Mix column lanes                                                                               // 11320
	                    var tMsw = 0, tLsw = 0;                                                                           // 11321
	                    for (var y = 0; y < 5; y++) {                                                                     // 11322
	                        var lane = state[x + 5 * y];                                                                  // 11323
	                        tMsw ^= lane.high;                                                                            // 11324
	                        tLsw ^= lane.low;                                                                             // 11325
	                    }                                                                                                 // 11326
                                                                                                                       // 11327
	                    // Temporary values                                                                               // 11328
	                    var Tx = T[x];                                                                                    // 11329
	                    Tx.high = tMsw;                                                                                   // 11330
	                    Tx.low  = tLsw;                                                                                   // 11331
	                }                                                                                                     // 11332
	                for (var x = 0; x < 5; x++) {                                                                         // 11333
	                    // Shortcuts                                                                                      // 11334
	                    var Tx4 = T[(x + 4) % 5];                                                                         // 11335
	                    var Tx1 = T[(x + 1) % 5];                                                                         // 11336
	                    var Tx1Msw = Tx1.high;                                                                            // 11337
	                    var Tx1Lsw = Tx1.low;                                                                             // 11338
                                                                                                                       // 11339
	                    // Mix surrounding columns                                                                        // 11340
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));                                          // 11341
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));                                          // 11342
	                    for (var y = 0; y < 5; y++) {                                                                     // 11343
	                        var lane = state[x + 5 * y];                                                                  // 11344
	                        lane.high ^= tMsw;                                                                            // 11345
	                        lane.low  ^= tLsw;                                                                            // 11346
	                    }                                                                                                 // 11347
	                }                                                                                                     // 11348
                                                                                                                       // 11349
	                // Rho Pi                                                                                             // 11350
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {                                                // 11351
	                    // Shortcuts                                                                                      // 11352
	                    var lane = state[laneIndex];                                                                      // 11353
	                    var laneMsw = lane.high;                                                                          // 11354
	                    var laneLsw = lane.low;                                                                           // 11355
	                    var rhoOffset = RHO_OFFSETS[laneIndex];                                                           // 11356
                                                                                                                       // 11357
	                    // Rotate lanes                                                                                   // 11358
	                    if (rhoOffset < 32) {                                                                             // 11359
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));                           // 11360
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));                           // 11361
	                    } else /* if (rhoOffset >= 32) */ {                                                               // 11362
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));                    // 11363
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));                    // 11364
	                    }                                                                                                 // 11365
                                                                                                                       // 11366
	                    // Transpose lanes                                                                                // 11367
	                    var TPiLane = T[PI_INDEXES[laneIndex]];                                                           // 11368
	                    TPiLane.high = tMsw;                                                                              // 11369
	                    TPiLane.low  = tLsw;                                                                              // 11370
	                }                                                                                                     // 11371
                                                                                                                       // 11372
	                // Rho pi at x = y = 0                                                                                // 11373
	                var T0 = T[0];                                                                                        // 11374
	                var state0 = state[0];                                                                                // 11375
	                T0.high = state0.high;                                                                                // 11376
	                T0.low  = state0.low;                                                                                 // 11377
                                                                                                                       // 11378
	                // Chi                                                                                                // 11379
	                for (var x = 0; x < 5; x++) {                                                                         // 11380
	                    for (var y = 0; y < 5; y++) {                                                                     // 11381
	                        // Shortcuts                                                                                  // 11382
	                        var laneIndex = x + 5 * y;                                                                    // 11383
	                        var lane = state[laneIndex];                                                                  // 11384
	                        var TLane = T[laneIndex];                                                                     // 11385
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];                                                       // 11386
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];                                                       // 11387
                                                                                                                       // 11388
	                        // Mix rows                                                                                   // 11389
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);                                      // 11390
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);                                       // 11391
	                    }                                                                                                 // 11392
	                }                                                                                                     // 11393
                                                                                                                       // 11394
	                // Iota                                                                                               // 11395
	                var lane = state[0];                                                                                  // 11396
	                var roundConstant = ROUND_CONSTANTS[round];                                                           // 11397
	                lane.high ^= roundConstant.high;                                                                      // 11398
	                lane.low  ^= roundConstant.low;;                                                                      // 11399
	            }                                                                                                         // 11400
	        },                                                                                                            // 11401
                                                                                                                       // 11402
	        _doFinalize: function () {                                                                                    // 11403
	            // Shortcuts                                                                                              // 11404
	            var data = this._data;                                                                                    // 11405
	            var dataWords = data.words;                                                                               // 11406
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11407
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11408
	            var blockSizeBits = this.blockSize * 32;                                                                  // 11409
                                                                                                                       // 11410
	            // Add padding                                                                                            // 11411
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);                                               // 11412
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;              // 11413
	            data.sigBytes = dataWords.length * 4;                                                                     // 11414
                                                                                                                       // 11415
	            // Hash final blocks                                                                                      // 11416
	            this._process();                                                                                          // 11417
                                                                                                                       // 11418
	            // Shortcuts                                                                                              // 11419
	            var state = this._state;                                                                                  // 11420
	            var outputLengthBytes = this.cfg.outputLength / 8;                                                        // 11421
	            var outputLengthLanes = outputLengthBytes / 8;                                                            // 11422
                                                                                                                       // 11423
	            // Squeeze                                                                                                // 11424
	            var hashWords = [];                                                                                       // 11425
	            for (var i = 0; i < outputLengthLanes; i++) {                                                             // 11426
	                // Shortcuts                                                                                          // 11427
	                var lane = state[i];                                                                                  // 11428
	                var laneMsw = lane.high;                                                                              // 11429
	                var laneLsw = lane.low;                                                                               // 11430
                                                                                                                       // 11431
	                // Swap endian                                                                                        // 11432
	                laneMsw = (                                                                                           // 11433
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |                                             // 11434
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)                                               // 11435
	                );                                                                                                    // 11436
	                laneLsw = (                                                                                           // 11437
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |                                             // 11438
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)                                               // 11439
	                );                                                                                                    // 11440
                                                                                                                       // 11441
	                // Squeeze state to retrieve hash                                                                     // 11442
	                hashWords.push(laneLsw);                                                                              // 11443
	                hashWords.push(laneMsw);                                                                              // 11444
	            }                                                                                                         // 11445
                                                                                                                       // 11446
	            // Return final computed hash                                                                             // 11447
	            return new WordArray.init(hashWords, outputLengthBytes);                                                  // 11448
	        },                                                                                                            // 11449
                                                                                                                       // 11450
	        clone: function () {                                                                                          // 11451
	            var clone = Hasher.clone.call(this);                                                                      // 11452
                                                                                                                       // 11453
	            var state = clone._state = this._state.slice(0);                                                          // 11454
	            for (var i = 0; i < 25; i++) {                                                                            // 11455
	                state[i] = state[i].clone();                                                                          // 11456
	            }                                                                                                         // 11457
                                                                                                                       // 11458
	            return clone;                                                                                             // 11459
	        }                                                                                                             // 11460
	    });                                                                                                               // 11461
                                                                                                                       // 11462
	    /**                                                                                                               // 11463
	     * Shortcut function to the hasher's object interface.                                                            // 11464
	     *                                                                                                                // 11465
	     * @param {WordArray|string} message The message to hash.                                                         // 11466
	     *                                                                                                                // 11467
	     * @return {WordArray} The hash.                                                                                  // 11468
	     *                                                                                                                // 11469
	     * @static                                                                                                        // 11470
	     *                                                                                                                // 11471
	     * @example                                                                                                       // 11472
	     *                                                                                                                // 11473
	     *     var hash = CryptoJS.SHA3('message');                                                                       // 11474
	     *     var hash = CryptoJS.SHA3(wordArray);                                                                       // 11475
	     */                                                                                                               // 11476
	    C.SHA3 = Hasher._createHelper(SHA3);                                                                              // 11477
                                                                                                                       // 11478
	    /**                                                                                                               // 11479
	     * Shortcut function to the HMAC's object interface.                                                              // 11480
	     *                                                                                                                // 11481
	     * @param {WordArray|string} message The message to hash.                                                         // 11482
	     * @param {WordArray|string} key The secret key.                                                                  // 11483
	     *                                                                                                                // 11484
	     * @return {WordArray} The HMAC.                                                                                  // 11485
	     *                                                                                                                // 11486
	     * @static                                                                                                        // 11487
	     *                                                                                                                // 11488
	     * @example                                                                                                       // 11489
	     *                                                                                                                // 11490
	     *     var hmac = CryptoJS.HmacSHA3(message, key);                                                                // 11491
	     */                                                                                                               // 11492
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);                                                                      // 11493
	}(Math));                                                                                                             // 11494
                                                                                                                       // 11495
                                                                                                                       // 11496
	return CryptoJS.SHA3;                                                                                                 // 11497
                                                                                                                       // 11498
}));                                                                                                                   // 11499
},{"./core":52,"./x64-core":83}],80:[function(require,module,exports){                                                 // 11500
;(function (root, factory, undef) {                                                                                    // 11501
	if (typeof exports === "object") {                                                                                    // 11502
		// CommonJS                                                                                                          // 11503
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));                   // 11504
	}                                                                                                                     // 11505
	else if (typeof define === "function" && define.amd) {                                                                // 11506
		// AMD                                                                                                               // 11507
		define(["./core", "./x64-core", "./sha512"], factory);                                                               // 11508
	}                                                                                                                     // 11509
	else {                                                                                                                // 11510
		// Global (browser)                                                                                                  // 11511
		factory(root.CryptoJS);                                                                                              // 11512
	}                                                                                                                     // 11513
}(this, function (CryptoJS) {                                                                                          // 11514
                                                                                                                       // 11515
	(function () {                                                                                                        // 11516
	    // Shortcuts                                                                                                      // 11517
	    var C = CryptoJS;                                                                                                 // 11518
	    var C_x64 = C.x64;                                                                                                // 11519
	    var X64Word = C_x64.Word;                                                                                         // 11520
	    var X64WordArray = C_x64.WordArray;                                                                               // 11521
	    var C_algo = C.algo;                                                                                              // 11522
	    var SHA512 = C_algo.SHA512;                                                                                       // 11523
                                                                                                                       // 11524
	    /**                                                                                                               // 11525
	     * SHA-384 hash algorithm.                                                                                        // 11526
	     */                                                                                                               // 11527
	    var SHA384 = C_algo.SHA384 = SHA512.extend({                                                                      // 11528
	        _doReset: function () {                                                                                       // 11529
	            this._hash = new X64WordArray.init([                                                                      // 11530
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),                   // 11531
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),                   // 11532
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),                   // 11533
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)                    // 11534
	            ]);                                                                                                       // 11535
	        },                                                                                                            // 11536
                                                                                                                       // 11537
	        _doFinalize: function () {                                                                                    // 11538
	            var hash = SHA512._doFinalize.call(this);                                                                 // 11539
                                                                                                                       // 11540
	            hash.sigBytes -= 16;                                                                                      // 11541
                                                                                                                       // 11542
	            return hash;                                                                                              // 11543
	        }                                                                                                             // 11544
	    });                                                                                                               // 11545
                                                                                                                       // 11546
	    /**                                                                                                               // 11547
	     * Shortcut function to the hasher's object interface.                                                            // 11548
	     *                                                                                                                // 11549
	     * @param {WordArray|string} message The message to hash.                                                         // 11550
	     *                                                                                                                // 11551
	     * @return {WordArray} The hash.                                                                                  // 11552
	     *                                                                                                                // 11553
	     * @static                                                                                                        // 11554
	     *                                                                                                                // 11555
	     * @example                                                                                                       // 11556
	     *                                                                                                                // 11557
	     *     var hash = CryptoJS.SHA384('message');                                                                     // 11558
	     *     var hash = CryptoJS.SHA384(wordArray);                                                                     // 11559
	     */                                                                                                               // 11560
	    C.SHA384 = SHA512._createHelper(SHA384);                                                                          // 11561
                                                                                                                       // 11562
	    /**                                                                                                               // 11563
	     * Shortcut function to the HMAC's object interface.                                                              // 11564
	     *                                                                                                                // 11565
	     * @param {WordArray|string} message The message to hash.                                                         // 11566
	     * @param {WordArray|string} key The secret key.                                                                  // 11567
	     *                                                                                                                // 11568
	     * @return {WordArray} The HMAC.                                                                                  // 11569
	     *                                                                                                                // 11570
	     * @static                                                                                                        // 11571
	     *                                                                                                                // 11572
	     * @example                                                                                                       // 11573
	     *                                                                                                                // 11574
	     *     var hmac = CryptoJS.HmacSHA384(message, key);                                                              // 11575
	     */                                                                                                               // 11576
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);                                                                  // 11577
	}());                                                                                                                 // 11578
                                                                                                                       // 11579
                                                                                                                       // 11580
	return CryptoJS.SHA384;                                                                                               // 11581
                                                                                                                       // 11582
}));                                                                                                                   // 11583
},{"./core":52,"./sha512":81,"./x64-core":83}],81:[function(require,module,exports){                                   // 11584
;(function (root, factory, undef) {                                                                                    // 11585
	if (typeof exports === "object") {                                                                                    // 11586
		// CommonJS                                                                                                          // 11587
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                        // 11588
	}                                                                                                                     // 11589
	else if (typeof define === "function" && define.amd) {                                                                // 11590
		// AMD                                                                                                               // 11591
		define(["./core", "./x64-core"], factory);                                                                           // 11592
	}                                                                                                                     // 11593
	else {                                                                                                                // 11594
		// Global (browser)                                                                                                  // 11595
		factory(root.CryptoJS);                                                                                              // 11596
	}                                                                                                                     // 11597
}(this, function (CryptoJS) {                                                                                          // 11598
                                                                                                                       // 11599
	(function () {                                                                                                        // 11600
	    // Shortcuts                                                                                                      // 11601
	    var C = CryptoJS;                                                                                                 // 11602
	    var C_lib = C.lib;                                                                                                // 11603
	    var Hasher = C_lib.Hasher;                                                                                        // 11604
	    var C_x64 = C.x64;                                                                                                // 11605
	    var X64Word = C_x64.Word;                                                                                         // 11606
	    var X64WordArray = C_x64.WordArray;                                                                               // 11607
	    var C_algo = C.algo;                                                                                              // 11608
                                                                                                                       // 11609
	    function X64Word_create() {                                                                                       // 11610
	        return X64Word.create.apply(X64Word, arguments);                                                              // 11611
	    }                                                                                                                 // 11612
                                                                                                                       // 11613
	    // Constants                                                                                                      // 11614
	    var K = [                                                                                                         // 11615
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),                               // 11616
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),                               // 11617
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),                               // 11618
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),                               // 11619
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),                               // 11620
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),                               // 11621
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),                               // 11622
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),                               // 11623
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),                               // 11624
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),                               // 11625
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),                               // 11626
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),                               // 11627
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),                               // 11628
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),                               // 11629
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),                               // 11630
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),                               // 11631
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),                               // 11632
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),                               // 11633
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),                               // 11634
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),                               // 11635
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),                               // 11636
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),                               // 11637
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),                               // 11638
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),                               // 11639
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),                               // 11640
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),                               // 11641
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),                               // 11642
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),                               // 11643
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),                               // 11644
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),                               // 11645
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),                               // 11646
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),                               // 11647
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),                               // 11648
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),                               // 11649
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),                               // 11650
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),                               // 11651
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),                               // 11652
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),                               // 11653
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),                               // 11654
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)                                // 11655
	    ];                                                                                                                // 11656
                                                                                                                       // 11657
	    // Reusable objects                                                                                               // 11658
	    var W = [];                                                                                                       // 11659
	    (function () {                                                                                                    // 11660
	        for (var i = 0; i < 80; i++) {                                                                                // 11661
	            W[i] = X64Word_create();                                                                                  // 11662
	        }                                                                                                             // 11663
	    }());                                                                                                             // 11664
                                                                                                                       // 11665
	    /**                                                                                                               // 11666
	     * SHA-512 hash algorithm.                                                                                        // 11667
	     */                                                                                                               // 11668
	    var SHA512 = C_algo.SHA512 = Hasher.extend({                                                                      // 11669
	        _doReset: function () {                                                                                       // 11670
	            this._hash = new X64WordArray.init([                                                                      // 11671
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),                   // 11672
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),                   // 11673
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),                   // 11674
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)                    // 11675
	            ]);                                                                                                       // 11676
	        },                                                                                                            // 11677
                                                                                                                       // 11678
	        _doProcessBlock: function (M, offset) {                                                                       // 11679
	            // Shortcuts                                                                                              // 11680
	            var H = this._hash.words;                                                                                 // 11681
                                                                                                                       // 11682
	            var H0 = H[0];                                                                                            // 11683
	            var H1 = H[1];                                                                                            // 11684
	            var H2 = H[2];                                                                                            // 11685
	            var H3 = H[3];                                                                                            // 11686
	            var H4 = H[4];                                                                                            // 11687
	            var H5 = H[5];                                                                                            // 11688
	            var H6 = H[6];                                                                                            // 11689
	            var H7 = H[7];                                                                                            // 11690
                                                                                                                       // 11691
	            var H0h = H0.high;                                                                                        // 11692
	            var H0l = H0.low;                                                                                         // 11693
	            var H1h = H1.high;                                                                                        // 11694
	            var H1l = H1.low;                                                                                         // 11695
	            var H2h = H2.high;                                                                                        // 11696
	            var H2l = H2.low;                                                                                         // 11697
	            var H3h = H3.high;                                                                                        // 11698
	            var H3l = H3.low;                                                                                         // 11699
	            var H4h = H4.high;                                                                                        // 11700
	            var H4l = H4.low;                                                                                         // 11701
	            var H5h = H5.high;                                                                                        // 11702
	            var H5l = H5.low;                                                                                         // 11703
	            var H6h = H6.high;                                                                                        // 11704
	            var H6l = H6.low;                                                                                         // 11705
	            var H7h = H7.high;                                                                                        // 11706
	            var H7l = H7.low;                                                                                         // 11707
                                                                                                                       // 11708
	            // Working variables                                                                                      // 11709
	            var ah = H0h;                                                                                             // 11710
	            var al = H0l;                                                                                             // 11711
	            var bh = H1h;                                                                                             // 11712
	            var bl = H1l;                                                                                             // 11713
	            var ch = H2h;                                                                                             // 11714
	            var cl = H2l;                                                                                             // 11715
	            var dh = H3h;                                                                                             // 11716
	            var dl = H3l;                                                                                             // 11717
	            var eh = H4h;                                                                                             // 11718
	            var el = H4l;                                                                                             // 11719
	            var fh = H5h;                                                                                             // 11720
	            var fl = H5l;                                                                                             // 11721
	            var gh = H6h;                                                                                             // 11722
	            var gl = H6l;                                                                                             // 11723
	            var hh = H7h;                                                                                             // 11724
	            var hl = H7l;                                                                                             // 11725
                                                                                                                       // 11726
	            // Rounds                                                                                                 // 11727
	            for (var i = 0; i < 80; i++) {                                                                            // 11728
	                // Shortcut                                                                                           // 11729
	                var Wi = W[i];                                                                                        // 11730
                                                                                                                       // 11731
	                // Extend message                                                                                     // 11732
	                if (i < 16) {                                                                                         // 11733
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;                                                    // 11734
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;                                                    // 11735
	                } else {                                                                                              // 11736
	                    // Gamma0                                                                                         // 11737
	                    var gamma0x  = W[i - 15];                                                                         // 11738
	                    var gamma0xh = gamma0x.high;                                                                      // 11739
	                    var gamma0xl = gamma0x.low;                                                                       // 11740
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));
                                                                                                                       // 11743
	                    // Gamma1                                                                                         // 11744
	                    var gamma1x  = W[i - 2];                                                                          // 11745
	                    var gamma1xh = gamma1x.high;                                                                      // 11746
	                    var gamma1xl = gamma1x.low;                                                                       // 11747
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));
                                                                                                                       // 11750
	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]                                                  // 11751
	                    var Wi7  = W[i - 7];                                                                              // 11752
	                    var Wi7h = Wi7.high;                                                                              // 11753
	                    var Wi7l = Wi7.low;                                                                               // 11754
                                                                                                                       // 11755
	                    var Wi16  = W[i - 16];                                                                            // 11756
	                    var Wi16h = Wi16.high;                                                                            // 11757
	                    var Wi16l = Wi16.low;                                                                             // 11758
                                                                                                                       // 11759
	                    var Wil = gamma0l + Wi7l;                                                                         // 11760
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);                               // 11761
	                    var Wil = Wil + gamma1l;                                                                          // 11762
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);                                // 11763
	                    var Wil = Wil + Wi16l;                                                                            // 11764
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);                                    // 11765
                                                                                                                       // 11766
	                    Wi.high = Wih;                                                                                    // 11767
	                    Wi.low  = Wil;                                                                                    // 11768
	                }                                                                                                     // 11769
                                                                                                                       // 11770
	                var chh  = (eh & fh) ^ (~eh & gh);                                                                    // 11771
	                var chl  = (el & fl) ^ (~el & gl);                                                                    // 11772
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);                                                         // 11773
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);                                                         // 11774
                                                                                                                       // 11775
	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));    // 11776
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));    // 11777
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));    // 11778
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));    // 11779
                                                                                                                       // 11780
	                // t1 = h + sigma1 + ch + K[i] + W[i]                                                                 // 11781
	                var Ki  = K[i];                                                                                       // 11782
	                var Kih = Ki.high;                                                                                    // 11783
	                var Kil = Ki.low;                                                                                     // 11784
                                                                                                                       // 11785
	                var t1l = hl + sigma1l;                                                                               // 11786
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);                                          // 11787
	                var t1l = t1l + chl;                                                                                  // 11788
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);                                            // 11789
	                var t1l = t1l + Kil;                                                                                  // 11790
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);                                            // 11791
	                var t1l = t1l + Wil;                                                                                  // 11792
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);                                            // 11793
                                                                                                                       // 11794
	                // t2 = sigma0 + maj                                                                                  // 11795
	                var t2l = sigma0l + majl;                                                                             // 11796
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);                                   // 11797
                                                                                                                       // 11798
	                // Update working variables                                                                           // 11799
	                hh = gh;                                                                                              // 11800
	                hl = gl;                                                                                              // 11801
	                gh = fh;                                                                                              // 11802
	                gl = fl;                                                                                              // 11803
	                fh = eh;                                                                                              // 11804
	                fl = el;                                                                                              // 11805
	                el = (dl + t1l) | 0;                                                                                  // 11806
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;                                              // 11807
	                dh = ch;                                                                                              // 11808
	                dl = cl;                                                                                              // 11809
	                ch = bh;                                                                                              // 11810
	                cl = bl;                                                                                              // 11811
	                bh = ah;                                                                                              // 11812
	                bl = al;                                                                                              // 11813
	                al = (t1l + t2l) | 0;                                                                                 // 11814
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;                                            // 11815
	            }                                                                                                         // 11816
                                                                                                                       // 11817
	            // Intermediate hash value                                                                                // 11818
	            H0l = H0.low  = (H0l + al);                                                                               // 11819
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));                                                // 11820
	            H1l = H1.low  = (H1l + bl);                                                                               // 11821
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));                                                // 11822
	            H2l = H2.low  = (H2l + cl);                                                                               // 11823
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));                                                // 11824
	            H3l = H3.low  = (H3l + dl);                                                                               // 11825
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));                                                // 11826
	            H4l = H4.low  = (H4l + el);                                                                               // 11827
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));                                                // 11828
	            H5l = H5.low  = (H5l + fl);                                                                               // 11829
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));                                                // 11830
	            H6l = H6.low  = (H6l + gl);                                                                               // 11831
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));                                                // 11832
	            H7l = H7.low  = (H7l + hl);                                                                               // 11833
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));                                                // 11834
	        },                                                                                                            // 11835
                                                                                                                       // 11836
	        _doFinalize: function () {                                                                                    // 11837
	            // Shortcuts                                                                                              // 11838
	            var data = this._data;                                                                                    // 11839
	            var dataWords = data.words;                                                                               // 11840
                                                                                                                       // 11841
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11842
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11843
                                                                                                                       // 11844
	            // Add padding                                                                                            // 11845
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 11846
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);                 // 11847
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;                                           // 11848
	            data.sigBytes = dataWords.length * 4;                                                                     // 11849
                                                                                                                       // 11850
	            // Hash final blocks                                                                                      // 11851
	            this._process();                                                                                          // 11852
                                                                                                                       // 11853
	            // Convert hash to 32-bit word array before returning                                                     // 11854
	            var hash = this._hash.toX32();                                                                            // 11855
                                                                                                                       // 11856
	            // Return final computed hash                                                                             // 11857
	            return hash;                                                                                              // 11858
	        },                                                                                                            // 11859
                                                                                                                       // 11860
	        clone: function () {                                                                                          // 11861
	            var clone = Hasher.clone.call(this);                                                                      // 11862
	            clone._hash = this._hash.clone();                                                                         // 11863
                                                                                                                       // 11864
	            return clone;                                                                                             // 11865
	        },                                                                                                            // 11866
                                                                                                                       // 11867
	        blockSize: 1024/32                                                                                            // 11868
	    });                                                                                                               // 11869
                                                                                                                       // 11870
	    /**                                                                                                               // 11871
	     * Shortcut function to the hasher's object interface.                                                            // 11872
	     *                                                                                                                // 11873
	     * @param {WordArray|string} message The message to hash.                                                         // 11874
	     *                                                                                                                // 11875
	     * @return {WordArray} The hash.                                                                                  // 11876
	     *                                                                                                                // 11877
	     * @static                                                                                                        // 11878
	     *                                                                                                                // 11879
	     * @example                                                                                                       // 11880
	     *                                                                                                                // 11881
	     *     var hash = CryptoJS.SHA512('message');                                                                     // 11882
	     *     var hash = CryptoJS.SHA512(wordArray);                                                                     // 11883
	     */                                                                                                               // 11884
	    C.SHA512 = Hasher._createHelper(SHA512);                                                                          // 11885
                                                                                                                       // 11886
	    /**                                                                                                               // 11887
	     * Shortcut function to the HMAC's object interface.                                                              // 11888
	     *                                                                                                                // 11889
	     * @param {WordArray|string} message The message to hash.                                                         // 11890
	     * @param {WordArray|string} key The secret key.                                                                  // 11891
	     *                                                                                                                // 11892
	     * @return {WordArray} The HMAC.                                                                                  // 11893
	     *                                                                                                                // 11894
	     * @static                                                                                                        // 11895
	     *                                                                                                                // 11896
	     * @example                                                                                                       // 11897
	     *                                                                                                                // 11898
	     *     var hmac = CryptoJS.HmacSHA512(message, key);                                                              // 11899
	     */                                                                                                               // 11900
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);                                                                  // 11901
	}());                                                                                                                 // 11902
                                                                                                                       // 11903
                                                                                                                       // 11904
	return CryptoJS.SHA512;                                                                                               // 11905
                                                                                                                       // 11906
}));                                                                                                                   // 11907
},{"./core":52,"./x64-core":83}],82:[function(require,module,exports){                                                 // 11908
;(function (root, factory, undef) {                                                                                    // 11909
	if (typeof exports === "object") {                                                                                    // 11910
		// CommonJS                                                                                                          // 11911
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 11913
	else if (typeof define === "function" && define.amd) {                                                                // 11914
		// AMD                                                                                                               // 11915
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 11916
	}                                                                                                                     // 11917
	else {                                                                                                                // 11918
		// Global (browser)                                                                                                  // 11919
		factory(root.CryptoJS);                                                                                              // 11920
	}                                                                                                                     // 11921
}(this, function (CryptoJS) {                                                                                          // 11922
                                                                                                                       // 11923
	(function () {                                                                                                        // 11924
	    // Shortcuts                                                                                                      // 11925
	    var C = CryptoJS;                                                                                                 // 11926
	    var C_lib = C.lib;                                                                                                // 11927
	    var WordArray = C_lib.WordArray;                                                                                  // 11928
	    var BlockCipher = C_lib.BlockCipher;                                                                              // 11929
	    var C_algo = C.algo;                                                                                              // 11930
                                                                                                                       // 11931
	    // Permuted Choice 1 constants                                                                                    // 11932
	    var PC1 = [                                                                                                       // 11933
	        57, 49, 41, 33, 25, 17, 9,  1,                                                                                // 11934
	        58, 50, 42, 34, 26, 18, 10, 2,                                                                                // 11935
	        59, 51, 43, 35, 27, 19, 11, 3,                                                                                // 11936
	        60, 52, 44, 36, 63, 55, 47, 39,                                                                               // 11937
	        31, 23, 15, 7,  62, 54, 46, 38,                                                                               // 11938
	        30, 22, 14, 6,  61, 53, 45, 37,                                                                               // 11939
	        29, 21, 13, 5,  28, 20, 12, 4                                                                                 // 11940
	    ];                                                                                                                // 11941
                                                                                                                       // 11942
	    // Permuted Choice 2 constants                                                                                    // 11943
	    var PC2 = [                                                                                                       // 11944
	        14, 17, 11, 24, 1,  5,                                                                                        // 11945
	        3,  28, 15, 6,  21, 10,                                                                                       // 11946
	        23, 19, 12, 4,  26, 8,                                                                                        // 11947
	        16, 7,  27, 20, 13, 2,                                                                                        // 11948
	        41, 52, 31, 37, 47, 55,                                                                                       // 11949
	        30, 40, 51, 45, 33, 48,                                                                                       // 11950
	        44, 49, 39, 56, 34, 53,                                                                                       // 11951
	        46, 42, 50, 36, 29, 32                                                                                        // 11952
	    ];                                                                                                                // 11953
                                                                                                                       // 11954
	    // Cumulative bit shift constants                                                                                 // 11955
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];                                // 11956
                                                                                                                       // 11957
	    // SBOXes and round permutation constants                                                                         // 11958
	    var SBOX_P = [                                                                                                    // 11959
	        {                                                                                                             // 11960
	            0x0: 0x808200,                                                                                            // 11961
	            0x10000000: 0x8000,                                                                                       // 11962
	            0x20000000: 0x808002,                                                                                     // 11963
	            0x30000000: 0x2,                                                                                          // 11964
	            0x40000000: 0x200,                                                                                        // 11965
	            0x50000000: 0x808202,                                                                                     // 11966
	            0x60000000: 0x800202,                                                                                     // 11967
	            0x70000000: 0x800000,                                                                                     // 11968
	            0x80000000: 0x202,                                                                                        // 11969
	            0x90000000: 0x800200,                                                                                     // 11970
	            0xa0000000: 0x8200,                                                                                       // 11971
	            0xb0000000: 0x808000,                                                                                     // 11972
	            0xc0000000: 0x8002,                                                                                       // 11973
	            0xd0000000: 0x800002,                                                                                     // 11974
	            0xe0000000: 0x0,                                                                                          // 11975
	            0xf0000000: 0x8202,                                                                                       // 11976
	            0x8000000: 0x0,                                                                                           // 11977
	            0x18000000: 0x808202,                                                                                     // 11978
	            0x28000000: 0x8202,                                                                                       // 11979
	            0x38000000: 0x8000,                                                                                       // 11980
	            0x48000000: 0x808200,                                                                                     // 11981
	            0x58000000: 0x200,                                                                                        // 11982
	            0x68000000: 0x808002,                                                                                     // 11983
	            0x78000000: 0x2,                                                                                          // 11984
	            0x88000000: 0x800200,                                                                                     // 11985
	            0x98000000: 0x8200,                                                                                       // 11986
	            0xa8000000: 0x808000,                                                                                     // 11987
	            0xb8000000: 0x800202,                                                                                     // 11988
	            0xc8000000: 0x800002,                                                                                     // 11989
	            0xd8000000: 0x8002,                                                                                       // 11990
	            0xe8000000: 0x202,                                                                                        // 11991
	            0xf8000000: 0x800000,                                                                                     // 11992
	            0x1: 0x8000,                                                                                              // 11993
	            0x10000001: 0x2,                                                                                          // 11994
	            0x20000001: 0x808200,                                                                                     // 11995
	            0x30000001: 0x800000,                                                                                     // 11996
	            0x40000001: 0x808002,                                                                                     // 11997
	            0x50000001: 0x8200,                                                                                       // 11998
	            0x60000001: 0x200,                                                                                        // 11999
	            0x70000001: 0x800202,                                                                                     // 12000
	            0x80000001: 0x808202,                                                                                     // 12001
	            0x90000001: 0x808000,                                                                                     // 12002
	            0xa0000001: 0x800002,                                                                                     // 12003
	            0xb0000001: 0x8202,                                                                                       // 12004
	            0xc0000001: 0x202,                                                                                        // 12005
	            0xd0000001: 0x800200,                                                                                     // 12006
	            0xe0000001: 0x8002,                                                                                       // 12007
	            0xf0000001: 0x0,                                                                                          // 12008
	            0x8000001: 0x808202,                                                                                      // 12009
	            0x18000001: 0x808000,                                                                                     // 12010
	            0x28000001: 0x800000,                                                                                     // 12011
	            0x38000001: 0x200,                                                                                        // 12012
	            0x48000001: 0x8000,                                                                                       // 12013
	            0x58000001: 0x800002,                                                                                     // 12014
	            0x68000001: 0x2,                                                                                          // 12015
	            0x78000001: 0x8202,                                                                                       // 12016
	            0x88000001: 0x8002,                                                                                       // 12017
	            0x98000001: 0x800202,                                                                                     // 12018
	            0xa8000001: 0x202,                                                                                        // 12019
	            0xb8000001: 0x808200,                                                                                     // 12020
	            0xc8000001: 0x800200,                                                                                     // 12021
	            0xd8000001: 0x0,                                                                                          // 12022
	            0xe8000001: 0x8200,                                                                                       // 12023
	            0xf8000001: 0x808002                                                                                      // 12024
	        },                                                                                                            // 12025
	        {                                                                                                             // 12026
	            0x0: 0x40084010,                                                                                          // 12027
	            0x1000000: 0x4000,                                                                                        // 12028
	            0x2000000: 0x80000,                                                                                       // 12029
	            0x3000000: 0x40080010,                                                                                    // 12030
	            0x4000000: 0x40000010,                                                                                    // 12031
	            0x5000000: 0x40084000,                                                                                    // 12032
	            0x6000000: 0x40004000,                                                                                    // 12033
	            0x7000000: 0x10,                                                                                          // 12034
	            0x8000000: 0x84000,                                                                                       // 12035
	            0x9000000: 0x40004010,                                                                                    // 12036
	            0xa000000: 0x40000000,                                                                                    // 12037
	            0xb000000: 0x84010,                                                                                       // 12038
	            0xc000000: 0x80010,                                                                                       // 12039
	            0xd000000: 0x0,                                                                                           // 12040
	            0xe000000: 0x4010,                                                                                        // 12041
	            0xf000000: 0x40080000,                                                                                    // 12042
	            0x800000: 0x40004000,                                                                                     // 12043
	            0x1800000: 0x84010,                                                                                       // 12044
	            0x2800000: 0x10,                                                                                          // 12045
	            0x3800000: 0x40004010,                                                                                    // 12046
	            0x4800000: 0x40084010,                                                                                    // 12047
	            0x5800000: 0x40000000,                                                                                    // 12048
	            0x6800000: 0x80000,                                                                                       // 12049
	            0x7800000: 0x40080010,                                                                                    // 12050
	            0x8800000: 0x80010,                                                                                       // 12051
	            0x9800000: 0x0,                                                                                           // 12052
	            0xa800000: 0x4000,                                                                                        // 12053
	            0xb800000: 0x40080000,                                                                                    // 12054
	            0xc800000: 0x40000010,                                                                                    // 12055
	            0xd800000: 0x84000,                                                                                       // 12056
	            0xe800000: 0x40084000,                                                                                    // 12057
	            0xf800000: 0x4010,                                                                                        // 12058
	            0x10000000: 0x0,                                                                                          // 12059
	            0x11000000: 0x40080010,                                                                                   // 12060
	            0x12000000: 0x40004010,                                                                                   // 12061
	            0x13000000: 0x40084000,                                                                                   // 12062
	            0x14000000: 0x40080000,                                                                                   // 12063
	            0x15000000: 0x10,                                                                                         // 12064
	            0x16000000: 0x84010,                                                                                      // 12065
	            0x17000000: 0x4000,                                                                                       // 12066
	            0x18000000: 0x4010,                                                                                       // 12067
	            0x19000000: 0x80000,                                                                                      // 12068
	            0x1a000000: 0x80010,                                                                                      // 12069
	            0x1b000000: 0x40000010,                                                                                   // 12070
	            0x1c000000: 0x84000,                                                                                      // 12071
	            0x1d000000: 0x40004000,                                                                                   // 12072
	            0x1e000000: 0x40000000,                                                                                   // 12073
	            0x1f000000: 0x40084010,                                                                                   // 12074
	            0x10800000: 0x84010,                                                                                      // 12075
	            0x11800000: 0x80000,                                                                                      // 12076
	            0x12800000: 0x40080000,                                                                                   // 12077
	            0x13800000: 0x4000,                                                                                       // 12078
	            0x14800000: 0x40004000,                                                                                   // 12079
	            0x15800000: 0x40084010,                                                                                   // 12080
	            0x16800000: 0x10,                                                                                         // 12081
	            0x17800000: 0x40000000,                                                                                   // 12082
	            0x18800000: 0x40084000,                                                                                   // 12083
	            0x19800000: 0x40000010,                                                                                   // 12084
	            0x1a800000: 0x40004010,                                                                                   // 12085
	            0x1b800000: 0x80010,                                                                                      // 12086
	            0x1c800000: 0x0,                                                                                          // 12087
	            0x1d800000: 0x4010,                                                                                       // 12088
	            0x1e800000: 0x40080010,                                                                                   // 12089
	            0x1f800000: 0x84000                                                                                       // 12090
	        },                                                                                                            // 12091
	        {                                                                                                             // 12092
	            0x0: 0x104,                                                                                               // 12093
	            0x100000: 0x0,                                                                                            // 12094
	            0x200000: 0x4000100,                                                                                      // 12095
	            0x300000: 0x10104,                                                                                        // 12096
	            0x400000: 0x10004,                                                                                        // 12097
	            0x500000: 0x4000004,                                                                                      // 12098
	            0x600000: 0x4010104,                                                                                      // 12099
	            0x700000: 0x4010000,                                                                                      // 12100
	            0x800000: 0x4000000,                                                                                      // 12101
	            0x900000: 0x4010100,                                                                                      // 12102
	            0xa00000: 0x10100,                                                                                        // 12103
	            0xb00000: 0x4010004,                                                                                      // 12104
	            0xc00000: 0x4000104,                                                                                      // 12105
	            0xd00000: 0x10000,                                                                                        // 12106
	            0xe00000: 0x4,                                                                                            // 12107
	            0xf00000: 0x100,                                                                                          // 12108
	            0x80000: 0x4010100,                                                                                       // 12109
	            0x180000: 0x4010004,                                                                                      // 12110
	            0x280000: 0x0,                                                                                            // 12111
	            0x380000: 0x4000100,                                                                                      // 12112
	            0x480000: 0x4000004,                                                                                      // 12113
	            0x580000: 0x10000,                                                                                        // 12114
	            0x680000: 0x10004,                                                                                        // 12115
	            0x780000: 0x104,                                                                                          // 12116
	            0x880000: 0x4,                                                                                            // 12117
	            0x980000: 0x100,                                                                                          // 12118
	            0xa80000: 0x4010000,                                                                                      // 12119
	            0xb80000: 0x10104,                                                                                        // 12120
	            0xc80000: 0x10100,                                                                                        // 12121
	            0xd80000: 0x4000104,                                                                                      // 12122
	            0xe80000: 0x4010104,                                                                                      // 12123
	            0xf80000: 0x4000000,                                                                                      // 12124
	            0x1000000: 0x4010100,                                                                                     // 12125
	            0x1100000: 0x10004,                                                                                       // 12126
	            0x1200000: 0x10000,                                                                                       // 12127
	            0x1300000: 0x4000100,                                                                                     // 12128
	            0x1400000: 0x100,                                                                                         // 12129
	            0x1500000: 0x4010104,                                                                                     // 12130
	            0x1600000: 0x4000004,                                                                                     // 12131
	            0x1700000: 0x0,                                                                                           // 12132
	            0x1800000: 0x4000104,                                                                                     // 12133
	            0x1900000: 0x4000000,                                                                                     // 12134
	            0x1a00000: 0x4,                                                                                           // 12135
	            0x1b00000: 0x10100,                                                                                       // 12136
	            0x1c00000: 0x4010000,                                                                                     // 12137
	            0x1d00000: 0x104,                                                                                         // 12138
	            0x1e00000: 0x10104,                                                                                       // 12139
	            0x1f00000: 0x4010004,                                                                                     // 12140
	            0x1080000: 0x4000000,                                                                                     // 12141
	            0x1180000: 0x104,                                                                                         // 12142
	            0x1280000: 0x4010100,                                                                                     // 12143
	            0x1380000: 0x0,                                                                                           // 12144
	            0x1480000: 0x10004,                                                                                       // 12145
	            0x1580000: 0x4000100,                                                                                     // 12146
	            0x1680000: 0x100,                                                                                         // 12147
	            0x1780000: 0x4010004,                                                                                     // 12148
	            0x1880000: 0x10000,                                                                                       // 12149
	            0x1980000: 0x4010104,                                                                                     // 12150
	            0x1a80000: 0x10104,                                                                                       // 12151
	            0x1b80000: 0x4000004,                                                                                     // 12152
	            0x1c80000: 0x4000104,                                                                                     // 12153
	            0x1d80000: 0x4010000,                                                                                     // 12154
	            0x1e80000: 0x4,                                                                                           // 12155
	            0x1f80000: 0x10100                                                                                        // 12156
	        },                                                                                                            // 12157
	        {                                                                                                             // 12158
	            0x0: 0x80401000,                                                                                          // 12159
	            0x10000: 0x80001040,                                                                                      // 12160
	            0x20000: 0x401040,                                                                                        // 12161
	            0x30000: 0x80400000,                                                                                      // 12162
	            0x40000: 0x0,                                                                                             // 12163
	            0x50000: 0x401000,                                                                                        // 12164
	            0x60000: 0x80000040,                                                                                      // 12165
	            0x70000: 0x400040,                                                                                        // 12166
	            0x80000: 0x80000000,                                                                                      // 12167
	            0x90000: 0x400000,                                                                                        // 12168
	            0xa0000: 0x40,                                                                                            // 12169
	            0xb0000: 0x80001000,                                                                                      // 12170
	            0xc0000: 0x80400040,                                                                                      // 12171
	            0xd0000: 0x1040,                                                                                          // 12172
	            0xe0000: 0x1000,                                                                                          // 12173
	            0xf0000: 0x80401040,                                                                                      // 12174
	            0x8000: 0x80001040,                                                                                       // 12175
	            0x18000: 0x40,                                                                                            // 12176
	            0x28000: 0x80400040,                                                                                      // 12177
	            0x38000: 0x80001000,                                                                                      // 12178
	            0x48000: 0x401000,                                                                                        // 12179
	            0x58000: 0x80401040,                                                                                      // 12180
	            0x68000: 0x0,                                                                                             // 12181
	            0x78000: 0x80400000,                                                                                      // 12182
	            0x88000: 0x1000,                                                                                          // 12183
	            0x98000: 0x80401000,                                                                                      // 12184
	            0xa8000: 0x400000,                                                                                        // 12185
	            0xb8000: 0x1040,                                                                                          // 12186
	            0xc8000: 0x80000000,                                                                                      // 12187
	            0xd8000: 0x400040,                                                                                        // 12188
	            0xe8000: 0x401040,                                                                                        // 12189
	            0xf8000: 0x80000040,                                                                                      // 12190
	            0x100000: 0x400040,                                                                                       // 12191
	            0x110000: 0x401000,                                                                                       // 12192
	            0x120000: 0x80000040,                                                                                     // 12193
	            0x130000: 0x0,                                                                                            // 12194
	            0x140000: 0x1040,                                                                                         // 12195
	            0x150000: 0x80400040,                                                                                     // 12196
	            0x160000: 0x80401000,                                                                                     // 12197
	            0x170000: 0x80001040,                                                                                     // 12198
	            0x180000: 0x80401040,                                                                                     // 12199
	            0x190000: 0x80000000,                                                                                     // 12200
	            0x1a0000: 0x80400000,                                                                                     // 12201
	            0x1b0000: 0x401040,                                                                                       // 12202
	            0x1c0000: 0x80001000,                                                                                     // 12203
	            0x1d0000: 0x400000,                                                                                       // 12204
	            0x1e0000: 0x40,                                                                                           // 12205
	            0x1f0000: 0x1000,                                                                                         // 12206
	            0x108000: 0x80400000,                                                                                     // 12207
	            0x118000: 0x80401040,                                                                                     // 12208
	            0x128000: 0x0,                                                                                            // 12209
	            0x138000: 0x401000,                                                                                       // 12210
	            0x148000: 0x400040,                                                                                       // 12211
	            0x158000: 0x80000000,                                                                                     // 12212
	            0x168000: 0x80001040,                                                                                     // 12213
	            0x178000: 0x40,                                                                                           // 12214
	            0x188000: 0x80000040,                                                                                     // 12215
	            0x198000: 0x1000,                                                                                         // 12216
	            0x1a8000: 0x80001000,                                                                                     // 12217
	            0x1b8000: 0x80400040,                                                                                     // 12218
	            0x1c8000: 0x1040,                                                                                         // 12219
	            0x1d8000: 0x80401000,                                                                                     // 12220
	            0x1e8000: 0x400000,                                                                                       // 12221
	            0x1f8000: 0x401040                                                                                        // 12222
	        },                                                                                                            // 12223
	        {                                                                                                             // 12224
	            0x0: 0x80,                                                                                                // 12225
	            0x1000: 0x1040000,                                                                                        // 12226
	            0x2000: 0x40000,                                                                                          // 12227
	            0x3000: 0x20000000,                                                                                       // 12228
	            0x4000: 0x20040080,                                                                                       // 12229
	            0x5000: 0x1000080,                                                                                        // 12230
	            0x6000: 0x21000080,                                                                                       // 12231
	            0x7000: 0x40080,                                                                                          // 12232
	            0x8000: 0x1000000,                                                                                        // 12233
	            0x9000: 0x20040000,                                                                                       // 12234
	            0xa000: 0x20000080,                                                                                       // 12235
	            0xb000: 0x21040080,                                                                                       // 12236
	            0xc000: 0x21040000,                                                                                       // 12237
	            0xd000: 0x0,                                                                                              // 12238
	            0xe000: 0x1040080,                                                                                        // 12239
	            0xf000: 0x21000000,                                                                                       // 12240
	            0x800: 0x1040080,                                                                                         // 12241
	            0x1800: 0x21000080,                                                                                       // 12242
	            0x2800: 0x80,                                                                                             // 12243
	            0x3800: 0x1040000,                                                                                        // 12244
	            0x4800: 0x40000,                                                                                          // 12245
	            0x5800: 0x20040080,                                                                                       // 12246
	            0x6800: 0x21040000,                                                                                       // 12247
	            0x7800: 0x20000000,                                                                                       // 12248
	            0x8800: 0x20040000,                                                                                       // 12249
	            0x9800: 0x0,                                                                                              // 12250
	            0xa800: 0x21040080,                                                                                       // 12251
	            0xb800: 0x1000080,                                                                                        // 12252
	            0xc800: 0x20000080,                                                                                       // 12253
	            0xd800: 0x21000000,                                                                                       // 12254
	            0xe800: 0x1000000,                                                                                        // 12255
	            0xf800: 0x40080,                                                                                          // 12256
	            0x10000: 0x40000,                                                                                         // 12257
	            0x11000: 0x80,                                                                                            // 12258
	            0x12000: 0x20000000,                                                                                      // 12259
	            0x13000: 0x21000080,                                                                                      // 12260
	            0x14000: 0x1000080,                                                                                       // 12261
	            0x15000: 0x21040000,                                                                                      // 12262
	            0x16000: 0x20040080,                                                                                      // 12263
	            0x17000: 0x1000000,                                                                                       // 12264
	            0x18000: 0x21040080,                                                                                      // 12265
	            0x19000: 0x21000000,                                                                                      // 12266
	            0x1a000: 0x1040000,                                                                                       // 12267
	            0x1b000: 0x20040000,                                                                                      // 12268
	            0x1c000: 0x40080,                                                                                         // 12269
	            0x1d000: 0x20000080,                                                                                      // 12270
	            0x1e000: 0x0,                                                                                             // 12271
	            0x1f000: 0x1040080,                                                                                       // 12272
	            0x10800: 0x21000080,                                                                                      // 12273
	            0x11800: 0x1000000,                                                                                       // 12274
	            0x12800: 0x1040000,                                                                                       // 12275
	            0x13800: 0x20040080,                                                                                      // 12276
	            0x14800: 0x20000000,                                                                                      // 12277
	            0x15800: 0x1040080,                                                                                       // 12278
	            0x16800: 0x80,                                                                                            // 12279
	            0x17800: 0x21040000,                                                                                      // 12280
	            0x18800: 0x40080,                                                                                         // 12281
	            0x19800: 0x21040080,                                                                                      // 12282
	            0x1a800: 0x0,                                                                                             // 12283
	            0x1b800: 0x21000000,                                                                                      // 12284
	            0x1c800: 0x1000080,                                                                                       // 12285
	            0x1d800: 0x40000,                                                                                         // 12286
	            0x1e800: 0x20040000,                                                                                      // 12287
	            0x1f800: 0x20000080                                                                                       // 12288
	        },                                                                                                            // 12289
	        {                                                                                                             // 12290
	            0x0: 0x10000008,                                                                                          // 12291
	            0x100: 0x2000,                                                                                            // 12292
	            0x200: 0x10200000,                                                                                        // 12293
	            0x300: 0x10202008,                                                                                        // 12294
	            0x400: 0x10002000,                                                                                        // 12295
	            0x500: 0x200000,                                                                                          // 12296
	            0x600: 0x200008,                                                                                          // 12297
	            0x700: 0x10000000,                                                                                        // 12298
	            0x800: 0x0,                                                                                               // 12299
	            0x900: 0x10002008,                                                                                        // 12300
	            0xa00: 0x202000,                                                                                          // 12301
	            0xb00: 0x8,                                                                                               // 12302
	            0xc00: 0x10200008,                                                                                        // 12303
	            0xd00: 0x202008,                                                                                          // 12304
	            0xe00: 0x2008,                                                                                            // 12305
	            0xf00: 0x10202000,                                                                                        // 12306
	            0x80: 0x10200000,                                                                                         // 12307
	            0x180: 0x10202008,                                                                                        // 12308
	            0x280: 0x8,                                                                                               // 12309
	            0x380: 0x200000,                                                                                          // 12310
	            0x480: 0x202008,                                                                                          // 12311
	            0x580: 0x10000008,                                                                                        // 12312
	            0x680: 0x10002000,                                                                                        // 12313
	            0x780: 0x2008,                                                                                            // 12314
	            0x880: 0x200008,                                                                                          // 12315
	            0x980: 0x2000,                                                                                            // 12316
	            0xa80: 0x10002008,                                                                                        // 12317
	            0xb80: 0x10200008,                                                                                        // 12318
	            0xc80: 0x0,                                                                                               // 12319
	            0xd80: 0x10202000,                                                                                        // 12320
	            0xe80: 0x202000,                                                                                          // 12321
	            0xf80: 0x10000000,                                                                                        // 12322
	            0x1000: 0x10002000,                                                                                       // 12323
	            0x1100: 0x10200008,                                                                                       // 12324
	            0x1200: 0x10202008,                                                                                       // 12325
	            0x1300: 0x2008,                                                                                           // 12326
	            0x1400: 0x200000,                                                                                         // 12327
	            0x1500: 0x10000000,                                                                                       // 12328
	            0x1600: 0x10000008,                                                                                       // 12329
	            0x1700: 0x202000,                                                                                         // 12330
	            0x1800: 0x202008,                                                                                         // 12331
	            0x1900: 0x0,                                                                                              // 12332
	            0x1a00: 0x8,                                                                                              // 12333
	            0x1b00: 0x10200000,                                                                                       // 12334
	            0x1c00: 0x2000,                                                                                           // 12335
	            0x1d00: 0x10002008,                                                                                       // 12336
	            0x1e00: 0x10202000,                                                                                       // 12337
	            0x1f00: 0x200008,                                                                                         // 12338
	            0x1080: 0x8,                                                                                              // 12339
	            0x1180: 0x202000,                                                                                         // 12340
	            0x1280: 0x200000,                                                                                         // 12341
	            0x1380: 0x10000008,                                                                                       // 12342
	            0x1480: 0x10002000,                                                                                       // 12343
	            0x1580: 0x2008,                                                                                           // 12344
	            0x1680: 0x10202008,                                                                                       // 12345
	            0x1780: 0x10200000,                                                                                       // 12346
	            0x1880: 0x10202000,                                                                                       // 12347
	            0x1980: 0x10200008,                                                                                       // 12348
	            0x1a80: 0x2000,                                                                                           // 12349
	            0x1b80: 0x202008,                                                                                         // 12350
	            0x1c80: 0x200008,                                                                                         // 12351
	            0x1d80: 0x0,                                                                                              // 12352
	            0x1e80: 0x10000000,                                                                                       // 12353
	            0x1f80: 0x10002008                                                                                        // 12354
	        },                                                                                                            // 12355
	        {                                                                                                             // 12356
	            0x0: 0x100000,                                                                                            // 12357
	            0x10: 0x2000401,                                                                                          // 12358
	            0x20: 0x400,                                                                                              // 12359
	            0x30: 0x100401,                                                                                           // 12360
	            0x40: 0x2100401,                                                                                          // 12361
	            0x50: 0x0,                                                                                                // 12362
	            0x60: 0x1,                                                                                                // 12363
	            0x70: 0x2100001,                                                                                          // 12364
	            0x80: 0x2000400,                                                                                          // 12365
	            0x90: 0x100001,                                                                                           // 12366
	            0xa0: 0x2000001,                                                                                          // 12367
	            0xb0: 0x2100400,                                                                                          // 12368
	            0xc0: 0x2100000,                                                                                          // 12369
	            0xd0: 0x401,                                                                                              // 12370
	            0xe0: 0x100400,                                                                                           // 12371
	            0xf0: 0x2000000,                                                                                          // 12372
	            0x8: 0x2100001,                                                                                           // 12373
	            0x18: 0x0,                                                                                                // 12374
	            0x28: 0x2000401,                                                                                          // 12375
	            0x38: 0x2100400,                                                                                          // 12376
	            0x48: 0x100000,                                                                                           // 12377
	            0x58: 0x2000001,                                                                                          // 12378
	            0x68: 0x2000000,                                                                                          // 12379
	            0x78: 0x401,                                                                                              // 12380
	            0x88: 0x100401,                                                                                           // 12381
	            0x98: 0x2000400,                                                                                          // 12382
	            0xa8: 0x2100000,                                                                                          // 12383
	            0xb8: 0x100001,                                                                                           // 12384
	            0xc8: 0x400,                                                                                              // 12385
	            0xd8: 0x2100401,                                                                                          // 12386
	            0xe8: 0x1,                                                                                                // 12387
	            0xf8: 0x100400,                                                                                           // 12388
	            0x100: 0x2000000,                                                                                         // 12389
	            0x110: 0x100000,                                                                                          // 12390
	            0x120: 0x2000401,                                                                                         // 12391
	            0x130: 0x2100001,                                                                                         // 12392
	            0x140: 0x100001,                                                                                          // 12393
	            0x150: 0x2000400,                                                                                         // 12394
	            0x160: 0x2100400,                                                                                         // 12395
	            0x170: 0x100401,                                                                                          // 12396
	            0x180: 0x401,                                                                                             // 12397
	            0x190: 0x2100401,                                                                                         // 12398
	            0x1a0: 0x100400,                                                                                          // 12399
	            0x1b0: 0x1,                                                                                               // 12400
	            0x1c0: 0x0,                                                                                               // 12401
	            0x1d0: 0x2100000,                                                                                         // 12402
	            0x1e0: 0x2000001,                                                                                         // 12403
	            0x1f0: 0x400,                                                                                             // 12404
	            0x108: 0x100400,                                                                                          // 12405
	            0x118: 0x2000401,                                                                                         // 12406
	            0x128: 0x2100001,                                                                                         // 12407
	            0x138: 0x1,                                                                                               // 12408
	            0x148: 0x2000000,                                                                                         // 12409
	            0x158: 0x100000,                                                                                          // 12410
	            0x168: 0x401,                                                                                             // 12411
	            0x178: 0x2100400,                                                                                         // 12412
	            0x188: 0x2000001,                                                                                         // 12413
	            0x198: 0x2100000,                                                                                         // 12414
	            0x1a8: 0x0,                                                                                               // 12415
	            0x1b8: 0x2100401,                                                                                         // 12416
	            0x1c8: 0x100401,                                                                                          // 12417
	            0x1d8: 0x400,                                                                                             // 12418
	            0x1e8: 0x2000400,                                                                                         // 12419
	            0x1f8: 0x100001                                                                                           // 12420
	        },                                                                                                            // 12421
	        {                                                                                                             // 12422
	            0x0: 0x8000820,                                                                                           // 12423
	            0x1: 0x20000,                                                                                             // 12424
	            0x2: 0x8000000,                                                                                           // 12425
	            0x3: 0x20,                                                                                                // 12426
	            0x4: 0x20020,                                                                                             // 12427
	            0x5: 0x8020820,                                                                                           // 12428
	            0x6: 0x8020800,                                                                                           // 12429
	            0x7: 0x800,                                                                                               // 12430
	            0x8: 0x8020000,                                                                                           // 12431
	            0x9: 0x8000800,                                                                                           // 12432
	            0xa: 0x20800,                                                                                             // 12433
	            0xb: 0x8020020,                                                                                           // 12434
	            0xc: 0x820,                                                                                               // 12435
	            0xd: 0x0,                                                                                                 // 12436
	            0xe: 0x8000020,                                                                                           // 12437
	            0xf: 0x20820,                                                                                             // 12438
	            0x80000000: 0x800,                                                                                        // 12439
	            0x80000001: 0x8020820,                                                                                    // 12440
	            0x80000002: 0x8000820,                                                                                    // 12441
	            0x80000003: 0x8000000,                                                                                    // 12442
	            0x80000004: 0x8020000,                                                                                    // 12443
	            0x80000005: 0x20800,                                                                                      // 12444
	            0x80000006: 0x20820,                                                                                      // 12445
	            0x80000007: 0x20,                                                                                         // 12446
	            0x80000008: 0x8000020,                                                                                    // 12447
	            0x80000009: 0x820,                                                                                        // 12448
	            0x8000000a: 0x20020,                                                                                      // 12449
	            0x8000000b: 0x8020800,                                                                                    // 12450
	            0x8000000c: 0x0,                                                                                          // 12451
	            0x8000000d: 0x8020020,                                                                                    // 12452
	            0x8000000e: 0x8000800,                                                                                    // 12453
	            0x8000000f: 0x20000,                                                                                      // 12454
	            0x10: 0x20820,                                                                                            // 12455
	            0x11: 0x8020800,                                                                                          // 12456
	            0x12: 0x20,                                                                                               // 12457
	            0x13: 0x800,                                                                                              // 12458
	            0x14: 0x8000800,                                                                                          // 12459
	            0x15: 0x8000020,                                                                                          // 12460
	            0x16: 0x8020020,                                                                                          // 12461
	            0x17: 0x20000,                                                                                            // 12462
	            0x18: 0x0,                                                                                                // 12463
	            0x19: 0x20020,                                                                                            // 12464
	            0x1a: 0x8020000,                                                                                          // 12465
	            0x1b: 0x8000820,                                                                                          // 12466
	            0x1c: 0x8020820,                                                                                          // 12467
	            0x1d: 0x20800,                                                                                            // 12468
	            0x1e: 0x820,                                                                                              // 12469
	            0x1f: 0x8000000,                                                                                          // 12470
	            0x80000010: 0x20000,                                                                                      // 12471
	            0x80000011: 0x800,                                                                                        // 12472
	            0x80000012: 0x8020020,                                                                                    // 12473
	            0x80000013: 0x20820,                                                                                      // 12474
	            0x80000014: 0x20,                                                                                         // 12475
	            0x80000015: 0x8020000,                                                                                    // 12476
	            0x80000016: 0x8000000,                                                                                    // 12477
	            0x80000017: 0x8000820,                                                                                    // 12478
	            0x80000018: 0x8020820,                                                                                    // 12479
	            0x80000019: 0x8000020,                                                                                    // 12480
	            0x8000001a: 0x8000800,                                                                                    // 12481
	            0x8000001b: 0x0,                                                                                          // 12482
	            0x8000001c: 0x20800,                                                                                      // 12483
	            0x8000001d: 0x820,                                                                                        // 12484
	            0x8000001e: 0x20020,                                                                                      // 12485
	            0x8000001f: 0x8020800                                                                                     // 12486
	        }                                                                                                             // 12487
	    ];                                                                                                                // 12488
                                                                                                                       // 12489
	    // Masks that select the SBOX input                                                                               // 12490
	    var SBOX_MASK = [                                                                                                 // 12491
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,                                                               // 12492
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f                                                                // 12493
	    ];                                                                                                                // 12494
                                                                                                                       // 12495
	    /**                                                                                                               // 12496
	     * DES block cipher algorithm.                                                                                    // 12497
	     */                                                                                                               // 12498
	    var DES = C_algo.DES = BlockCipher.extend({                                                                       // 12499
	        _doReset: function () {                                                                                       // 12500
	            // Shortcuts                                                                                              // 12501
	            var key = this._key;                                                                                      // 12502
	            var keyWords = key.words;                                                                                 // 12503
                                                                                                                       // 12504
	            // Select 56 bits according to PC1                                                                        // 12505
	            var keyBits = [];                                                                                         // 12506
	            for (var i = 0; i < 56; i++) {                                                                            // 12507
	                var keyBitPos = PC1[i] - 1;                                                                           // 12508
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;                               // 12509
	            }                                                                                                         // 12510
                                                                                                                       // 12511
	            // Assemble 16 subkeys                                                                                    // 12512
	            var subKeys = this._subKeys = [];                                                                         // 12513
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {                                                          // 12514
	                // Create subkey                                                                                      // 12515
	                var subKey = subKeys[nSubKey] = [];                                                                   // 12516
                                                                                                                       // 12517
	                // Shortcut                                                                                           // 12518
	                var bitShift = BIT_SHIFTS[nSubKey];                                                                   // 12519
                                                                                                                       // 12520
	                // Select 48 bits according to PC2                                                                    // 12521
	                for (var i = 0; i < 24; i++) {                                                                        // 12522
	                    // Select from the left 28 key bits                                                               // 12523
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);                   // 12524
                                                                                                                       // 12525
	                    // Select from the right 28 key bits                                                              // 12526
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }                                                                                                     // 12528
                                                                                                                       // 12529
	                // Since each subkey is applied to an expanded 32-bit input,                                          // 12530
	                // the subkey can be broken into 8 values scaled to 32-bits,                                          // 12531
	                // which allows the key to be used without expansion                                                  // 12532
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);                                                    // 12533
	                for (var i = 1; i < 7; i++) {                                                                         // 12534
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);                                                      // 12535
	                }                                                                                                     // 12536
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);                                                    // 12537
	            }                                                                                                         // 12538
                                                                                                                       // 12539
	            // Compute inverse subkeys                                                                                // 12540
	            var invSubKeys = this._invSubKeys = [];                                                                   // 12541
	            for (var i = 0; i < 16; i++) {                                                                            // 12542
	                invSubKeys[i] = subKeys[15 - i];                                                                      // 12543
	            }                                                                                                         // 12544
	        },                                                                                                            // 12545
                                                                                                                       // 12546
	        encryptBlock: function (M, offset) {                                                                          // 12547
	            this._doCryptBlock(M, offset, this._subKeys);                                                             // 12548
	        },                                                                                                            // 12549
                                                                                                                       // 12550
	        decryptBlock: function (M, offset) {                                                                          // 12551
	            this._doCryptBlock(M, offset, this._invSubKeys);                                                          // 12552
	        },                                                                                                            // 12553
                                                                                                                       // 12554
	        _doCryptBlock: function (M, offset, subKeys) {                                                                // 12555
	            // Get input                                                                                              // 12556
	            this._lBlock = M[offset];                                                                                 // 12557
	            this._rBlock = M[offset + 1];                                                                             // 12558
                                                                                                                       // 12559
	            // Initial permutation                                                                                    // 12560
	            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12561
	            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12562
	            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12563
	            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12564
	            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12565
                                                                                                                       // 12566
	            // Rounds                                                                                                 // 12567
	            for (var round = 0; round < 16; round++) {                                                                // 12568
	                // Shortcuts                                                                                          // 12569
	                var subKey = subKeys[round];                                                                          // 12570
	                var lBlock = this._lBlock;                                                                            // 12571
	                var rBlock = this._rBlock;                                                                            // 12572
                                                                                                                       // 12573
	                // Feistel function                                                                                   // 12574
	                var f = 0;                                                                                            // 12575
	                for (var i = 0; i < 8; i++) {                                                                         // 12576
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];                                      // 12577
	                }                                                                                                     // 12578
	                this._lBlock = rBlock;                                                                                // 12579
	                this._rBlock = lBlock ^ f;                                                                            // 12580
	            }                                                                                                         // 12581
                                                                                                                       // 12582
	            // Undo swap from last round                                                                              // 12583
	            var t = this._lBlock;                                                                                     // 12584
	            this._lBlock = this._rBlock;                                                                              // 12585
	            this._rBlock = t;                                                                                         // 12586
                                                                                                                       // 12587
	            // Final permutation                                                                                      // 12588
	            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12589
	            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12590
	            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12591
	            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12592
	            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12593
                                                                                                                       // 12594
	            // Set output                                                                                             // 12595
	            M[offset] = this._lBlock;                                                                                 // 12596
	            M[offset + 1] = this._rBlock;                                                                             // 12597
	        },                                                                                                            // 12598
                                                                                                                       // 12599
	        keySize: 64/32,                                                                                               // 12600
                                                                                                                       // 12601
	        ivSize: 64/32,                                                                                                // 12602
                                                                                                                       // 12603
	        blockSize: 64/32                                                                                              // 12604
	    });                                                                                                               // 12605
                                                                                                                       // 12606
	    // Swap bits across the left and right words                                                                      // 12607
	    function exchangeLR(offset, mask) {                                                                               // 12608
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;                                                    // 12609
	        this._rBlock ^= t;                                                                                            // 12610
	        this._lBlock ^= t << offset;                                                                                  // 12611
	    }                                                                                                                 // 12612
                                                                                                                       // 12613
	    function exchangeRL(offset, mask) {                                                                               // 12614
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;                                                    // 12615
	        this._lBlock ^= t;                                                                                            // 12616
	        this._rBlock ^= t << offset;                                                                                  // 12617
	    }                                                                                                                 // 12618
                                                                                                                       // 12619
	    /**                                                                                                               // 12620
	     * Shortcut functions to the cipher's object interface.                                                           // 12621
	     *                                                                                                                // 12622
	     * @example                                                                                                       // 12623
	     *                                                                                                                // 12624
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);                                                  // 12625
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);                                               // 12626
	     */                                                                                                               // 12627
	    C.DES = BlockCipher._createHelper(DES);                                                                           // 12628
                                                                                                                       // 12629
	    /**                                                                                                               // 12630
	     * Triple-DES block cipher algorithm.                                                                             // 12631
	     */                                                                                                               // 12632
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({                                                           // 12633
	        _doReset: function () {                                                                                       // 12634
	            // Shortcuts                                                                                              // 12635
	            var key = this._key;                                                                                      // 12636
	            var keyWords = key.words;                                                                                 // 12637
                                                                                                                       // 12638
	            // Create DES instances                                                                                   // 12639
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));                                 // 12640
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));                                 // 12641
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));                                 // 12642
	        },                                                                                                            // 12643
                                                                                                                       // 12644
	        encryptBlock: function (M, offset) {                                                                          // 12645
	            this._des1.encryptBlock(M, offset);                                                                       // 12646
	            this._des2.decryptBlock(M, offset);                                                                       // 12647
	            this._des3.encryptBlock(M, offset);                                                                       // 12648
	        },                                                                                                            // 12649
                                                                                                                       // 12650
	        decryptBlock: function (M, offset) {                                                                          // 12651
	            this._des3.decryptBlock(M, offset);                                                                       // 12652
	            this._des2.encryptBlock(M, offset);                                                                       // 12653
	            this._des1.decryptBlock(M, offset);                                                                       // 12654
	        },                                                                                                            // 12655
                                                                                                                       // 12656
	        keySize: 192/32,                                                                                              // 12657
                                                                                                                       // 12658
	        ivSize: 64/32,                                                                                                // 12659
                                                                                                                       // 12660
	        blockSize: 64/32                                                                                              // 12661
	    });                                                                                                               // 12662
                                                                                                                       // 12663
	    /**                                                                                                               // 12664
	     * Shortcut functions to the cipher's object interface.                                                           // 12665
	     *                                                                                                                // 12666
	     * @example                                                                                                       // 12667
	     *                                                                                                                // 12668
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);                                            // 12669
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);                                         // 12670
	     */                                                                                                               // 12671
	    C.TripleDES = BlockCipher._createHelper(TripleDES);                                                               // 12672
	}());                                                                                                                 // 12673
                                                                                                                       // 12674
                                                                                                                       // 12675
	return CryptoJS.TripleDES;                                                                                            // 12676
                                                                                                                       // 12677
}));                                                                                                                   // 12678
},{"./cipher-core":51,"./core":52,"./enc-base64":53,"./evpkdf":55,"./md5":60}],83:[function(require,module,exports){   // 12679
;(function (root, factory) {                                                                                           // 12680
	if (typeof exports === "object") {                                                                                    // 12681
		// CommonJS                                                                                                          // 12682
		module.exports = exports = factory(require("./core"));                                                               // 12683
	}                                                                                                                     // 12684
	else if (typeof define === "function" && define.amd) {                                                                // 12685
		// AMD                                                                                                               // 12686
		define(["./core"], factory);                                                                                         // 12687
	}                                                                                                                     // 12688
	else {                                                                                                                // 12689
		// Global (browser)                                                                                                  // 12690
		factory(root.CryptoJS);                                                                                              // 12691
	}                                                                                                                     // 12692
}(this, function (CryptoJS) {                                                                                          // 12693
                                                                                                                       // 12694
	(function (undefined) {                                                                                               // 12695
	    // Shortcuts                                                                                                      // 12696
	    var C = CryptoJS;                                                                                                 // 12697
	    var C_lib = C.lib;                                                                                                // 12698
	    var Base = C_lib.Base;                                                                                            // 12699
	    var X32WordArray = C_lib.WordArray;                                                                               // 12700
                                                                                                                       // 12701
	    /**                                                                                                               // 12702
	     * x64 namespace.                                                                                                 // 12703
	     */                                                                                                               // 12704
	    var C_x64 = C.x64 = {};                                                                                           // 12705
                                                                                                                       // 12706
	    /**                                                                                                               // 12707
	     * A 64-bit word.                                                                                                 // 12708
	     */                                                                                                               // 12709
	    var X64Word = C_x64.Word = Base.extend({                                                                          // 12710
	        /**                                                                                                           // 12711
	         * Initializes a newly created 64-bit word.                                                                   // 12712
	         *                                                                                                            // 12713
	         * @param {number} high The high 32 bits.                                                                     // 12714
	         * @param {number} low The low 32 bits.                                                                       // 12715
	         *                                                                                                            // 12716
	         * @example                                                                                                   // 12717
	         *                                                                                                            // 12718
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);                                        // 12719
	         */                                                                                                           // 12720
	        init: function (high, low) {                                                                                  // 12721
	            this.high = high;                                                                                         // 12722
	            this.low = low;                                                                                           // 12723
	        }                                                                                                             // 12724
                                                                                                                       // 12725
	        /**                                                                                                           // 12726
	         * Bitwise NOTs this word.                                                                                    // 12727
	         *                                                                                                            // 12728
	         * @return {X64Word} A new x64-Word object after negating.                                                    // 12729
	         *                                                                                                            // 12730
	         * @example                                                                                                   // 12731
	         *                                                                                                            // 12732
	         *     var negated = x64Word.not();                                                                           // 12733
	         */                                                                                                           // 12734
	        // not: function () {                                                                                         // 12735
	            // var high = ~this.high;                                                                                 // 12736
	            // var low = ~this.low;                                                                                   // 12737
                                                                                                                       // 12738
	            // return X64Word.create(high, low);                                                                      // 12739
	        // },                                                                                                         // 12740
                                                                                                                       // 12741
	        /**                                                                                                           // 12742
	         * Bitwise ANDs this word with the passed word.                                                               // 12743
	         *                                                                                                            // 12744
	         * @param {X64Word} word The x64-Word to AND with this word.                                                  // 12745
	         *                                                                                                            // 12746
	         * @return {X64Word} A new x64-Word object after ANDing.                                                      // 12747
	         *                                                                                                            // 12748
	         * @example                                                                                                   // 12749
	         *                                                                                                            // 12750
	         *     var anded = x64Word.and(anotherX64Word);                                                               // 12751
	         */                                                                                                           // 12752
	        // and: function (word) {                                                                                     // 12753
	            // var high = this.high & word.high;                                                                      // 12754
	            // var low = this.low & word.low;                                                                         // 12755
                                                                                                                       // 12756
	            // return X64Word.create(high, low);                                                                      // 12757
	        // },                                                                                                         // 12758
                                                                                                                       // 12759
	        /**                                                                                                           // 12760
	         * Bitwise ORs this word with the passed word.                                                                // 12761
	         *                                                                                                            // 12762
	         * @param {X64Word} word The x64-Word to OR with this word.                                                   // 12763
	         *                                                                                                            // 12764
	         * @return {X64Word} A new x64-Word object after ORing.                                                       // 12765
	         *                                                                                                            // 12766
	         * @example                                                                                                   // 12767
	         *                                                                                                            // 12768
	         *     var ored = x64Word.or(anotherX64Word);                                                                 // 12769
	         */                                                                                                           // 12770
	        // or: function (word) {                                                                                      // 12771
	            // var high = this.high | word.high;                                                                      // 12772
	            // var low = this.low | word.low;                                                                         // 12773
                                                                                                                       // 12774
	            // return X64Word.create(high, low);                                                                      // 12775
	        // },                                                                                                         // 12776
                                                                                                                       // 12777
	        /**                                                                                                           // 12778
	         * Bitwise XORs this word with the passed word.                                                               // 12779
	         *                                                                                                            // 12780
	         * @param {X64Word} word The x64-Word to XOR with this word.                                                  // 12781
	         *                                                                                                            // 12782
	         * @return {X64Word} A new x64-Word object after XORing.                                                      // 12783
	         *                                                                                                            // 12784
	         * @example                                                                                                   // 12785
	         *                                                                                                            // 12786
	         *     var xored = x64Word.xor(anotherX64Word);                                                               // 12787
	         */                                                                                                           // 12788
	        // xor: function (word) {                                                                                     // 12789
	            // var high = this.high ^ word.high;                                                                      // 12790
	            // var low = this.low ^ word.low;                                                                         // 12791
                                                                                                                       // 12792
	            // return X64Word.create(high, low);                                                                      // 12793
	        // },                                                                                                         // 12794
                                                                                                                       // 12795
	        /**                                                                                                           // 12796
	         * Shifts this word n bits to the left.                                                                       // 12797
	         *                                                                                                            // 12798
	         * @param {number} n The number of bits to shift.                                                             // 12799
	         *                                                                                                            // 12800
	         * @return {X64Word} A new x64-Word object after shifting.                                                    // 12801
	         *                                                                                                            // 12802
	         * @example                                                                                                   // 12803
	         *                                                                                                            // 12804
	         *     var shifted = x64Word.shiftL(25);                                                                      // 12805
	         */                                                                                                           // 12806
	        // shiftL: function (n) {                                                                                     // 12807
	            // if (n < 32) {                                                                                          // 12808
	                // var high = (this.high << n) | (this.low >>> (32 - n));                                             // 12809
	                // var low = this.low << n;                                                                           // 12810
	            // } else {                                                                                               // 12811
	                // var high = this.low << (n - 32);                                                                   // 12812
	                // var low = 0;                                                                                       // 12813
	            // }                                                                                                      // 12814
                                                                                                                       // 12815
	            // return X64Word.create(high, low);                                                                      // 12816
	        // },                                                                                                         // 12817
                                                                                                                       // 12818
	        /**                                                                                                           // 12819
	         * Shifts this word n bits to the right.                                                                      // 12820
	         *                                                                                                            // 12821
	         * @param {number} n The number of bits to shift.                                                             // 12822
	         *                                                                                                            // 12823
	         * @return {X64Word} A new x64-Word object after shifting.                                                    // 12824
	         *                                                                                                            // 12825
	         * @example                                                                                                   // 12826
	         *                                                                                                            // 12827
	         *     var shifted = x64Word.shiftR(7);                                                                       // 12828
	         */                                                                                                           // 12829
	        // shiftR: function (n) {                                                                                     // 12830
	            // if (n < 32) {                                                                                          // 12831
	                // var low = (this.low >>> n) | (this.high << (32 - n));                                              // 12832
	                // var high = this.high >>> n;                                                                        // 12833
	            // } else {                                                                                               // 12834
	                // var low = this.high >>> (n - 32);                                                                  // 12835
	                // var high = 0;                                                                                      // 12836
	            // }                                                                                                      // 12837
                                                                                                                       // 12838
	            // return X64Word.create(high, low);                                                                      // 12839
	        // },                                                                                                         // 12840
                                                                                                                       // 12841
	        /**                                                                                                           // 12842
	         * Rotates this word n bits to the left.                                                                      // 12843
	         *                                                                                                            // 12844
	         * @param {number} n The number of bits to rotate.                                                            // 12845
	         *                                                                                                            // 12846
	         * @return {X64Word} A new x64-Word object after rotating.                                                    // 12847
	         *                                                                                                            // 12848
	         * @example                                                                                                   // 12849
	         *                                                                                                            // 12850
	         *     var rotated = x64Word.rotL(25);                                                                        // 12851
	         */                                                                                                           // 12852
	        // rotL: function (n) {                                                                                       // 12853
	            // return this.shiftL(n).or(this.shiftR(64 - n));                                                         // 12854
	        // },                                                                                                         // 12855
                                                                                                                       // 12856
	        /**                                                                                                           // 12857
	         * Rotates this word n bits to the right.                                                                     // 12858
	         *                                                                                                            // 12859
	         * @param {number} n The number of bits to rotate.                                                            // 12860
	         *                                                                                                            // 12861
	         * @return {X64Word} A new x64-Word object after rotating.                                                    // 12862
	         *                                                                                                            // 12863
	         * @example                                                                                                   // 12864
	         *                                                                                                            // 12865
	         *     var rotated = x64Word.rotR(7);                                                                         // 12866
	         */                                                                                                           // 12867
	        // rotR: function (n) {                                                                                       // 12868
	            // return this.shiftR(n).or(this.shiftL(64 - n));                                                         // 12869
	        // },                                                                                                         // 12870
                                                                                                                       // 12871
	        /**                                                                                                           // 12872
	         * Adds this word with the passed word.                                                                       // 12873
	         *                                                                                                            // 12874
	         * @param {X64Word} word The x64-Word to add with this word.                                                  // 12875
	         *                                                                                                            // 12876
	         * @return {X64Word} A new x64-Word object after adding.                                                      // 12877
	         *                                                                                                            // 12878
	         * @example                                                                                                   // 12879
	         *                                                                                                            // 12880
	         *     var added = x64Word.add(anotherX64Word);                                                               // 12881
	         */                                                                                                           // 12882
	        // add: function (word) {                                                                                     // 12883
	            // var low = (this.low + word.low) | 0;                                                                   // 12884
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;                                                    // 12885
	            // var high = (this.high + word.high + carry) | 0;                                                        // 12886
                                                                                                                       // 12887
	            // return X64Word.create(high, low);                                                                      // 12888
	        // }                                                                                                          // 12889
	    });                                                                                                               // 12890
                                                                                                                       // 12891
	    /**                                                                                                               // 12892
	     * An array of 64-bit words.                                                                                      // 12893
	     *                                                                                                                // 12894
	     * @property {Array} words The array of CryptoJS.x64.Word objects.                                                // 12895
	     * @property {number} sigBytes The number of significant bytes in this word array.                                // 12896
	     */                                                                                                               // 12897
	    var X64WordArray = C_x64.WordArray = Base.extend({                                                                // 12898
	        /**                                                                                                           // 12899
	         * Initializes a newly created word array.                                                                    // 12900
	         *                                                                                                            // 12901
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.                                     // 12902
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 12903
	         *                                                                                                            // 12904
	         * @example                                                                                                   // 12905
	         *                                                                                                            // 12906
	         *     var wordArray = CryptoJS.x64.WordArray.create();                                                       // 12907
	         *                                                                                                            // 12908
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 12909
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 12910
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 12911
	         *     ]);                                                                                                    // 12912
	         *                                                                                                            // 12913
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 12914
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 12915
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 12916
	         *     ], 10);                                                                                                // 12917
	         */                                                                                                           // 12918
	        init: function (words, sigBytes) {                                                                            // 12919
	            words = this.words = words || [];                                                                         // 12920
                                                                                                                       // 12921
	            if (sigBytes != undefined) {                                                                              // 12922
	                this.sigBytes = sigBytes;                                                                             // 12923
	            } else {                                                                                                  // 12924
	                this.sigBytes = words.length * 8;                                                                     // 12925
	            }                                                                                                         // 12926
	        },                                                                                                            // 12927
                                                                                                                       // 12928
	        /**                                                                                                           // 12929
	         * Converts this 64-bit word array to a 32-bit word array.                                                    // 12930
	         *                                                                                                            // 12931
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.                            // 12932
	         *                                                                                                            // 12933
	         * @example                                                                                                   // 12934
	         *                                                                                                            // 12935
	         *     var x32WordArray = x64WordArray.toX32();                                                               // 12936
	         */                                                                                                           // 12937
	        toX32: function () {                                                                                          // 12938
	            // Shortcuts                                                                                              // 12939
	            var x64Words = this.words;                                                                                // 12940
	            var x64WordsLength = x64Words.length;                                                                     // 12941
                                                                                                                       // 12942
	            // Convert                                                                                                // 12943
	            var x32Words = [];                                                                                        // 12944
	            for (var i = 0; i < x64WordsLength; i++) {                                                                // 12945
	                var x64Word = x64Words[i];                                                                            // 12946
	                x32Words.push(x64Word.high);                                                                          // 12947
	                x32Words.push(x64Word.low);                                                                           // 12948
	            }                                                                                                         // 12949
                                                                                                                       // 12950
	            return X32WordArray.create(x32Words, this.sigBytes);                                                      // 12951
	        },                                                                                                            // 12952
                                                                                                                       // 12953
	        /**                                                                                                           // 12954
	         * Creates a copy of this word array.                                                                         // 12955
	         *                                                                                                            // 12956
	         * @return {X64WordArray} The clone.                                                                          // 12957
	         *                                                                                                            // 12958
	         * @example                                                                                                   // 12959
	         *                                                                                                            // 12960
	         *     var clone = x64WordArray.clone();                                                                      // 12961
	         */                                                                                                           // 12962
	        clone: function () {                                                                                          // 12963
	            var clone = Base.clone.call(this);                                                                        // 12964
                                                                                                                       // 12965
	            // Clone "words" array                                                                                    // 12966
	            var words = clone.words = this.words.slice(0);                                                            // 12967
                                                                                                                       // 12968
	            // Clone each X64Word object                                                                              // 12969
	            var wordsLength = words.length;                                                                           // 12970
	            for (var i = 0; i < wordsLength; i++) {                                                                   // 12971
	                words[i] = words[i].clone();                                                                          // 12972
	            }                                                                                                         // 12973
                                                                                                                       // 12974
	            return clone;                                                                                             // 12975
	        }                                                                                                             // 12976
	    });                                                                                                               // 12977
	}());                                                                                                                 // 12978
                                                                                                                       // 12979
                                                                                                                       // 12980
	return CryptoJS;                                                                                                      // 12981
                                                                                                                       // 12982
}));                                                                                                                   // 12983
},{"./core":52}],84:[function(require,module,exports){                                                                 // 12984
/*! https://mths.be/utf8js v2.0.0 by @mathias */                                                                       // 12985
;(function(root) {                                                                                                     // 12986
                                                                                                                       // 12987
	// Detect free variables `exports`                                                                                    // 12988
	var freeExports = typeof exports == 'object' && exports;                                                              // 12989
                                                                                                                       // 12990
	// Detect free variable `module`                                                                                      // 12991
	var freeModule = typeof module == 'object' && module &&                                                               // 12992
		module.exports == freeExports && module;                                                                             // 12993
                                                                                                                       // 12994
	// Detect free variable `global`, from Node.js or Browserified code,                                                  // 12995
	// and use it as `root`                                                                                               // 12996
	var freeGlobal = typeof global == 'object' && global;                                                                 // 12997
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {                                           // 12998
		root = freeGlobal;                                                                                                   // 12999
	}                                                                                                                     // 13000
                                                                                                                       // 13001
	/*--------------------------------------------------------------------------*/                                        // 13002
                                                                                                                       // 13003
	var stringFromCharCode = String.fromCharCode;                                                                         // 13004
                                                                                                                       // 13005
	// Taken from https://mths.be/punycode                                                                                // 13006
	function ucs2decode(string) {                                                                                         // 13007
		var output = [];                                                                                                     // 13008
		var counter = 0;                                                                                                     // 13009
		var length = string.length;                                                                                          // 13010
		var value;                                                                                                           // 13011
		var extra;                                                                                                           // 13012
		while (counter < length) {                                                                                           // 13013
			value = string.charCodeAt(counter++);                                                                               // 13014
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {                                                       // 13015
				// high surrogate, and there is a next character                                                                   // 13016
				extra = string.charCodeAt(counter++);                                                                              // 13017
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate                                                                 // 13018
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);                                                 // 13019
				} else {                                                                                                           // 13020
					// unmatched surrogate; only append this code unit, in case the next                                              // 13021
					// code unit is the high surrogate of a surrogate pair                                                            // 13022
					output.push(value);                                                                                               // 13023
					counter--;                                                                                                        // 13024
				}                                                                                                                  // 13025
			} else {                                                                                                            // 13026
				output.push(value);                                                                                                // 13027
			}                                                                                                                   // 13028
		}                                                                                                                    // 13029
		return output;                                                                                                       // 13030
	}                                                                                                                     // 13031
                                                                                                                       // 13032
	// Taken from https://mths.be/punycode                                                                                // 13033
	function ucs2encode(array) {                                                                                          // 13034
		var length = array.length;                                                                                           // 13035
		var index = -1;                                                                                                      // 13036
		var value;                                                                                                           // 13037
		var output = '';                                                                                                     // 13038
		while (++index < length) {                                                                                           // 13039
			value = array[index];                                                                                               // 13040
			if (value > 0xFFFF) {                                                                                               // 13041
				value -= 0x10000;                                                                                                  // 13042
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);                                                       // 13043
				value = 0xDC00 | value & 0x3FF;                                                                                    // 13044
			}                                                                                                                   // 13045
			output += stringFromCharCode(value);                                                                                // 13046
		}                                                                                                                    // 13047
		return output;                                                                                                       // 13048
	}                                                                                                                     // 13049
                                                                                                                       // 13050
	function checkScalarValue(codePoint) {                                                                                // 13051
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {                                                                    // 13052
			throw Error(                                                                                                        // 13053
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +                                                       // 13054
				' is not a scalar value'                                                                                           // 13055
			);                                                                                                                  // 13056
		}                                                                                                                    // 13057
	}                                                                                                                     // 13058
	/*--------------------------------------------------------------------------*/                                        // 13059
                                                                                                                       // 13060
	function createByte(codePoint, shift) {                                                                               // 13061
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);                                                     // 13062
	}                                                                                                                     // 13063
                                                                                                                       // 13064
	function encodeCodePoint(codePoint) {                                                                                 // 13065
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence                                                              // 13066
			return stringFromCharCode(codePoint);                                                                               // 13067
		}                                                                                                                    // 13068
		var symbol = '';                                                                                                     // 13069
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence                                                              // 13070
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);                                                      // 13071
		}                                                                                                                    // 13072
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence                                                         // 13073
			checkScalarValue(codePoint);                                                                                        // 13074
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);                                                     // 13075
			symbol += createByte(codePoint, 6);                                                                                 // 13076
		}                                                                                                                    // 13077
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence                                                         // 13078
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);                                                     // 13079
			symbol += createByte(codePoint, 12);                                                                                // 13080
			symbol += createByte(codePoint, 6);                                                                                 // 13081
		}                                                                                                                    // 13082
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);                                                             // 13083
		return symbol;                                                                                                       // 13084
	}                                                                                                                     // 13085
                                                                                                                       // 13086
	function utf8encode(string) {                                                                                         // 13087
		var codePoints = ucs2decode(string);                                                                                 // 13088
		var length = codePoints.length;                                                                                      // 13089
		var index = -1;                                                                                                      // 13090
		var codePoint;                                                                                                       // 13091
		var byteString = '';                                                                                                 // 13092
		while (++index < length) {                                                                                           // 13093
			codePoint = codePoints[index];                                                                                      // 13094
			byteString += encodeCodePoint(codePoint);                                                                           // 13095
		}                                                                                                                    // 13096
		return byteString;                                                                                                   // 13097
	}                                                                                                                     // 13098
                                                                                                                       // 13099
	/*--------------------------------------------------------------------------*/                                        // 13100
                                                                                                                       // 13101
	function readContinuationByte() {                                                                                     // 13102
		if (byteIndex >= byteCount) {                                                                                        // 13103
			throw Error('Invalid byte index');                                                                                  // 13104
		}                                                                                                                    // 13105
                                                                                                                       // 13106
		var continuationByte = byteArray[byteIndex] & 0xFF;                                                                  // 13107
		byteIndex++;                                                                                                         // 13108
                                                                                                                       // 13109
		if ((continuationByte & 0xC0) == 0x80) {                                                                             // 13110
			return continuationByte & 0x3F;                                                                                     // 13111
		}                                                                                                                    // 13112
                                                                                                                       // 13113
		// If we end up here, it’s not a continuation byte                                                                   // 13114
		throw Error('Invalid continuation byte');                                                                            // 13115
	}                                                                                                                     // 13116
                                                                                                                       // 13117
	function decodeSymbol() {                                                                                             // 13118
		var byte1;                                                                                                           // 13119
		var byte2;                                                                                                           // 13120
		var byte3;                                                                                                           // 13121
		var byte4;                                                                                                           // 13122
		var codePoint;                                                                                                       // 13123
                                                                                                                       // 13124
		if (byteIndex > byteCount) {                                                                                         // 13125
			throw Error('Invalid byte index');                                                                                  // 13126
		}                                                                                                                    // 13127
                                                                                                                       // 13128
		if (byteIndex == byteCount) {                                                                                        // 13129
			return false;                                                                                                       // 13130
		}                                                                                                                    // 13131
                                                                                                                       // 13132
		// Read first byte                                                                                                   // 13133
		byte1 = byteArray[byteIndex] & 0xFF;                                                                                 // 13134
		byteIndex++;                                                                                                         // 13135
                                                                                                                       // 13136
		// 1-byte sequence (no continuation bytes)                                                                           // 13137
		if ((byte1 & 0x80) == 0) {                                                                                           // 13138
			return byte1;                                                                                                       // 13139
		}                                                                                                                    // 13140
                                                                                                                       // 13141
		// 2-byte sequence                                                                                                   // 13142
		if ((byte1 & 0xE0) == 0xC0) {                                                                                        // 13143
			var byte2 = readContinuationByte();                                                                                 // 13144
			codePoint = ((byte1 & 0x1F) << 6) | byte2;                                                                          // 13145
			if (codePoint >= 0x80) {                                                                                            // 13146
				return codePoint;                                                                                                  // 13147
			} else {                                                                                                            // 13148
				throw Error('Invalid continuation byte');                                                                          // 13149
			}                                                                                                                   // 13150
		}                                                                                                                    // 13151
                                                                                                                       // 13152
		// 3-byte sequence (may include unpaired surrogates)                                                                 // 13153
		if ((byte1 & 0xF0) == 0xE0) {                                                                                        // 13154
			byte2 = readContinuationByte();                                                                                     // 13155
			byte3 = readContinuationByte();                                                                                     // 13156
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;                                                          // 13157
			if (codePoint >= 0x0800) {                                                                                          // 13158
				checkScalarValue(codePoint);                                                                                       // 13159
				return codePoint;                                                                                                  // 13160
			} else {                                                                                                            // 13161
				throw Error('Invalid continuation byte');                                                                          // 13162
			}                                                                                                                   // 13163
		}                                                                                                                    // 13164
                                                                                                                       // 13165
		// 4-byte sequence                                                                                                   // 13166
		if ((byte1 & 0xF8) == 0xF0) {                                                                                        // 13167
			byte2 = readContinuationByte();                                                                                     // 13168
			byte3 = readContinuationByte();                                                                                     // 13169
			byte4 = readContinuationByte();                                                                                     // 13170
			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |                                                            // 13171
				(byte3 << 0x06) | byte4;                                                                                           // 13172
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {                                                               // 13173
				return codePoint;                                                                                                  // 13174
			}                                                                                                                   // 13175
		}                                                                                                                    // 13176
                                                                                                                       // 13177
		throw Error('Invalid UTF-8 detected');                                                                               // 13178
	}                                                                                                                     // 13179
                                                                                                                       // 13180
	var byteArray;                                                                                                        // 13181
	var byteCount;                                                                                                        // 13182
	var byteIndex;                                                                                                        // 13183
	function utf8decode(byteString) {                                                                                     // 13184
		byteArray = ucs2decode(byteString);                                                                                  // 13185
		byteCount = byteArray.length;                                                                                        // 13186
		byteIndex = 0;                                                                                                       // 13187
		var codePoints = [];                                                                                                 // 13188
		var tmp;                                                                                                             // 13189
		while ((tmp = decodeSymbol()) !== false) {                                                                           // 13190
			codePoints.push(tmp);                                                                                               // 13191
		}                                                                                                                    // 13192
		return ucs2encode(codePoints);                                                                                       // 13193
	}                                                                                                                     // 13194
                                                                                                                       // 13195
	/*--------------------------------------------------------------------------*/                                        // 13196
                                                                                                                       // 13197
	var utf8 = {                                                                                                          // 13198
		'version': '2.0.0',                                                                                                  // 13199
		'encode': utf8encode,                                                                                                // 13200
		'decode': utf8decode                                                                                                 // 13201
	};                                                                                                                    // 13202
                                                                                                                       // 13203
	// Some AMD build optimizers, like r.js, check for specific condition patterns                                        // 13204
	// like the following:                                                                                                // 13205
	if (                                                                                                                  // 13206
		typeof define == 'function' &&                                                                                       // 13207
		typeof define.amd == 'object' &&                                                                                     // 13208
		define.amd                                                                                                           // 13209
	) {                                                                                                                   // 13210
		define(function() {                                                                                                  // 13211
			return utf8;                                                                                                        // 13212
		});                                                                                                                  // 13213
	}	else if (freeExports && !freeExports.nodeType) {                                                                    // 13214
		if (freeModule) { // in Node.js or RingoJS v0.8.0+                                                                   // 13215
			freeModule.exports = utf8;                                                                                          // 13216
		} else { // in Narwhal or RingoJS v0.7.0-                                                                            // 13217
			var object = {};                                                                                                    // 13218
			var hasOwnProperty = object.hasOwnProperty;                                                                         // 13219
			for (var key in utf8) {                                                                                             // 13220
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);                                                  // 13221
			}                                                                                                                   // 13222
		}                                                                                                                    // 13223
	} else { // in Rhino or a web browser                                                                                 // 13224
		root.utf8 = utf8;                                                                                                    // 13225
	}                                                                                                                     // 13226
                                                                                                                       // 13227
}(this));                                                                                                              // 13228
                                                                                                                       // 13229
},{}],"bignumber.js":[function(require,module,exports){                                                                // 13230
/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */                                             // 13231
                                                                                                                       // 13232
;(function (global) {                                                                                                  // 13233
    'use strict';                                                                                                      // 13234
                                                                                                                       // 13235
    /*                                                                                                                 // 13236
      bignumber.js v2.0.7                                                                                              // 13237
      A JavaScript library for arbitrary-precision arithmetic.                                                         // 13238
      https://github.com/MikeMcl/bignumber.js                                                                          // 13239
      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>                                                        // 13240
      MIT Expat Licence                                                                                                // 13241
    */                                                                                                                 // 13242
                                                                                                                       // 13243
                                                                                                                       // 13244
    var BigNumber, crypto, parseNumeric,                                                                               // 13245
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,                                                            // 13246
        mathceil = Math.ceil,                                                                                          // 13247
        mathfloor = Math.floor,                                                                                        // 13248
        notBool = ' not a boolean or binary digit',                                                                    // 13249
        roundingMode = 'rounding mode',                                                                                // 13250
        tooManyDigits = 'number type has more than 15 significant digits',                                             // 13251
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                                 // 13252
        BASE = 1e14,                                                                                                   // 13253
        LOG_BASE = 14,                                                                                                 // 13254
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                       // 13255
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                       // 13256
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                            // 13257
        SQRT_BASE = 1e7,                                                                                               // 13258
                                                                                                                       // 13259
        /*                                                                                                             // 13260
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                     // 13261
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                         // 13262
         * exception is thrown (if ERRORS is true).                                                                    // 13263
         */                                                                                                            // 13264
        MAX = 1E9;                                   // 0 to MAX_INT32                                                 // 13265
                                                                                                                       // 13266
                                                                                                                       // 13267
    /*                                                                                                                 // 13268
     * Create and return a BigNumber constructor.                                                                      // 13269
     */                                                                                                                // 13270
    function another(configObj) {                                                                                      // 13271
        var div,                                                                                                       // 13272
                                                                                                                       // 13273
            // id tracks the caller function, so its name can be included in error messages.                           // 13274
            id = 0,                                                                                                    // 13275
            P = BigNumber.prototype,                                                                                   // 13276
            ONE = new BigNumber(1),                                                                                    // 13277
                                                                                                                       // 13278
                                                                                                                       // 13279
            /********************************* EDITABLE DEFAULTS **********************************/                   // 13280
                                                                                                                       // 13281
                                                                                                                       // 13282
            /*                                                                                                         // 13283
             * The default values below must be integers within the inclusive ranges stated.                           // 13284
             * The values can also be changed at run-time using BigNumber.config.                                      // 13285
             */                                                                                                        // 13286
                                                                                                                       // 13287
            // The maximum number of decimal places for operations involving division.                                 // 13288
            DECIMAL_PLACES = 20,                     // 0 to MAX                                                       // 13289
                                                                                                                       // 13290
            /*                                                                                                         // 13291
             * The rounding mode used when rounding to the above decimal places, and when using                        // 13292
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                            // 13293
             * UP         0 Away from zero.                                                                            // 13294
             * DOWN       1 Towards zero.                                                                              // 13295
             * CEIL       2 Towards +Infinity.                                                                         // 13296
             * FLOOR      3 Towards -Infinity.                                                                         // 13297
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                             // 13298
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                           // 13299
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                         // 13300
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                              // 13301
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                              // 13302
             */                                                                                                        // 13303
            ROUNDING_MODE = 4,                       // 0 to 8                                                         // 13304
                                                                                                                       // 13305
            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                              // 13306
                                                                                                                       // 13307
            // The exponent value at and beneath which toString returns exponential notation.                          // 13308
            // Number type: -7                                                                                         // 13309
            TO_EXP_NEG = -7,                         // 0 to -MAX                                                      // 13310
                                                                                                                       // 13311
            // The exponent value at and above which toString returns exponential notation.                            // 13312
            // Number type: 21                                                                                         // 13313
            TO_EXP_POS = 21,                         // 0 to MAX                                                       // 13314
                                                                                                                       // 13315
            // RANGE : [MIN_EXP, MAX_EXP]                                                                              // 13316
                                                                                                                       // 13317
            // The minimum exponent value, beneath which underflow to zero occurs.                                     // 13318
            // Number type: -324  (5e-324)                                                                             // 13319
            MIN_EXP = -1e7,                          // -1 to -MAX                                                     // 13320
                                                                                                                       // 13321
            // The maximum exponent value, above which overflow to Infinity occurs.                                    // 13322
            // Number type:  308  (1.7976931348623157e+308)                                                            // 13323
            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                               // 13324
            MAX_EXP = 1e7,                           // 1 to MAX                                                       // 13325
                                                                                                                       // 13326
            // Whether BigNumber Errors are ever thrown.                                                               // 13327
            ERRORS = true,                           // true or false                                                  // 13328
                                                                                                                       // 13329
            // Change to intValidatorNoErrors if ERRORS is false.                                                      // 13330
            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                    // 13331
                                                                                                                       // 13332
            // Whether to use cryptographically-secure random number generation, if available.                         // 13333
            CRYPTO = false,                          // true or false                                                  // 13334
                                                                                                                       // 13335
            /*                                                                                                         // 13336
             * The modulo mode used when calculating the modulus: a mod n.                                             // 13337
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                    // 13338
             * The remainder (r) is calculated as: r = a - n * q.                                                      // 13339
             *                                                                                                         // 13340
             * UP        0 The remainder is positive if the dividend is negative, else is negative.                    // 13341
             * DOWN      1 The remainder has the same sign as the dividend.                                            // 13342
             *             This modulo mode is commonly known as 'truncated division' and is                           // 13343
             *             equivalent to (a % n) in JavaScript.                                                        // 13344
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                  // 13345
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                                // 13346
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                        // 13347
             *             The remainder is always positive.                                                           // 13348
             *                                                                                                         // 13349
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                     // 13350
             * modes are commonly used for the modulus operation.                                                      // 13351
             * Although the other rounding modes can also be used, they may not give useful results.                   // 13352
             */                                                                                                        // 13353
            MODULO_MODE = 1,                         // 0 to 9                                                         // 13354
                                                                                                                       // 13355
            // The maximum number of significant digits of the result of the toPower operation.                        // 13356
            // If POW_PRECISION is 0, there will be unlimited significant digits.                                      // 13357
            POW_PRECISION = 100,                     // 0 to MAX                                                       // 13358
                                                                                                                       // 13359
            // The format specification used by the BigNumber.prototype.toFormat method.                               // 13360
            FORMAT = {                                                                                                 // 13361
                decimalSeparator: '.',                                                                                 // 13362
                groupSeparator: ',',                                                                                   // 13363
                groupSize: 3,                                                                                          // 13364
                secondaryGroupSize: 0,                                                                                 // 13365
                fractionGroupSeparator: '\xA0',      // non-breaking space                                             // 13366
                fractionGroupSize: 0                                                                                   // 13367
            };                                                                                                         // 13368
                                                                                                                       // 13369
                                                                                                                       // 13370
        /******************************************************************************************/                   // 13371
                                                                                                                       // 13372
                                                                                                                       // 13373
        // CONSTRUCTOR                                                                                                 // 13374
                                                                                                                       // 13375
                                                                                                                       // 13376
        /*                                                                                                             // 13377
         * The BigNumber constructor and exported function.                                                            // 13378
         * Create and return a new instance of a BigNumber object.                                                     // 13379
         *                                                                                                             // 13380
         * n {number|string|BigNumber} A numeric value.                                                                // 13381
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                     // 13382
         */                                                                                                            // 13383
        function BigNumber( n, b ) {                                                                                   // 13384
            var c, e, i, num, len, str,                                                                                // 13385
                x = this;                                                                                              // 13386
                                                                                                                       // 13387
            // Enable constructor usage without new.                                                                   // 13388
            if ( !( x instanceof BigNumber ) ) {                                                                       // 13389
                                                                                                                       // 13390
                // 'BigNumber() constructor call without new: {n}'                                                     // 13391
                if (ERRORS) raise( 26, 'constructor call without new', n );                                            // 13392
                return new BigNumber( n, b );                                                                          // 13393
            }                                                                                                          // 13394
                                                                                                                       // 13395
            // 'new BigNumber() base not an integer: {b}'                                                              // 13396
            // 'new BigNumber() base out of range: {b}'                                                                // 13397
            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                  // 13398
                                                                                                                       // 13399
                // Duplicate.                                                                                          // 13400
                if ( n instanceof BigNumber ) {                                                                        // 13401
                    x.s = n.s;                                                                                         // 13402
                    x.e = n.e;                                                                                         // 13403
                    x.c = ( n = n.c ) ? n.slice() : n;                                                                 // 13404
                    id = 0;                                                                                            // 13405
                    return;                                                                                            // 13406
                }                                                                                                      // 13407
                                                                                                                       // 13408
                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                  // 13409
                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                              // 13410
                                                                                                                       // 13411
                    // Fast path for integers.                                                                         // 13412
                    if ( n === ~~n ) {                                                                                 // 13413
                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                   // 13414
                        x.e = e;                                                                                       // 13415
                        x.c = [n];                                                                                     // 13416
                        id = 0;                                                                                        // 13417
                        return;                                                                                        // 13418
                    }                                                                                                  // 13419
                                                                                                                       // 13420
                    str = n + '';                                                                                      // 13421
                } else {                                                                                               // 13422
                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                         // 13423
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13424
                }                                                                                                      // 13425
            } else {                                                                                                   // 13426
                b = b | 0;                                                                                             // 13427
                str = n + '';                                                                                          // 13428
                                                                                                                       // 13429
                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                               // 13430
                // Allow exponential notation to be used with base 10 argument.                                        // 13431
                if ( b == 10 ) {                                                                                       // 13432
                    x = new BigNumber( n instanceof BigNumber ? n : str );                                             // 13433
                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                        // 13434
                }                                                                                                      // 13435
                                                                                                                       // 13436
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                              // 13437
                // Any number in exponential form will fail due to the [Ee][+-].                                       // 13438
                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                   // 13439
                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                                 // 13440
                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                           // 13441
                    return parseNumeric( x, str, num, b );                                                             // 13442
                }                                                                                                      // 13443
                                                                                                                       // 13444
                if (num) {                                                                                             // 13445
                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                  // 13446
                                                                                                                       // 13447
                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {                                      // 13448
                                                                                                                       // 13449
                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                      // 13450
                        raise( id, tooManyDigits, n );                                                                 // 13451
                    }                                                                                                  // 13452
                                                                                                                       // 13453
                    // Prevent later check for length on converted number.                                             // 13454
                    num = false;                                                                                       // 13455
                } else {                                                                                               // 13456
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13457
                }                                                                                                      // 13458
                                                                                                                       // 13459
                str = convertBase( str, 10, b, x.s );                                                                  // 13460
            }                                                                                                          // 13461
                                                                                                                       // 13462
            // Decimal point?                                                                                          // 13463
            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                         // 13464
                                                                                                                       // 13465
            // Exponential form?                                                                                       // 13466
            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                    // 13467
                                                                                                                       // 13468
                // Determine exponent.                                                                                 // 13469
                if ( e < 0 ) e = i;                                                                                    // 13470
                e += +str.slice( i + 1 );                                                                              // 13471
                str = str.substring( 0, i );                                                                           // 13472
            } else if ( e < 0 ) {                                                                                      // 13473
                                                                                                                       // 13474
                // Integer.                                                                                            // 13475
                e = str.length;                                                                                        // 13476
            }                                                                                                          // 13477
                                                                                                                       // 13478
            // Determine leading zeros.                                                                                // 13479
            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                              // 13480
                                                                                                                       // 13481
            // Determine trailing zeros.                                                                               // 13482
            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                   // 13483
            str = str.slice( i, len + 1 );                                                                             // 13484
                                                                                                                       // 13485
            if (str) {                                                                                                 // 13486
                len = str.length;                                                                                      // 13487
                                                                                                                       // 13488
                // Disallow numbers with over 15 significant digits if number type.                                    // 13489
                // 'new BigNumber() number type has more than 15 significant digits: {n}'                              // 13490
                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );                                  // 13491
                                                                                                                       // 13492
                e = e - i - 1;                                                                                         // 13493
                                                                                                                       // 13494
                 // Overflow?                                                                                          // 13495
                if ( e > MAX_EXP ) {                                                                                   // 13496
                                                                                                                       // 13497
                    // Infinity.                                                                                       // 13498
                    x.c = x.e = null;                                                                                  // 13499
                                                                                                                       // 13500
                // Underflow?                                                                                          // 13501
                } else if ( e < MIN_EXP ) {                                                                            // 13502
                                                                                                                       // 13503
                    // Zero.                                                                                           // 13504
                    x.c = [ x.e = 0 ];                                                                                 // 13505
                } else {                                                                                               // 13506
                    x.e = e;                                                                                           // 13507
                    x.c = [];                                                                                          // 13508
                                                                                                                       // 13509
                    // Transform base                                                                                  // 13510
                                                                                                                       // 13511
                    // e is the base 10 exponent.                                                                      // 13512
                    // i is where to slice str to get the first element of the coefficient array.                      // 13513
                    i = ( e + 1 ) % LOG_BASE;                                                                          // 13514
                    if ( e < 0 ) i += LOG_BASE;                                                                        // 13515
                                                                                                                       // 13516
                    if ( i < len ) {                                                                                   // 13517
                        if (i) x.c.push( +str.slice( 0, i ) );                                                         // 13518
                                                                                                                       // 13519
                        for ( len -= LOG_BASE; i < len; ) {                                                            // 13520
                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                                // 13521
                        }                                                                                              // 13522
                                                                                                                       // 13523
                        str = str.slice(i);                                                                            // 13524
                        i = LOG_BASE - str.length;                                                                     // 13525
                    } else {                                                                                           // 13526
                        i -= len;                                                                                      // 13527
                    }                                                                                                  // 13528
                                                                                                                       // 13529
                    for ( ; i--; str += '0' );                                                                         // 13530
                    x.c.push( +str );                                                                                  // 13531
                }                                                                                                      // 13532
            } else {                                                                                                   // 13533
                                                                                                                       // 13534
                // Zero.                                                                                               // 13535
                x.c = [ x.e = 0 ];                                                                                     // 13536
            }                                                                                                          // 13537
                                                                                                                       // 13538
            id = 0;                                                                                                    // 13539
        }                                                                                                              // 13540
                                                                                                                       // 13541
                                                                                                                       // 13542
        // CONSTRUCTOR PROPERTIES                                                                                      // 13543
                                                                                                                       // 13544
                                                                                                                       // 13545
        BigNumber.another = another;                                                                                   // 13546
                                                                                                                       // 13547
        BigNumber.ROUND_UP = 0;                                                                                        // 13548
        BigNumber.ROUND_DOWN = 1;                                                                                      // 13549
        BigNumber.ROUND_CEIL = 2;                                                                                      // 13550
        BigNumber.ROUND_FLOOR = 3;                                                                                     // 13551
        BigNumber.ROUND_HALF_UP = 4;                                                                                   // 13552
        BigNumber.ROUND_HALF_DOWN = 5;                                                                                 // 13553
        BigNumber.ROUND_HALF_EVEN = 6;                                                                                 // 13554
        BigNumber.ROUND_HALF_CEIL = 7;                                                                                 // 13555
        BigNumber.ROUND_HALF_FLOOR = 8;                                                                                // 13556
        BigNumber.EUCLID = 9;                                                                                          // 13557
                                                                                                                       // 13558
                                                                                                                       // 13559
        /*                                                                                                             // 13560
         * Configure infrequently-changing library-wide settings.                                                      // 13561
         *                                                                                                             // 13562
         * Accept an object or an argument list, with one or many of the following properties or                       // 13563
         * parameters respectively:                                                                                    // 13564
         *                                                                                                             // 13565
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                     // 13566
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                       // 13567
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                      // 13568
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                              // 13569
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                             // 13570
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                     // 13571
         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                    // 13572
         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                    // 13573
         *   MODULO_MODE     {number}           0 to 9 inclusive                                                       // 13574
         *   POW_PRECISION   {number}           0 to MAX inclusive                                                     // 13575
         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                       // 13576
         *      decimalSeparator       {string}                                                                        // 13577
         *      groupSeparator         {string}                                                                        // 13578
         *      groupSize              {number}                                                                        // 13579
         *      secondaryGroupSize     {number}                                                                        // 13580
         *      fractionGroupSeparator {string}                                                                        // 13581
         *      fractionGroupSize      {number}                                                                        // 13582
         *                                                                                                             // 13583
         * (The values assigned to the above FORMAT object properties are not checked for validity.)                   // 13584
         *                                                                                                             // 13585
         * E.g.                                                                                                        // 13586
         * BigNumber.config(20, 4) is equivalent to                                                                    // 13587
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                                // 13588
         *                                                                                                             // 13589
         * Ignore properties/parameters set to null or undefined.                                                      // 13590
         * Return an object with the properties current values.                                                        // 13591
         */                                                                                                            // 13592
        BigNumber.config = function () {                                                                               // 13593
            var v, p,                                                                                                  // 13594
                i = 0,                                                                                                 // 13595
                r = {},                                                                                                // 13596
                a = arguments,                                                                                         // 13597
                o = a[0],                                                                                              // 13598
                has = o && typeof o == 'object'                                                                        // 13599
                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                            // 13600
                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                                // 13601
                                                                                                                       // 13602
            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                    // 13603
            // 'config() DECIMAL_PLACES not an integer: {v}'                                                           // 13604
            // 'config() DECIMAL_PLACES out of range: {v}'                                                             // 13605
            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                      // 13606
                DECIMAL_PLACES = v | 0;                                                                                // 13607
            }                                                                                                          // 13608
            r[p] = DECIMAL_PLACES;                                                                                     // 13609
                                                                                                                       // 13610
            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                       // 13611
            // 'config() ROUNDING_MODE not an integer: {v}'                                                            // 13612
            // 'config() ROUNDING_MODE out of range: {v}'                                                              // 13613
            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                         // 13614
                ROUNDING_MODE = v | 0;                                                                                 // 13615
            }                                                                                                          // 13616
            r[p] = ROUNDING_MODE;                                                                                      // 13617
                                                                                                                       // 13618
            // EXPONENTIAL_AT {number|number[]}                                                                        // 13619
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                    // 13620
            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                           // 13621
            // 'config() EXPONENTIAL_AT out of range: {v}'                                                             // 13622
            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                       // 13623
                                                                                                                       // 13624
                if ( isArray(v) ) {                                                                                    // 13625
                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                     // 13626
                        TO_EXP_NEG = v[0] | 0;                                                                         // 13627
                        TO_EXP_POS = v[1] | 0;                                                                         // 13628
                    }                                                                                                  // 13629
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13630
                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                             // 13631
                }                                                                                                      // 13632
            }                                                                                                          // 13633
            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                         // 13634
                                                                                                                       // 13635
            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                      // 13636
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                             // 13637
            // 'config() RANGE not an integer: {v}'                                                                    // 13638
            // 'config() RANGE cannot be zero: {v}'                                                                    // 13639
            // 'config() RANGE out of range: {v}'                                                                      // 13640
            if ( has( p = 'RANGE' ) ) {                                                                                // 13641
                                                                                                                       // 13642
                if ( isArray(v) ) {                                                                                    // 13643
                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                    // 13644
                        MIN_EXP = v[0] | 0;                                                                            // 13645
                        MAX_EXP = v[1] | 0;                                                                            // 13646
                    }                                                                                                  // 13647
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13648
                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                      // 13649
                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                             // 13650
                }                                                                                                      // 13651
            }                                                                                                          // 13652
            r[p] = [ MIN_EXP, MAX_EXP ];                                                                               // 13653
                                                                                                                       // 13654
            // ERRORS {boolean|number} true, false, 1 or 0.                                                            // 13655
            // 'config() ERRORS not a boolean or binary digit: {v}'                                                    // 13656
            if ( has( p = 'ERRORS' ) ) {                                                                               // 13657
                                                                                                                       // 13658
                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 13659
                    id = 0;                                                                                            // 13660
                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                     // 13661
                } else if (ERRORS) {                                                                                   // 13662
                    raise( 2, p + notBool, v );                                                                        // 13663
                }                                                                                                      // 13664
            }                                                                                                          // 13665
            r[p] = ERRORS;                                                                                             // 13666
                                                                                                                       // 13667
            // CRYPTO {boolean|number} true, false, 1 or 0.                                                            // 13668
            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                    // 13669
            // 'config() crypto unavailable: {crypto}'                                                                 // 13670
            if ( has( p = 'CRYPTO' ) ) {                                                                               // 13671
                                                                                                                       // 13672
                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 13673
                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );                                           // 13674
                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );                            // 13675
                } else if (ERRORS) {                                                                                   // 13676
                    raise( 2, p + notBool, v );                                                                        // 13677
                }                                                                                                      // 13678
            }                                                                                                          // 13679
            r[p] = CRYPTO;                                                                                             // 13680
                                                                                                                       // 13681
            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                         // 13682
            // 'config() MODULO_MODE not an integer: {v}'                                                              // 13683
            // 'config() MODULO_MODE out of range: {v}'                                                                // 13684
            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                           // 13685
                MODULO_MODE = v | 0;                                                                                   // 13686
            }                                                                                                          // 13687
            r[p] = MODULO_MODE;                                                                                        // 13688
                                                                                                                       // 13689
            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                     // 13690
            // 'config() POW_PRECISION not an integer: {v}'                                                            // 13691
            // 'config() POW_PRECISION out of range: {v}'                                                              // 13692
            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                       // 13693
                POW_PRECISION = v | 0;                                                                                 // 13694
            }                                                                                                          // 13695
            r[p] = POW_PRECISION;                                                                                      // 13696
                                                                                                                       // 13697
            // FORMAT {object}                                                                                         // 13698
            // 'config() FORMAT not an object: {v}'                                                                    // 13699
            if ( has( p = 'FORMAT' ) ) {                                                                               // 13700
                                                                                                                       // 13701
                if ( typeof v == 'object' ) {                                                                          // 13702
                    FORMAT = v;                                                                                        // 13703
                } else if (ERRORS) {                                                                                   // 13704
                    raise( 2, p + ' not an object', v );                                                               // 13705
                }                                                                                                      // 13706
            }                                                                                                          // 13707
            r[p] = FORMAT;                                                                                             // 13708
                                                                                                                       // 13709
            return r;                                                                                                  // 13710
        };                                                                                                             // 13711
                                                                                                                       // 13712
                                                                                                                       // 13713
        /*                                                                                                             // 13714
         * Return a new BigNumber whose value is the maximum of the arguments.                                         // 13715
         *                                                                                                             // 13716
         * arguments {number|string|BigNumber}                                                                         // 13717
         */                                                                                                            // 13718
        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                           // 13719
                                                                                                                       // 13720
                                                                                                                       // 13721
        /*                                                                                                             // 13722
         * Return a new BigNumber whose value is the minimum of the arguments.                                         // 13723
         *                                                                                                             // 13724
         * arguments {number|string|BigNumber}                                                                         // 13725
         */                                                                                                            // 13726
        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                           // 13727
                                                                                                                       // 13728
                                                                                                                       // 13729
        /*                                                                                                             // 13730
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                      // 13731
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                        // 13732
         * zeros are produced).                                                                                        // 13733
         *                                                                                                             // 13734
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 13735
         *                                                                                                             // 13736
         * 'random() decimal places not an integer: {dp}'                                                              // 13737
         * 'random() decimal places out of range: {dp}'                                                                // 13738
         * 'random() crypto unavailable: {crypto}'                                                                     // 13739
         */                                                                                                            // 13740
        BigNumber.random = (function () {                                                                              // 13741
            var pow2_53 = 0x20000000000000;                                                                            // 13742
                                                                                                                       // 13743
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                             // 13744
            // Check if Math.random() produces more than 32 bits of randomness.                                        // 13745
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                    // 13746
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                             // 13747
            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                  // 13748
              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                           // 13749
              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                   // 13750
                  (Math.random() * 0x800000 | 0); };                                                                   // 13751
                                                                                                                       // 13752
            return function (dp) {                                                                                     // 13753
                var a, b, e, k, v,                                                                                     // 13754
                    i = 0,                                                                                             // 13755
                    c = [],                                                                                            // 13756
                    rand = new BigNumber(ONE);                                                                         // 13757
                                                                                                                       // 13758
                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                            // 13759
                k = mathceil( dp / LOG_BASE );                                                                         // 13760
                                                                                                                       // 13761
                if (CRYPTO) {                                                                                          // 13762
                                                                                                                       // 13763
                    // Browsers supporting crypto.getRandomValues.                                                     // 13764
                    if ( crypto && crypto.getRandomValues ) {                                                          // 13765
                                                                                                                       // 13766
                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                       // 13767
                                                                                                                       // 13768
                        for ( ; i < k; ) {                                                                             // 13769
                                                                                                                       // 13770
                            // 53 bits:                                                                                // 13771
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                   // 13772
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                             // 13773
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                              // 13774
                            //                                     11111 11111111 11111111                             // 13775
                            // 0x20000 is 2^21.                                                                        // 13776
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                    // 13777
                                                                                                                       // 13778
                            // Rejection sampling:                                                                     // 13779
                            // 0 <= v < 9007199254740992                                                               // 13780
                            // Probability that v >= 9e15, is                                                          // 13781
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                              // 13782
                            if ( v >= 9e15 ) {                                                                         // 13783
                                b = crypto.getRandomValues( new Uint32Array(2) );                                      // 13784
                                a[i] = b[0];                                                                           // 13785
                                a[i + 1] = b[1];                                                                       // 13786
                            } else {                                                                                   // 13787
                                                                                                                       // 13788
                                // 0 <= v <= 8999999999999999                                                          // 13789
                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 13790
                                c.push( v % 1e14 );                                                                    // 13791
                                i += 2;                                                                                // 13792
                            }                                                                                          // 13793
                        }                                                                                              // 13794
                        i = k / 2;                                                                                     // 13795
                                                                                                                       // 13796
                    // Node.js supporting crypto.randomBytes.                                                          // 13797
                    } else if ( crypto && crypto.randomBytes ) {                                                       // 13798
                                                                                                                       // 13799
                        // buffer                                                                                      // 13800
                        a = crypto.randomBytes( k *= 7 );                                                              // 13801
                                                                                                                       // 13802
                        for ( ; i < k; ) {                                                                             // 13803
                                                                                                                       // 13804
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                          // 13805
                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                  // 13806
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                             // 13807
                            // 0 <= v < 9007199254740992                                                               // 13808
                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                   // 13809
                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                              // 13810
                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                   // 13811
                                                                                                                       // 13812
                            if ( v >= 9e15 ) {                                                                         // 13813
                                crypto.randomBytes(7).copy( a, i );                                                    // 13814
                            } else {                                                                                   // 13815
                                                                                                                       // 13816
                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 13817
                                c.push( v % 1e14 );                                                                    // 13818
                                i += 7;                                                                                // 13819
                            }                                                                                          // 13820
                        }                                                                                              // 13821
                        i = k / 7;                                                                                     // 13822
                    } else if (ERRORS) {                                                                               // 13823
                        raise( 14, 'crypto unavailable', crypto );                                                     // 13824
                    }                                                                                                  // 13825
                }                                                                                                      // 13826
                                                                                                                       // 13827
                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.                      // 13828
                if (!i) {                                                                                              // 13829
                                                                                                                       // 13830
                    for ( ; i < k; ) {                                                                                 // 13831
                        v = random53bitInt();                                                                          // 13832
                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                             // 13833
                    }                                                                                                  // 13834
                }                                                                                                      // 13835
                                                                                                                       // 13836
                k = c[--i];                                                                                            // 13837
                dp %= LOG_BASE;                                                                                        // 13838
                                                                                                                       // 13839
                // Convert trailing digits to zeros according to dp.                                                   // 13840
                if ( k && dp ) {                                                                                       // 13841
                    v = POWS_TEN[LOG_BASE - dp];                                                                       // 13842
                    c[i] = mathfloor( k / v ) * v;                                                                     // 13843
                }                                                                                                      // 13844
                                                                                                                       // 13845
                // Remove trailing elements which are zero.                                                            // 13846
                for ( ; c[i] === 0; c.pop(), i-- );                                                                    // 13847
                                                                                                                       // 13848
                // Zero?                                                                                               // 13849
                if ( i < 0 ) {                                                                                         // 13850
                    c = [ e = 0 ];                                                                                     // 13851
                } else {                                                                                               // 13852
                                                                                                                       // 13853
                    // Remove leading elements which are zero and adjust exponent accordingly.                         // 13854
                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                              // 13855
                                                                                                                       // 13856
                    // Count the digits of the first element of c to determine leading zeros, and...                   // 13857
                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                     // 13858
                                                                                                                       // 13859
                    // adjust the exponent accordingly.                                                                // 13860
                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                             // 13861
                }                                                                                                      // 13862
                                                                                                                       // 13863
                rand.e = e;                                                                                            // 13864
                rand.c = c;                                                                                            // 13865
                return rand;                                                                                           // 13866
            };                                                                                                         // 13867
        })();                                                                                                          // 13868
                                                                                                                       // 13869
                                                                                                                       // 13870
        // PRIVATE FUNCTIONS                                                                                           // 13871
                                                                                                                       // 13872
                                                                                                                       // 13873
        // Convert a numeric string of baseIn to a numeric string of baseOut.                                          // 13874
        function convertBase( str, baseOut, baseIn, sign ) {                                                           // 13875
            var d, e, k, r, x, xc, y,                                                                                  // 13876
                i = str.indexOf( '.' ),                                                                                // 13877
                dp = DECIMAL_PLACES,                                                                                   // 13878
                rm = ROUNDING_MODE;                                                                                    // 13879
                                                                                                                       // 13880
            if ( baseIn < 37 ) str = str.toLowerCase();                                                                // 13881
                                                                                                                       // 13882
            // Non-integer.                                                                                            // 13883
            if ( i >= 0 ) {                                                                                            // 13884
                k = POW_PRECISION;                                                                                     // 13885
                                                                                                                       // 13886
                // Unlimited precision.                                                                                // 13887
                POW_PRECISION = 0;                                                                                     // 13888
                str = str.replace( '.', '' );                                                                          // 13889
                y = new BigNumber(baseIn);                                                                             // 13890
                x = y.pow( str.length - i );                                                                           // 13891
                POW_PRECISION = k;                                                                                     // 13892
                                                                                                                       // 13893
                // Convert str as if an integer, then restore the fraction part by dividing the                        // 13894
                // result by its base raised to a power.                                                               // 13895
                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                             // 13896
                y.e = y.c.length;                                                                                      // 13897
            }                                                                                                          // 13898
                                                                                                                       // 13899
            // Convert the number as integer.                                                                          // 13900
            xc = toBaseOut( str, baseIn, baseOut );                                                                    // 13901
            e = k = xc.length;                                                                                         // 13902
                                                                                                                       // 13903
            // Remove trailing zeros.                                                                                  // 13904
            for ( ; xc[--k] == 0; xc.pop() );                                                                          // 13905
            if ( !xc[0] ) return '0';                                                                                  // 13906
                                                                                                                       // 13907
            if ( i < 0 ) {                                                                                             // 13908
                --e;                                                                                                   // 13909
            } else {                                                                                                   // 13910
                x.c = xc;                                                                                              // 13911
                x.e = e;                                                                                               // 13912
                                                                                                                       // 13913
                // sign is needed for correct rounding.                                                                // 13914
                x.s = sign;                                                                                            // 13915
                x = div( x, y, dp, rm, baseOut );                                                                      // 13916
                xc = x.c;                                                                                              // 13917
                r = x.r;                                                                                               // 13918
                e = x.e;                                                                                               // 13919
            }                                                                                                          // 13920
                                                                                                                       // 13921
            d = e + dp + 1;                                                                                            // 13922
                                                                                                                       // 13923
            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                    // 13924
            i = xc[d];                                                                                                 // 13925
            k = baseOut / 2;                                                                                           // 13926
            r = r || d < 0 || xc[d + 1] != null;                                                                       // 13927
                                                                                                                       // 13928
            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                // 13929
                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                               // 13930
                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                  // 13931
                                                                                                                       // 13932
            if ( d < 1 || !xc[0] ) {                                                                                   // 13933
                                                                                                                       // 13934
                // 1^-dp or 0.                                                                                         // 13935
                str = r ? toFixedPoint( '1', -dp ) : '0';                                                              // 13936
            } else {                                                                                                   // 13937
                xc.length = d;                                                                                         // 13938
                                                                                                                       // 13939
                if (r) {                                                                                               // 13940
                                                                                                                       // 13941
                    // Rounding up may mean the previous digit has to be rounded up and so on.                         // 13942
                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                          // 13943
                        xc[d] = 0;                                                                                     // 13944
                                                                                                                       // 13945
                        if ( !d ) {                                                                                    // 13946
                            ++e;                                                                                       // 13947
                            xc.unshift(1);                                                                             // 13948
                        }                                                                                              // 13949
                    }                                                                                                  // 13950
                }                                                                                                      // 13951
                                                                                                                       // 13952
                // Determine trailing zeros.                                                                           // 13953
                for ( k = xc.length; !xc[--k]; );                                                                      // 13954
                                                                                                                       // 13955
                // E.g. [4, 11, 15] becomes 4bf.                                                                       // 13956
                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                    // 13957
                str = toFixedPoint( str, e );                                                                          // 13958
            }                                                                                                          // 13959
                                                                                                                       // 13960
            // The caller will add the sign.                                                                           // 13961
            return str;                                                                                                // 13962
        }                                                                                                              // 13963
                                                                                                                       // 13964
                                                                                                                       // 13965
        // Perform division in the specified base. Called by div and convertBase.                                      // 13966
        div = (function () {                                                                                           // 13967
                                                                                                                       // 13968
            // Assume non-zero x and k.                                                                                // 13969
            function multiply( x, k, base ) {                                                                          // 13970
                var m, temp, xlo, xhi,                                                                                 // 13971
                    carry = 0,                                                                                         // 13972
                    i = x.length,                                                                                      // 13973
                    klo = k % SQRT_BASE,                                                                               // 13974
                    khi = k / SQRT_BASE | 0;                                                                           // 13975
                                                                                                                       // 13976
                for ( x = x.slice(); i--; ) {                                                                          // 13977
                    xlo = x[i] % SQRT_BASE;                                                                            // 13978
                    xhi = x[i] / SQRT_BASE | 0;                                                                        // 13979
                    m = khi * xlo + xhi * klo;                                                                         // 13980
                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                      // 13981
                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                   // 13982
                    x[i] = temp % base;                                                                                // 13983
                }                                                                                                      // 13984
                                                                                                                       // 13985
                if (carry) x.unshift(carry);                                                                           // 13986
                                                                                                                       // 13987
                return x;                                                                                              // 13988
            }                                                                                                          // 13989
                                                                                                                       // 13990
            function compare( a, b, aL, bL ) {                                                                         // 13991
                var i, cmp;                                                                                            // 13992
                                                                                                                       // 13993
                if ( aL != bL ) {                                                                                      // 13994
                    cmp = aL > bL ? 1 : -1;                                                                            // 13995
                } else {                                                                                               // 13996
                                                                                                                       // 13997
                    for ( i = cmp = 0; i < aL; i++ ) {                                                                 // 13998
                                                                                                                       // 13999
                        if ( a[i] != b[i] ) {                                                                          // 14000
                            cmp = a[i] > b[i] ? 1 : -1;                                                                // 14001
                            break;                                                                                     // 14002
                        }                                                                                              // 14003
                    }                                                                                                  // 14004
                }                                                                                                      // 14005
                return cmp;                                                                                            // 14006
            }                                                                                                          // 14007
                                                                                                                       // 14008
            function subtract( a, b, aL, base ) {                                                                      // 14009
                var i = 0;                                                                                             // 14010
                                                                                                                       // 14011
                // Subtract b from a.                                                                                  // 14012
                for ( ; aL--; ) {                                                                                      // 14013
                    a[aL] -= i;                                                                                        // 14014
                    i = a[aL] < b[aL] ? 1 : 0;                                                                         // 14015
                    a[aL] = i * base + a[aL] - b[aL];                                                                  // 14016
                }                                                                                                      // 14017
                                                                                                                       // 14018
                // Remove leading zeros.                                                                               // 14019
                for ( ; !a[0] && a.length > 1; a.shift() );                                                            // 14020
            }                                                                                                          // 14021
                                                                                                                       // 14022
            // x: dividend, y: divisor.                                                                                // 14023
            return function ( x, y, dp, rm, base ) {                                                                   // 14024
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                              // 14025
                    yL, yz,                                                                                            // 14026
                    s = x.s == y.s ? 1 : -1,                                                                           // 14027
                    xc = x.c,                                                                                          // 14028
                    yc = y.c;                                                                                          // 14029
                                                                                                                       // 14030
                // Either NaN, Infinity or 0?                                                                          // 14031
                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                                // 14032
                                                                                                                       // 14033
                    return new BigNumber(                                                                              // 14034
                                                                                                                       // 14035
                      // Return NaN if either NaN, or both Infinity or 0.                                              // 14036
                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                      // 14037
                                                                                                                       // 14038
                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                     // 14039
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                        // 14040
                    );                                                                                                 // 14041
                }                                                                                                      // 14042
                                                                                                                       // 14043
                q = new BigNumber(s);                                                                                  // 14044
                qc = q.c = [];                                                                                         // 14045
                e = x.e - y.e;                                                                                         // 14046
                s = dp + e + 1;                                                                                        // 14047
                                                                                                                       // 14048
                if ( !base ) {                                                                                         // 14049
                    base = BASE;                                                                                       // 14050
                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                       // 14051
                    s = s / LOG_BASE | 0;                                                                              // 14052
                }                                                                                                      // 14053
                                                                                                                       // 14054
                // Result exponent may be one less then the current value of e.                                        // 14055
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                        // 14056
                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                           // 14057
                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                     // 14058
                                                                                                                       // 14059
                if ( s < 0 ) {                                                                                         // 14060
                    qc.push(1);                                                                                        // 14061
                    more = true;                                                                                       // 14062
                } else {                                                                                               // 14063
                    xL = xc.length;                                                                                    // 14064
                    yL = yc.length;                                                                                    // 14065
                    i = 0;                                                                                             // 14066
                    s += 2;                                                                                            // 14067
                                                                                                                       // 14068
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                                // 14069
                                                                                                                       // 14070
                    n = mathfloor( base / ( yc[0] + 1 ) );                                                             // 14071
                                                                                                                       // 14072
                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                         // 14073
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                  // 14074
                    if ( n > 1 ) {                                                                                     // 14075
                        yc = multiply( yc, n, base );                                                                  // 14076
                        xc = multiply( xc, n, base );                                                                  // 14077
                        yL = yc.length;                                                                                // 14078
                        xL = xc.length;                                                                                // 14079
                    }                                                                                                  // 14080
                                                                                                                       // 14081
                    xi = yL;                                                                                           // 14082
                    rem = xc.slice( 0, yL );                                                                           // 14083
                    remL = rem.length;                                                                                 // 14084
                                                                                                                       // 14085
                    // Add zeros to make remainder as long as divisor.                                                 // 14086
                    for ( ; remL < yL; rem[remL++] = 0 );                                                              // 14087
                    yz = yc.slice();                                                                                   // 14088
                    yz.unshift(0);                                                                                     // 14089
                    yc0 = yc[0];                                                                                       // 14090
                    if ( yc[1] >= base / 2 ) yc0++;                                                                    // 14091
                    // Not necessary, but to prevent trial digit n > base, when using base 3.                          // 14092
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                              // 14093
                                                                                                                       // 14094
                    do {                                                                                               // 14095
                        n = 0;                                                                                         // 14096
                                                                                                                       // 14097
                        // Compare divisor and remainder.                                                              // 14098
                        cmp = compare( yc, rem, yL, remL );                                                            // 14099
                                                                                                                       // 14100
                        // If divisor < remainder.                                                                     // 14101
                        if ( cmp < 0 ) {                                                                               // 14102
                                                                                                                       // 14103
                            // Calculate trial digit, n.                                                               // 14104
                                                                                                                       // 14105
                            rem0 = rem[0];                                                                             // 14106
                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                    // 14107
                                                                                                                       // 14108
                            // n is how many times the divisor goes into the current remainder.                        // 14109
                            n = mathfloor( rem0 / yc0 );                                                               // 14110
                                                                                                                       // 14111
                            //  Algorithm:                                                                             // 14112
                            //  1. product = divisor * trial digit (n)                                                 // 14113
                            //  2. if product > remainder: product -= divisor, n--                                     // 14114
                            //  3. remainder -= product                                                                // 14115
                            //  4. if product was < remainder at 2:                                                    // 14116
                            //    5. compare new remainder and divisor                                                 // 14117
                            //    6. If remainder > divisor: remainder -= divisor, n++                                 // 14118
                                                                                                                       // 14119
                            if ( n > 1 ) {                                                                             // 14120
                                                                                                                       // 14121
                                // n may be > base only when base is 3.                                                // 14122
                                if (n >= base) n = base - 1;                                                           // 14123
                                                                                                                       // 14124
                                // product = divisor * trial digit.                                                    // 14125
                                prod = multiply( yc, n, base );                                                        // 14126
                                prodL = prod.length;                                                                   // 14127
                                remL = rem.length;                                                                     // 14128
                                                                                                                       // 14129
                                // Compare product and remainder.                                                      // 14130
                                // If product > remainder.                                                             // 14131
                                // Trial digit n too high.                                                             // 14132
                                // n is 1 too high about 5% of the time, and is not known to have                      // 14133
                                // ever been more than 1 too high.                                                     // 14134
                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                     // 14135
                                    n--;                                                                               // 14136
                                                                                                                       // 14137
                                    // Subtract divisor from product.                                                  // 14138
                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                               // 14139
                                    prodL = prod.length;                                                               // 14140
                                    cmp = 1;                                                                           // 14141
                                }                                                                                      // 14142
                            } else {                                                                                   // 14143
                                                                                                                       // 14144
                                // n is 0 or 1, cmp is -1.                                                             // 14145
                                // If n is 0, there is no need to compare yc and rem again below,                      // 14146
                                // so change cmp to 1 to avoid it.                                                     // 14147
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                       // 14148
                                if ( n == 0 ) {                                                                        // 14149
                                                                                                                       // 14150
                                    // divisor < remainder, so n must be at least 1.                                   // 14151
                                    cmp = n = 1;                                                                       // 14152
                                }                                                                                      // 14153
                                                                                                                       // 14154
                                // product = divisor                                                                   // 14155
                                prod = yc.slice();                                                                     // 14156
                                prodL = prod.length;                                                                   // 14157
                            }                                                                                          // 14158
                                                                                                                       // 14159
                            if ( prodL < remL ) prod.unshift(0);                                                       // 14160
                                                                                                                       // 14161
                            // Subtract product from remainder.                                                        // 14162
                            subtract( rem, prod, remL, base );                                                         // 14163
                            remL = rem.length;                                                                         // 14164
                                                                                                                       // 14165
                             // If product was < remainder.                                                            // 14166
                            if ( cmp == -1 ) {                                                                         // 14167
                                                                                                                       // 14168
                                // Compare divisor and new remainder.                                                  // 14169
                                // If divisor < new remainder, subtract divisor from remainder.                        // 14170
                                // Trial digit n too low.                                                              // 14171
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                     // 14172
                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                           // 14173
                                    n++;                                                                               // 14174
                                                                                                                       // 14175
                                    // Subtract divisor from remainder.                                                // 14176
                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                  // 14177
                                    remL = rem.length;                                                                 // 14178
                                }                                                                                      // 14179
                            }                                                                                          // 14180
                        } else if ( cmp === 0 ) {                                                                      // 14181
                            n++;                                                                                       // 14182
                            rem = [0];                                                                                 // 14183
                        } // else cmp === 1 and n will be 0                                                            // 14184
                                                                                                                       // 14185
                        // Add the next digit, n, to the result array.                                                 // 14186
                        qc[i++] = n;                                                                                   // 14187
                                                                                                                       // 14188
                        // Update the remainder.                                                                       // 14189
                        if ( rem[0] ) {                                                                                // 14190
                            rem[remL++] = xc[xi] || 0;                                                                 // 14191
                        } else {                                                                                       // 14192
                            rem = [ xc[xi] ];                                                                          // 14193
                            remL = 1;                                                                                  // 14194
                        }                                                                                              // 14195
                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                                // 14196
                                                                                                                       // 14197
                    more = rem[0] != null;                                                                             // 14198
                                                                                                                       // 14199
                    // Leading zero?                                                                                   // 14200
                    if ( !qc[0] ) qc.shift();                                                                          // 14201
                }                                                                                                      // 14202
                                                                                                                       // 14203
                if ( base == BASE ) {                                                                                  // 14204
                                                                                                                       // 14205
                    // To calculate q.e, first get the number of digits of qc[0].                                      // 14206
                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                   // 14207
                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                     // 14208
                                                                                                                       // 14209
                // Caller is convertBase.                                                                              // 14210
                } else {                                                                                               // 14211
                    q.e = e;                                                                                           // 14212
                    q.r = +more;                                                                                       // 14213
                }                                                                                                      // 14214
                                                                                                                       // 14215
                return q;                                                                                              // 14216
            };                                                                                                         // 14217
        })();                                                                                                          // 14218
                                                                                                                       // 14219
                                                                                                                       // 14220
        /*                                                                                                             // 14221
         * Return a string representing the value of BigNumber n in fixed-point or exponential                         // 14222
         * notation rounded to the specified decimal places or significant digits.                                     // 14223
         *                                                                                                             // 14224
         * n is a BigNumber.                                                                                           // 14225
         * i is the index of the last digit required (i.e. the digit that may be rounded up).                          // 14226
         * rm is the rounding mode.                                                                                    // 14227
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                             // 14228
         */                                                                                                            // 14229
        function format( n, i, rm, caller ) {                                                                          // 14230
            var c0, e, ne, len, str;                                                                                   // 14231
                                                                                                                       // 14232
            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                            // 14233
              ? rm | 0 : ROUNDING_MODE;                                                                                // 14234
                                                                                                                       // 14235
            if ( !n.c ) return n.toString();                                                                           // 14236
            c0 = n.c[0];                                                                                               // 14237
            ne = n.e;                                                                                                  // 14238
                                                                                                                       // 14239
            if ( i == null ) {                                                                                         // 14240
                str = coeffToString( n.c );                                                                            // 14241
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                                 // 14242
                  ? toExponential( str, ne )                                                                           // 14243
                  : toFixedPoint( str, ne );                                                                           // 14244
            } else {                                                                                                   // 14245
                n = round( new BigNumber(n), i, rm );                                                                  // 14246
                                                                                                                       // 14247
                // n.e may have changed if the value was rounded up.                                                   // 14248
                e = n.e;                                                                                               // 14249
                                                                                                                       // 14250
                str = coeffToString( n.c );                                                                            // 14251
                len = str.length;                                                                                      // 14252
                                                                                                                       // 14253
                // toPrecision returns exponential notation if the number of significant digits                        // 14254
                // specified is less than the number of digits necessary to represent the integer                      // 14255
                // part of the value in fixed-point notation.                                                          // 14256
                                                                                                                       // 14257
                // Exponential notation.                                                                               // 14258
                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                                 // 14259
                                                                                                                       // 14260
                    // Append zeros?                                                                                   // 14261
                    for ( ; len < i; str += '0', len++ );                                                              // 14262
                    str = toExponential( str, e );                                                                     // 14263
                                                                                                                       // 14264
                // Fixed-point notation.                                                                               // 14265
                } else {                                                                                               // 14266
                    i -= ne;                                                                                           // 14267
                    str = toFixedPoint( str, e );                                                                      // 14268
                                                                                                                       // 14269
                    // Append zeros?                                                                                   // 14270
                    if ( e + 1 > len ) {                                                                               // 14271
                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                            // 14272
                    } else {                                                                                           // 14273
                        i += e - len;                                                                                  // 14274
                        if ( i > 0 ) {                                                                                 // 14275
                            if ( e + 1 == len ) str += '.';                                                            // 14276
                            for ( ; i--; str += '0' );                                                                 // 14277
                        }                                                                                              // 14278
                    }                                                                                                  // 14279
                }                                                                                                      // 14280
            }                                                                                                          // 14281
                                                                                                                       // 14282
            return n.s < 0 && c0 ? '-' + str : str;                                                                    // 14283
        }                                                                                                              // 14284
                                                                                                                       // 14285
                                                                                                                       // 14286
        // Handle BigNumber.max and BigNumber.min.                                                                     // 14287
        function maxOrMin( args, method ) {                                                                            // 14288
            var m, n,                                                                                                  // 14289
                i = 0;                                                                                                 // 14290
                                                                                                                       // 14291
            if ( isArray( args[0] ) ) args = args[0];                                                                  // 14292
            m = new BigNumber( args[0] );                                                                              // 14293
                                                                                                                       // 14294
            for ( ; ++i < args.length; ) {                                                                             // 14295
                n = new BigNumber( args[i] );                                                                          // 14296
                                                                                                                       // 14297
                // If any number is NaN, return NaN.                                                                   // 14298
                if ( !n.s ) {                                                                                          // 14299
                    m = n;                                                                                             // 14300
                    break;                                                                                             // 14301
                } else if ( method.call( m, n ) ) {                                                                    // 14302
                    m = n;                                                                                             // 14303
                }                                                                                                      // 14304
            }                                                                                                          // 14305
                                                                                                                       // 14306
            return m;                                                                                                  // 14307
        }                                                                                                              // 14308
                                                                                                                       // 14309
                                                                                                                       // 14310
        /*                                                                                                             // 14311
         * Return true if n is an integer in range, otherwise throw.                                                   // 14312
         * Use for argument validation when ERRORS is true.                                                            // 14313
         */                                                                                                            // 14314
        function intValidatorWithErrors( n, min, max, caller, name ) {                                                 // 14315
            if ( n < min || n > max || n != truncate(n) ) {                                                            // 14316
                raise( caller, ( name || 'decimal places' ) +                                                          // 14317
                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                   // 14318
            }                                                                                                          // 14319
                                                                                                                       // 14320
            return true;                                                                                               // 14321
        }                                                                                                              // 14322
                                                                                                                       // 14323
                                                                                                                       // 14324
        /*                                                                                                             // 14325
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                     // 14326
         * Called by minus, plus and times.                                                                            // 14327
         */                                                                                                            // 14328
        function normalise( n, c, e ) {                                                                                // 14329
            var i = 1,                                                                                                 // 14330
                j = c.length;                                                                                          // 14331
                                                                                                                       // 14332
             // Remove trailing zeros.                                                                                 // 14333
            for ( ; !c[--j]; c.pop() );                                                                                // 14334
                                                                                                                       // 14335
            // Calculate the base 10 exponent. First get the number of digits of c[0].                                 // 14336
            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                   // 14337
                                                                                                                       // 14338
            // Overflow?                                                                                               // 14339
            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                            // 14340
                                                                                                                       // 14341
                // Infinity.                                                                                           // 14342
                n.c = n.e = null;                                                                                      // 14343
                                                                                                                       // 14344
            // Underflow?                                                                                              // 14345
            } else if ( e < MIN_EXP ) {                                                                                // 14346
                                                                                                                       // 14347
                // Zero.                                                                                               // 14348
                n.c = [ n.e = 0 ];                                                                                     // 14349
            } else {                                                                                                   // 14350
                n.e = e;                                                                                               // 14351
                n.c = c;                                                                                               // 14352
            }                                                                                                          // 14353
                                                                                                                       // 14354
            return n;                                                                                                  // 14355
        }                                                                                                              // 14356
                                                                                                                       // 14357
                                                                                                                       // 14358
        // Handle values that fail the validity test in BigNumber.                                                     // 14359
        parseNumeric = (function () {                                                                                  // 14360
            var basePrefix = /^(-?)0([xbo])/i,                                                                         // 14361
                dotAfter = /^([^.]+)\.$/,                                                                              // 14362
                dotBefore = /^\.([^.]+)$/,                                                                             // 14363
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                                // 14364
                whitespaceOrPlus = /^\s*\+|^\s+|\s+$/g;                                                                // 14365
                                                                                                                       // 14366
            return function ( x, str, num, b ) {                                                                       // 14367
                var base,                                                                                              // 14368
                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                               // 14369
                                                                                                                       // 14370
                // No exception on ±Infinity or NaN.                                                                   // 14371
                if ( isInfinityOrNaN.test(s) ) {                                                                       // 14372
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                            // 14373
                } else {                                                                                               // 14374
                    if ( !num ) {                                                                                      // 14375
                                                                                                                       // 14376
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i                                                  // 14377
                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                            // 14378
                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                          // 14379
                            return !b || b == base ? p1 : m;                                                           // 14380
                        });                                                                                            // 14381
                                                                                                                       // 14382
                        if (b) {                                                                                       // 14383
                            base = b;                                                                                  // 14384
                                                                                                                       // 14385
                            // E.g. '1.' to '1', '.1' to '0.1'                                                         // 14386
                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                              // 14387
                        }                                                                                              // 14388
                                                                                                                       // 14389
                        if ( str != s ) return new BigNumber( s, base );                                               // 14390
                    }                                                                                                  // 14391
                                                                                                                       // 14392
                    // 'new BigNumber() not a number: {n}'                                                             // 14393
                    // 'new BigNumber() not a base {b} number: {n}'                                                    // 14394
                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                     // 14395
                    x.s = null;                                                                                        // 14396
                }                                                                                                      // 14397
                                                                                                                       // 14398
                x.c = x.e = null;                                                                                      // 14399
                id = 0;                                                                                                // 14400
            }                                                                                                          // 14401
        })();                                                                                                          // 14402
                                                                                                                       // 14403
                                                                                                                       // 14404
        // Throw a BigNumber Error.                                                                                    // 14405
        function raise( caller, msg, val ) {                                                                           // 14406
            var error = new Error( [                                                                                   // 14407
                'new BigNumber',     // 0                                                                              // 14408
                'cmp',               // 1                                                                              // 14409
                'config',            // 2                                                                              // 14410
                'div',               // 3                                                                              // 14411
                'divToInt',          // 4                                                                              // 14412
                'eq',                // 5                                                                              // 14413
                'gt',                // 6                                                                              // 14414
                'gte',               // 7                                                                              // 14415
                'lt',                // 8                                                                              // 14416
                'lte',               // 9                                                                              // 14417
                'minus',             // 10                                                                             // 14418
                'mod',               // 11                                                                             // 14419
                'plus',              // 12                                                                             // 14420
                'precision',         // 13                                                                             // 14421
                'random',            // 14                                                                             // 14422
                'round',             // 15                                                                             // 14423
                'shift',             // 16                                                                             // 14424
                'times',             // 17                                                                             // 14425
                'toDigits',          // 18                                                                             // 14426
                'toExponential',     // 19                                                                             // 14427
                'toFixed',           // 20                                                                             // 14428
                'toFormat',          // 21                                                                             // 14429
                'toFraction',        // 22                                                                             // 14430
                'pow',               // 23                                                                             // 14431
                'toPrecision',       // 24                                                                             // 14432
                'toString',          // 25                                                                             // 14433
                'BigNumber'          // 26                                                                             // 14434
            ][caller] + '() ' + msg + ': ' + val );                                                                    // 14435
                                                                                                                       // 14436
            error.name = 'BigNumber Error';                                                                            // 14437
            id = 0;                                                                                                    // 14438
            throw error;                                                                                               // 14439
        }                                                                                                              // 14440
                                                                                                                       // 14441
                                                                                                                       // 14442
        /*                                                                                                             // 14443
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                         // 14444
         * If r is truthy, it is known that there are more digits after the rounding digit.                            // 14445
         */                                                                                                            // 14446
        function round( x, sd, rm, r ) {                                                                               // 14447
            var d, i, j, k, n, ni, rd,                                                                                 // 14448
                xc = x.c,                                                                                              // 14449
                pows10 = POWS_TEN;                                                                                     // 14450
                                                                                                                       // 14451
            // if x is not Infinity or NaN...                                                                          // 14452
            if (xc) {                                                                                                  // 14453
                                                                                                                       // 14454
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                    // 14455
                // n is a base 1e14 number, the value of the element of array x.c containing rd.                       // 14456
                // ni is the index of n within x.c.                                                                    // 14457
                // d is the number of digits of n.                                                                     // 14458
                // i is the index of rd within n including leading zeros.                                              // 14459
                // j is the actual index of rd within n (if < 0, rd is a leading zero).                                // 14460
                out: {                                                                                                 // 14461
                                                                                                                       // 14462
                    // Get the number of digits of the first element of xc.                                            // 14463
                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                   // 14464
                    i = sd - d;                                                                                        // 14465
                                                                                                                       // 14466
                    // If the rounding digit is in the first element of xc...                                          // 14467
                    if ( i < 0 ) {                                                                                     // 14468
                        i += LOG_BASE;                                                                                 // 14469
                        j = sd;                                                                                        // 14470
                        n = xc[ ni = 0 ];                                                                              // 14471
                                                                                                                       // 14472
                        // Get the rounding digit at index j of n.                                                     // 14473
                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                         // 14474
                    } else {                                                                                           // 14475
                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                         // 14476
                                                                                                                       // 14477
                        if ( ni >= xc.length ) {                                                                       // 14478
                                                                                                                       // 14479
                            if (r) {                                                                                   // 14480
                                                                                                                       // 14481
                                // Needed by sqrt.                                                                     // 14482
                                for ( ; xc.length <= ni; xc.push(0) );                                                 // 14483
                                n = rd = 0;                                                                            // 14484
                                d = 1;                                                                                 // 14485
                                i %= LOG_BASE;                                                                         // 14486
                                j = i - LOG_BASE + 1;                                                                  // 14487
                            } else {                                                                                   // 14488
                                break out;                                                                             // 14489
                            }                                                                                          // 14490
                        } else {                                                                                       // 14491
                            n = k = xc[ni];                                                                            // 14492
                                                                                                                       // 14493
                            // Get the number of digits of n.                                                          // 14494
                            for ( d = 1; k >= 10; k /= 10, d++ );                                                      // 14495
                                                                                                                       // 14496
                            // Get the index of rd within n.                                                           // 14497
                            i %= LOG_BASE;                                                                             // 14498
                                                                                                                       // 14499
                            // Get the index of rd within n, adjusted for leading zeros.                               // 14500
                            // The number of leading zeros of n is given by LOG_BASE - d.                              // 14501
                            j = i - LOG_BASE + d;                                                                      // 14502
                                                                                                                       // 14503
                            // Get the rounding digit at index j of n.                                                 // 14504
                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                         // 14505
                        }                                                                                              // 14506
                    }                                                                                                  // 14507
                                                                                                                       // 14508
                    r = r || sd < 0 ||                                                                                 // 14509
                                                                                                                       // 14510
                    // Are there any non-zero digits after the rounding digit?                                         // 14511
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                   // 14512
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                    // 14513
                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                   // 14514
                                                                                                                       // 14515
                    r = rm < 4                                                                                         // 14516
                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                        // 14517
                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                              // 14518
                                                                                                                       // 14519
                        // Check whether the digit to the left of the rounding digit is odd.                           // 14520
                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                       // 14521
                          rm == ( x.s < 0 ? 8 : 7 ) );                                                                 // 14522
                                                                                                                       // 14523
                    if ( sd < 1 || !xc[0] ) {                                                                          // 14524
                        xc.length = 0;                                                                                 // 14525
                                                                                                                       // 14526
                        if (r) {                                                                                       // 14527
                                                                                                                       // 14528
                            // Convert sd to decimal places.                                                           // 14529
                            sd -= x.e + 1;                                                                             // 14530
                                                                                                                       // 14531
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                        // 14532
                            xc[0] = pows10[ sd % LOG_BASE ];                                                           // 14533
                            x.e = -sd || 0;                                                                            // 14534
                        } else {                                                                                       // 14535
                                                                                                                       // 14536
                            // Zero.                                                                                   // 14537
                            xc[0] = x.e = 0;                                                                           // 14538
                        }                                                                                              // 14539
                                                                                                                       // 14540
                        return x;                                                                                      // 14541
                    }                                                                                                  // 14542
                                                                                                                       // 14543
                    // Remove excess digits.                                                                           // 14544
                    if ( i == 0 ) {                                                                                    // 14545
                        xc.length = ni;                                                                                // 14546
                        k = 1;                                                                                         // 14547
                        ni--;                                                                                          // 14548
                    } else {                                                                                           // 14549
                        xc.length = ni + 1;                                                                            // 14550
                        k = pows10[ LOG_BASE - i ];                                                                    // 14551
                                                                                                                       // 14552
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                        // 14553
                        // j > 0 means i > number of leading zeros of n.                                               // 14554
                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                         // 14555
                    }                                                                                                  // 14556
                                                                                                                       // 14557
                    // Round up?                                                                                       // 14558
                    if (r) {                                                                                           // 14559
                                                                                                                       // 14560
                        for ( ; ; ) {                                                                                  // 14561
                                                                                                                       // 14562
                            // If the digit to be rounded up is in the first element of xc...                          // 14563
                            if ( ni == 0 ) {                                                                           // 14564
                                                                                                                       // 14565
                                // i will be the length of xc[0] before k is added.                                    // 14566
                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                       // 14567
                                j = xc[0] += k;                                                                        // 14568
                                for ( k = 1; j >= 10; j /= 10, k++ );                                                  // 14569
                                                                                                                       // 14570
                                // if i != k the length has increased.                                                 // 14571
                                if ( i != k ) {                                                                        // 14572
                                    x.e++;                                                                             // 14573
                                    if ( xc[0] == BASE ) xc[0] = 1;                                                    // 14574
                                }                                                                                      // 14575
                                                                                                                       // 14576
                                break;                                                                                 // 14577
                            } else {                                                                                   // 14578
                                xc[ni] += k;                                                                           // 14579
                                if ( xc[ni] != BASE ) break;                                                           // 14580
                                xc[ni--] = 0;                                                                          // 14581
                                k = 1;                                                                                 // 14582
                            }                                                                                          // 14583
                        }                                                                                              // 14584
                    }                                                                                                  // 14585
                                                                                                                       // 14586
                    // Remove trailing zeros.                                                                          // 14587
                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                    // 14588
                }                                                                                                      // 14589
                                                                                                                       // 14590
                // Overflow? Infinity.                                                                                 // 14591
                if ( x.e > MAX_EXP ) {                                                                                 // 14592
                    x.c = x.e = null;                                                                                  // 14593
                                                                                                                       // 14594
                // Underflow? Zero.                                                                                    // 14595
                } else if ( x.e < MIN_EXP ) {                                                                          // 14596
                    x.c = [ x.e = 0 ];                                                                                 // 14597
                }                                                                                                      // 14598
            }                                                                                                          // 14599
                                                                                                                       // 14600
            return x;                                                                                                  // 14601
        }                                                                                                              // 14602
                                                                                                                       // 14603
                                                                                                                       // 14604
        // PROTOTYPE/INSTANCE METHODS                                                                                  // 14605
                                                                                                                       // 14606
                                                                                                                       // 14607
        /*                                                                                                             // 14608
         * Return a new BigNumber whose value is the absolute value of this BigNumber.                                 // 14609
         */                                                                                                            // 14610
        P.absoluteValue = P.abs = function () {                                                                        // 14611
            var x = new BigNumber(this);                                                                               // 14612
            if ( x.s < 0 ) x.s = 1;                                                                                    // 14613
            return x;                                                                                                  // 14614
        };                                                                                                             // 14615
                                                                                                                       // 14616
                                                                                                                       // 14617
        /*                                                                                                             // 14618
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14619
         * number in the direction of Infinity.                                                                        // 14620
         */                                                                                                            // 14621
        P.ceil = function () {                                                                                         // 14622
            return round( new BigNumber(this), this.e + 1, 2 );                                                        // 14623
        };                                                                                                             // 14624
                                                                                                                       // 14625
                                                                                                                       // 14626
        /*                                                                                                             // 14627
         * Return                                                                                                      // 14628
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                              // 14629
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                                // 14630
         * 0 if they have the same value,                                                                              // 14631
         * or null if the value of either is NaN.                                                                      // 14632
         */                                                                                                            // 14633
        P.comparedTo = P.cmp = function ( y, b ) {                                                                     // 14634
            id = 1;                                                                                                    // 14635
            return compare( this, new BigNumber( y, b ) );                                                             // 14636
        };                                                                                                             // 14637
                                                                                                                       // 14638
                                                                                                                       // 14639
        /*                                                                                                             // 14640
         * Return the number of decimal places of the value of this BigNumber, or null if the value                    // 14641
         * of this BigNumber is ±Infinity or NaN.                                                                      // 14642
         */                                                                                                            // 14643
        P.decimalPlaces = P.dp = function () {                                                                         // 14644
            var n, v,                                                                                                  // 14645
                c = this.c;                                                                                            // 14646
                                                                                                                       // 14647
            if ( !c ) return null;                                                                                     // 14648
            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                   // 14649
                                                                                                                       // 14650
            // Subtract the number of trailing zeros of the last number.                                               // 14651
            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                       // 14652
            if ( n < 0 ) n = 0;                                                                                        // 14653
                                                                                                                       // 14654
            return n;                                                                                                  // 14655
        };                                                                                                             // 14656
                                                                                                                       // 14657
                                                                                                                       // 14658
        /*                                                                                                             // 14659
         *  n / 0 = I                                                                                                  // 14660
         *  n / N = N                                                                                                  // 14661
         *  n / I = 0                                                                                                  // 14662
         *  0 / n = 0                                                                                                  // 14663
         *  0 / 0 = N                                                                                                  // 14664
         *  0 / N = N                                                                                                  // 14665
         *  0 / I = 0                                                                                                  // 14666
         *  N / n = N                                                                                                  // 14667
         *  N / 0 = N                                                                                                  // 14668
         *  N / N = N                                                                                                  // 14669
         *  N / I = N                                                                                                  // 14670
         *  I / n = I                                                                                                  // 14671
         *  I / 0 = I                                                                                                  // 14672
         *  I / N = N                                                                                                  // 14673
         *  I / I = N                                                                                                  // 14674
         *                                                                                                             // 14675
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                   // 14676
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                     // 14677
         */                                                                                                            // 14678
        P.dividedBy = P.div = function ( y, b ) {                                                                      // 14679
            id = 3;                                                                                                    // 14680
            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                  // 14681
        };                                                                                                             // 14682
                                                                                                                       // 14683
                                                                                                                       // 14684
        /*                                                                                                             // 14685
         * Return a new BigNumber whose value is the integer part of dividing the value of this                        // 14686
         * BigNumber by the value of BigNumber(y, b).                                                                  // 14687
         */                                                                                                            // 14688
        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                        // 14689
            id = 4;                                                                                                    // 14690
            return div( this, new BigNumber( y, b ), 0, 1 );                                                           // 14691
        };                                                                                                             // 14692
                                                                                                                       // 14693
                                                                                                                       // 14694
        /*                                                                                                             // 14695
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                        // 14696
         * otherwise returns false.                                                                                    // 14697
         */                                                                                                            // 14698
        P.equals = P.eq = function ( y, b ) {                                                                          // 14699
            id = 5;                                                                                                    // 14700
            return compare( this, new BigNumber( y, b ) ) === 0;                                                       // 14701
        };                                                                                                             // 14702
                                                                                                                       // 14703
                                                                                                                       // 14704
        /*                                                                                                             // 14705
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14706
         * number in the direction of -Infinity.                                                                       // 14707
         */                                                                                                            // 14708
        P.floor = function () {                                                                                        // 14709
            return round( new BigNumber(this), this.e + 1, 3 );                                                        // 14710
        };                                                                                                             // 14711
                                                                                                                       // 14712
                                                                                                                       // 14713
        /*                                                                                                             // 14714
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                    // 14715
         * otherwise returns false.                                                                                    // 14716
         */                                                                                                            // 14717
        P.greaterThan = P.gt = function ( y, b ) {                                                                     // 14718
            id = 6;                                                                                                    // 14719
            return compare( this, new BigNumber( y, b ) ) > 0;                                                         // 14720
        };                                                                                                             // 14721
                                                                                                                       // 14722
                                                                                                                       // 14723
        /*                                                                                                             // 14724
         * Return true if the value of this BigNumber is greater than or equal to the value of                         // 14725
         * BigNumber(y, b), otherwise returns false.                                                                   // 14726
         */                                                                                                            // 14727
        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                           // 14728
            id = 7;                                                                                                    // 14729
            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                    // 14730
                                                                                                                       // 14731
        };                                                                                                             // 14732
                                                                                                                       // 14733
                                                                                                                       // 14734
        /*                                                                                                             // 14735
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                     // 14736
         */                                                                                                            // 14737
        P.isFinite = function () {                                                                                     // 14738
            return !!this.c;                                                                                           // 14739
        };                                                                                                             // 14740
                                                                                                                       // 14741
                                                                                                                       // 14742
        /*                                                                                                             // 14743
         * Return true if the value of this BigNumber is an integer, otherwise return false.                           // 14744
         */                                                                                                            // 14745
        P.isInteger = P.isInt = function () {                                                                          // 14746
            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                      // 14747
        };                                                                                                             // 14748
                                                                                                                       // 14749
                                                                                                                       // 14750
        /*                                                                                                             // 14751
         * Return true if the value of this BigNumber is NaN, otherwise returns false.                                 // 14752
         */                                                                                                            // 14753
        P.isNaN = function () {                                                                                        // 14754
            return !this.s;                                                                                            // 14755
        };                                                                                                             // 14756
                                                                                                                       // 14757
                                                                                                                       // 14758
        /*                                                                                                             // 14759
         * Return true if the value of this BigNumber is negative, otherwise returns false.                            // 14760
         */                                                                                                            // 14761
        P.isNegative = P.isNeg = function () {                                                                         // 14762
            return this.s < 0;                                                                                         // 14763
        };                                                                                                             // 14764
                                                                                                                       // 14765
                                                                                                                       // 14766
        /*                                                                                                             // 14767
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                             // 14768
         */                                                                                                            // 14769
        P.isZero = function () {                                                                                       // 14770
            return !!this.c && this.c[0] == 0;                                                                         // 14771
        };                                                                                                             // 14772
                                                                                                                       // 14773
                                                                                                                       // 14774
        /*                                                                                                             // 14775
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                       // 14776
         * otherwise returns false.                                                                                    // 14777
         */                                                                                                            // 14778
        P.lessThan = P.lt = function ( y, b ) {                                                                        // 14779
            id = 8;                                                                                                    // 14780
            return compare( this, new BigNumber( y, b ) ) < 0;                                                         // 14781
        };                                                                                                             // 14782
                                                                                                                       // 14783
                                                                                                                       // 14784
        /*                                                                                                             // 14785
         * Return true if the value of this BigNumber is less than or equal to the value of                            // 14786
         * BigNumber(y, b), otherwise returns false.                                                                   // 14787
         */                                                                                                            // 14788
        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                              // 14789
            id = 9;                                                                                                    // 14790
            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                   // 14791
        };                                                                                                             // 14792
                                                                                                                       // 14793
                                                                                                                       // 14794
        /*                                                                                                             // 14795
         *  n - 0 = n                                                                                                  // 14796
         *  n - N = N                                                                                                  // 14797
         *  n - I = -I                                                                                                 // 14798
         *  0 - n = -n                                                                                                 // 14799
         *  0 - 0 = 0                                                                                                  // 14800
         *  0 - N = N                                                                                                  // 14801
         *  0 - I = -I                                                                                                 // 14802
         *  N - n = N                                                                                                  // 14803
         *  N - 0 = N                                                                                                  // 14804
         *  N - N = N                                                                                                  // 14805
         *  N - I = N                                                                                                  // 14806
         *  I - n = I                                                                                                  // 14807
         *  I - 0 = I                                                                                                  // 14808
         *  I - N = N                                                                                                  // 14809
         *  I - I = N                                                                                                  // 14810
         *                                                                                                             // 14811
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                        // 14812
         * BigNumber(y, b).                                                                                            // 14813
         */                                                                                                            // 14814
        P.minus = P.sub = function ( y, b ) {                                                                          // 14815
            var i, j, t, xLTy,                                                                                         // 14816
                x = this,                                                                                              // 14817
                a = x.s;                                                                                               // 14818
                                                                                                                       // 14819
            id = 10;                                                                                                   // 14820
            y = new BigNumber( y, b );                                                                                 // 14821
            b = y.s;                                                                                                   // 14822
                                                                                                                       // 14823
            // Either NaN?                                                                                             // 14824
            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 14825
                                                                                                                       // 14826
            // Signs differ?                                                                                           // 14827
            if ( a != b ) {                                                                                            // 14828
                y.s = -b;                                                                                              // 14829
                return x.plus(y);                                                                                      // 14830
            }                                                                                                          // 14831
                                                                                                                       // 14832
            var xe = x.e / LOG_BASE,                                                                                   // 14833
                ye = y.e / LOG_BASE,                                                                                   // 14834
                xc = x.c,                                                                                              // 14835
                yc = y.c;                                                                                              // 14836
                                                                                                                       // 14837
            if ( !xe || !ye ) {                                                                                        // 14838
                                                                                                                       // 14839
                // Either Infinity?                                                                                    // 14840
                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                         // 14841
                                                                                                                       // 14842
                // Either zero?                                                                                        // 14843
                if ( !xc[0] || !yc[0] ) {                                                                              // 14844
                                                                                                                       // 14845
                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                        // 14846
                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                        // 14847
                                                                                                                       // 14848
                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                    // 14849
                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                   // 14850
                }                                                                                                      // 14851
            }                                                                                                          // 14852
                                                                                                                       // 14853
            xe = bitFloor(xe);                                                                                         // 14854
            ye = bitFloor(ye);                                                                                         // 14855
            xc = xc.slice();                                                                                           // 14856
                                                                                                                       // 14857
            // Determine which is the bigger number.                                                                   // 14858
            if ( a = xe - ye ) {                                                                                       // 14859
                                                                                                                       // 14860
                if ( xLTy = a < 0 ) {                                                                                  // 14861
                    a = -a;                                                                                            // 14862
                    t = xc;                                                                                            // 14863
                } else {                                                                                               // 14864
                    ye = xe;                                                                                           // 14865
                    t = yc;                                                                                            // 14866
                }                                                                                                      // 14867
                                                                                                                       // 14868
                t.reverse();                                                                                           // 14869
                                                                                                                       // 14870
                // Prepend zeros to equalise exponents.                                                                // 14871
                for ( b = a; b--; t.push(0) );                                                                         // 14872
                t.reverse();                                                                                           // 14873
            } else {                                                                                                   // 14874
                                                                                                                       // 14875
                // Exponents equal. Check digit by digit.                                                              // 14876
                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                          // 14877
                                                                                                                       // 14878
                for ( a = b = 0; b < j; b++ ) {                                                                        // 14879
                                                                                                                       // 14880
                    if ( xc[b] != yc[b] ) {                                                                            // 14881
                        xLTy = xc[b] < yc[b];                                                                          // 14882
                        break;                                                                                         // 14883
                    }                                                                                                  // 14884
                }                                                                                                      // 14885
            }                                                                                                          // 14886
                                                                                                                       // 14887
            // x < y? Point xc to the array of the bigger number.                                                      // 14888
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                             // 14889
                                                                                                                       // 14890
            b = ( j = yc.length ) - ( i = xc.length );                                                                 // 14891
                                                                                                                       // 14892
            // Append zeros to xc if shorter.                                                                          // 14893
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                     // 14894
            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                   // 14895
            b = BASE - 1;                                                                                              // 14896
                                                                                                                       // 14897
            // Subtract yc from xc.                                                                                    // 14898
            for ( ; j > a; ) {                                                                                         // 14899
                                                                                                                       // 14900
                if ( xc[--j] < yc[j] ) {                                                                               // 14901
                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                           // 14902
                    --xc[i];                                                                                           // 14903
                    xc[j] += BASE;                                                                                     // 14904
                }                                                                                                      // 14905
                                                                                                                       // 14906
                xc[j] -= yc[j];                                                                                        // 14907
            }                                                                                                          // 14908
                                                                                                                       // 14909
            // Remove leading zeros and adjust exponent accordingly.                                                   // 14910
            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                    // 14911
                                                                                                                       // 14912
            // Zero?                                                                                                   // 14913
            if ( !xc[0] ) {                                                                                            // 14914
                                                                                                                       // 14915
                // Following IEEE 754 (2008) 6.3,                                                                      // 14916
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                       // 14917
                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                     // 14918
                y.c = [ y.e = 0 ];                                                                                     // 14919
                return y;                                                                                              // 14920
            }                                                                                                          // 14921
                                                                                                                       // 14922
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                             // 14923
            // for finite x and y.                                                                                     // 14924
            return normalise( y, xc, ye );                                                                             // 14925
        };                                                                                                             // 14926
                                                                                                                       // 14927
                                                                                                                       // 14928
        /*                                                                                                             // 14929
         *   n % 0 =  N                                                                                                // 14930
         *   n % N =  N                                                                                                // 14931
         *   n % I =  n                                                                                                // 14932
         *   0 % n =  0                                                                                                // 14933
         *  -0 % n = -0                                                                                                // 14934
         *   0 % 0 =  N                                                                                                // 14935
         *   0 % N =  N                                                                                                // 14936
         *   0 % I =  0                                                                                                // 14937
         *   N % n =  N                                                                                                // 14938
         *   N % 0 =  N                                                                                                // 14939
         *   N % N =  N                                                                                                // 14940
         *   N % I =  N                                                                                                // 14941
         *   I % n =  N                                                                                                // 14942
         *   I % 0 =  N                                                                                                // 14943
         *   I % N =  N                                                                                                // 14944
         *   I % I =  N                                                                                                // 14945
         *                                                                                                             // 14946
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                       // 14947
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                            // 14948
         */                                                                                                            // 14949
        P.modulo = P.mod = function ( y, b ) {                                                                         // 14950
            var q, s,                                                                                                  // 14951
                x = this;                                                                                              // 14952
                                                                                                                       // 14953
            id = 11;                                                                                                   // 14954
            y = new BigNumber( y, b );                                                                                 // 14955
                                                                                                                       // 14956
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                                // 14957
            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                    // 14958
                return new BigNumber(NaN);                                                                             // 14959
                                                                                                                       // 14960
            // Return x if y is Infinity or x is zero.                                                                 // 14961
            } else if ( !y.c || x.c && !x.c[0] ) {                                                                     // 14962
                return new BigNumber(x);                                                                               // 14963
            }                                                                                                          // 14964
                                                                                                                       // 14965
            if ( MODULO_MODE == 9 ) {                                                                                  // 14966
                                                                                                                       // 14967
                // Euclidian division: q = sign(y) * floor(x / abs(y))                                                 // 14968
                // r = x - qy    where  0 <= r < abs(y)                                                                // 14969
                s = y.s;                                                                                               // 14970
                y.s = 1;                                                                                               // 14971
                q = div( x, y, 0, 3 );                                                                                 // 14972
                y.s = s;                                                                                               // 14973
                q.s *= s;                                                                                              // 14974
            } else {                                                                                                   // 14975
                q = div( x, y, 0, MODULO_MODE );                                                                       // 14976
            }                                                                                                          // 14977
                                                                                                                       // 14978
            return x.minus( q.times(y) );                                                                              // 14979
        };                                                                                                             // 14980
                                                                                                                       // 14981
                                                                                                                       // 14982
        /*                                                                                                             // 14983
         * Return a new BigNumber whose value is the value of this BigNumber negated,                                  // 14984
         * i.e. multiplied by -1.                                                                                      // 14985
         */                                                                                                            // 14986
        P.negated = P.neg = function () {                                                                              // 14987
            var x = new BigNumber(this);                                                                               // 14988
            x.s = -x.s || null;                                                                                        // 14989
            return x;                                                                                                  // 14990
        };                                                                                                             // 14991
                                                                                                                       // 14992
                                                                                                                       // 14993
        /*                                                                                                             // 14994
         *  n + 0 = n                                                                                                  // 14995
         *  n + N = N                                                                                                  // 14996
         *  n + I = I                                                                                                  // 14997
         *  0 + n = n                                                                                                  // 14998
         *  0 + 0 = 0                                                                                                  // 14999
         *  0 + N = N                                                                                                  // 15000
         *  0 + I = I                                                                                                  // 15001
         *  N + n = N                                                                                                  // 15002
         *  N + 0 = N                                                                                                  // 15003
         *  N + N = N                                                                                                  // 15004
         *  N + I = N                                                                                                  // 15005
         *  I + n = I                                                                                                  // 15006
         *  I + 0 = I                                                                                                  // 15007
         *  I + N = N                                                                                                  // 15008
         *  I + I = I                                                                                                  // 15009
         *                                                                                                             // 15010
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                         // 15011
         * BigNumber(y, b).                                                                                            // 15012
         */                                                                                                            // 15013
        P.plus = P.add = function ( y, b ) {                                                                           // 15014
            var t,                                                                                                     // 15015
                x = this,                                                                                              // 15016
                a = x.s;                                                                                               // 15017
                                                                                                                       // 15018
            id = 12;                                                                                                   // 15019
            y = new BigNumber( y, b );                                                                                 // 15020
            b = y.s;                                                                                                   // 15021
                                                                                                                       // 15022
            // Either NaN?                                                                                             // 15023
            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 15024
                                                                                                                       // 15025
            // Signs differ?                                                                                           // 15026
             if ( a != b ) {                                                                                           // 15027
                y.s = -b;                                                                                              // 15028
                return x.minus(y);                                                                                     // 15029
            }                                                                                                          // 15030
                                                                                                                       // 15031
            var xe = x.e / LOG_BASE,                                                                                   // 15032
                ye = y.e / LOG_BASE,                                                                                   // 15033
                xc = x.c,                                                                                              // 15034
                yc = y.c;                                                                                              // 15035
                                                                                                                       // 15036
            if ( !xe || !ye ) {                                                                                        // 15037
                                                                                                                       // 15038
                // Return ±Infinity if either ±Infinity.                                                               // 15039
                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                       // 15040
                                                                                                                       // 15041
                // Either zero?                                                                                        // 15042
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                            // 15043
                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                         // 15044
            }                                                                                                          // 15045
                                                                                                                       // 15046
            xe = bitFloor(xe);                                                                                         // 15047
            ye = bitFloor(ye);                                                                                         // 15048
            xc = xc.slice();                                                                                           // 15049
                                                                                                                       // 15050
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                            // 15051
            if ( a = xe - ye ) {                                                                                       // 15052
                if ( a > 0 ) {                                                                                         // 15053
                    ye = xe;                                                                                           // 15054
                    t = yc;                                                                                            // 15055
                } else {                                                                                               // 15056
                    a = -a;                                                                                            // 15057
                    t = xc;                                                                                            // 15058
                }                                                                                                      // 15059
                                                                                                                       // 15060
                t.reverse();                                                                                           // 15061
                for ( ; a--; t.push(0) );                                                                              // 15062
                t.reverse();                                                                                           // 15063
            }                                                                                                          // 15064
                                                                                                                       // 15065
            a = xc.length;                                                                                             // 15066
            b = yc.length;                                                                                             // 15067
                                                                                                                       // 15068
            // Point xc to the longer array, and b to the shorter length.                                              // 15069
            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                           // 15070
                                                                                                                       // 15071
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                          // 15072
            for ( a = 0; b; ) {                                                                                        // 15073
                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                        // 15074
                xc[b] %= BASE;                                                                                         // 15075
            }                                                                                                          // 15076
                                                                                                                       // 15077
            if (a) {                                                                                                   // 15078
                xc.unshift(a);                                                                                         // 15079
                ++ye;                                                                                                  // 15080
            }                                                                                                          // 15081
                                                                                                                       // 15082
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                              // 15083
            // ye = MAX_EXP + 1 possible                                                                               // 15084
            return normalise( y, xc, ye );                                                                             // 15085
        };                                                                                                             // 15086
                                                                                                                       // 15087
                                                                                                                       // 15088
        /*                                                                                                             // 15089
         * Return the number of significant digits of the value of this BigNumber.                                     // 15090
         *                                                                                                             // 15091
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                     // 15092
         */                                                                                                            // 15093
        P.precision = P.sd = function (z) {                                                                            // 15094
            var n, v,                                                                                                  // 15095
                x = this,                                                                                              // 15096
                c = x.c;                                                                                               // 15097
                                                                                                                       // 15098
            // 'precision() argument not a boolean or binary digit: {z}'                                               // 15099
            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                      // 15100
                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                      // 15101
                if ( z != !!z ) z = null;                                                                              // 15102
            }                                                                                                          // 15103
                                                                                                                       // 15104
            if ( !c ) return null;                                                                                     // 15105
            v = c.length - 1;                                                                                          // 15106
            n = v * LOG_BASE + 1;                                                                                      // 15107
                                                                                                                       // 15108
            if ( v = c[v] ) {                                                                                          // 15109
                                                                                                                       // 15110
                // Subtract the number of trailing zeros of the last element.                                          // 15111
                for ( ; v % 10 == 0; v /= 10, n-- );                                                                   // 15112
                                                                                                                       // 15113
                // Add the number of digits of the first element.                                                      // 15114
                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                               // 15115
            }                                                                                                          // 15116
                                                                                                                       // 15117
            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                       // 15118
                                                                                                                       // 15119
            return n;                                                                                                  // 15120
        };                                                                                                             // 15121
                                                                                                                       // 15122
                                                                                                                       // 15123
        /*                                                                                                             // 15124
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 15125
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                         // 15126
         * omitted.                                                                                                    // 15127
         *                                                                                                             // 15128
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15129
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15130
         *                                                                                                             // 15131
         * 'round() decimal places out of range: {dp}'                                                                 // 15132
         * 'round() decimal places not an integer: {dp}'                                                               // 15133
         * 'round() rounding mode not an integer: {rm}'                                                                // 15134
         * 'round() rounding mode out of range: {rm}'                                                                  // 15135
         */                                                                                                            // 15136
        P.round = function ( dp, rm ) {                                                                                // 15137
            var n = new BigNumber(this);                                                                               // 15138
                                                                                                                       // 15139
            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                        // 15140
                round( n, ~~dp + this.e + 1, rm == null ||                                                             // 15141
                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                                // 15142
            }                                                                                                          // 15143
                                                                                                                       // 15144
            return n;                                                                                                  // 15145
        };                                                                                                             // 15146
                                                                                                                       // 15147
                                                                                                                       // 15148
        /*                                                                                                             // 15149
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                       // 15150
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                      // 15151
         *                                                                                                             // 15152
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                        // 15153
         *                                                                                                             // 15154
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                      // 15155
         * otherwise.                                                                                                  // 15156
         *                                                                                                             // 15157
         * 'shift() argument not an integer: {k}'                                                                      // 15158
         * 'shift() argument out of range: {k}'                                                                        // 15159
         */                                                                                                            // 15160
        P.shift = function (k) {                                                                                       // 15161
            var n = this;                                                                                              // 15162
            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                                // 15163
                                                                                                                       // 15164
              // k < 1e+21, or truncate(k) will produce exponential notation.                                          // 15165
              ? n.times( '1e' + truncate(k) )                                                                          // 15166
              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                      // 15167
                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                          // 15168
                : n );                                                                                                 // 15169
        };                                                                                                             // 15170
                                                                                                                       // 15171
                                                                                                                       // 15172
        /*                                                                                                             // 15173
         *  sqrt(-n) =  N                                                                                              // 15174
         *  sqrt( N) =  N                                                                                              // 15175
         *  sqrt(-I) =  N                                                                                              // 15176
         *  sqrt( I) =  I                                                                                              // 15177
         *  sqrt( 0) =  0                                                                                              // 15178
         *  sqrt(-0) = -0                                                                                              // 15179
         *                                                                                                             // 15180
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                       // 15181
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                      // 15182
         */                                                                                                            // 15183
        P.squareRoot = P.sqrt = function () {                                                                          // 15184
            var m, n, r, rep, t,                                                                                       // 15185
                x = this,                                                                                              // 15186
                c = x.c,                                                                                               // 15187
                s = x.s,                                                                                               // 15188
                e = x.e,                                                                                               // 15189
                dp = DECIMAL_PLACES + 4,                                                                               // 15190
                half = new BigNumber('0.5');                                                                           // 15191
                                                                                                                       // 15192
            // Negative/NaN/Infinity/zero?                                                                             // 15193
            if ( s !== 1 || !c || !c[0] ) {                                                                            // 15194
                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                           // 15195
            }                                                                                                          // 15196
                                                                                                                       // 15197
            // Initial estimate.                                                                                       // 15198
            s = Math.sqrt( +x );                                                                                       // 15199
                                                                                                                       // 15200
            // Math.sqrt underflow/overflow?                                                                           // 15201
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                                 // 15202
            if ( s == 0 || s == 1 / 0 ) {                                                                              // 15203
                n = coeffToString(c);                                                                                  // 15204
                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                             // 15205
                s = Math.sqrt(n);                                                                                      // 15206
                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                    // 15207
                                                                                                                       // 15208
                if ( s == 1 / 0 ) {                                                                                    // 15209
                    n = '1e' + e;                                                                                      // 15210
                } else {                                                                                               // 15211
                    n = s.toExponential();                                                                             // 15212
                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                          // 15213
                }                                                                                                      // 15214
                                                                                                                       // 15215
                r = new BigNumber(n);                                                                                  // 15216
            } else {                                                                                                   // 15217
                r = new BigNumber( s + '' );                                                                           // 15218
            }                                                                                                          // 15219
                                                                                                                       // 15220
            // Check for zero.                                                                                         // 15221
            // r could be zero if MIN_EXP is changed after the this value was created.                                 // 15222
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                   // 15223
            // coeffToString to throw.                                                                                 // 15224
            if ( r.c[0] ) {                                                                                            // 15225
                e = r.e;                                                                                               // 15226
                s = e + dp;                                                                                            // 15227
                if ( s < 3 ) s = 0;                                                                                    // 15228
                                                                                                                       // 15229
                // Newton-Raphson iteration.                                                                           // 15230
                for ( ; ; ) {                                                                                          // 15231
                    t = r;                                                                                             // 15232
                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                    // 15233
                                                                                                                       // 15234
                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                                // 15235
                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                      // 15236
                                                                                                                       // 15237
                        // The exponent of r may here be one less than the final result exponent,                      // 15238
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                     // 15239
                        // are indexed correctly.                                                                      // 15240
                        if ( r.e < e ) --s;                                                                            // 15241
                        n = n.slice( s - 3, s + 1 );                                                                   // 15242
                                                                                                                       // 15243
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                    // 15244
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                        // 15245
                        // iteration.                                                                                  // 15246
                        if ( n == '9999' || !rep && n == '4999' ) {                                                    // 15247
                                                                                                                       // 15248
                            // On the first iteration only, check to see if rounding up gives the                      // 15249
                            // exact result as the nines may infinitely repeat.                                        // 15250
                            if ( !rep ) {                                                                              // 15251
                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                               // 15252
                                                                                                                       // 15253
                                if ( t.times(t).eq(x) ) {                                                              // 15254
                                    r = t;                                                                             // 15255
                                    break;                                                                             // 15256
                                }                                                                                      // 15257
                            }                                                                                          // 15258
                                                                                                                       // 15259
                            dp += 4;                                                                                   // 15260
                            s += 4;                                                                                    // 15261
                            rep = 1;                                                                                   // 15262
                        } else {                                                                                       // 15263
                                                                                                                       // 15264
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                         // 15265
                            // result. If not, then there are further digits and m will be truthy.                     // 15266
                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                         // 15267
                                                                                                                       // 15268
                                // Truncate to the first rounding digit.                                               // 15269
                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                               // 15270
                                m = !r.times(r).eq(x);                                                                 // 15271
                            }                                                                                          // 15272
                                                                                                                       // 15273
                            break;                                                                                     // 15274
                        }                                                                                              // 15275
                    }                                                                                                  // 15276
                }                                                                                                      // 15277
            }                                                                                                          // 15278
                                                                                                                       // 15279
            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                             // 15280
        };                                                                                                             // 15281
                                                                                                                       // 15282
                                                                                                                       // 15283
        /*                                                                                                             // 15284
         *  n * 0 = 0                                                                                                  // 15285
         *  n * N = N                                                                                                  // 15286
         *  n * I = I                                                                                                  // 15287
         *  0 * n = 0                                                                                                  // 15288
         *  0 * 0 = 0                                                                                                  // 15289
         *  0 * N = N                                                                                                  // 15290
         *  0 * I = N                                                                                                  // 15291
         *  N * n = N                                                                                                  // 15292
         *  N * 0 = N                                                                                                  // 15293
         *  N * N = N                                                                                                  // 15294
         *  N * I = N                                                                                                  // 15295
         *  I * n = I                                                                                                  // 15296
         *  I * 0 = N                                                                                                  // 15297
         *  I * N = N                                                                                                  // 15298
         *  I * I = I                                                                                                  // 15299
         *                                                                                                             // 15300
         * Return a new BigNumber whose value is the value of this BigNumber times the value of                        // 15301
         * BigNumber(y, b).                                                                                            // 15302
         */                                                                                                            // 15303
        P.times = P.mul = function ( y, b ) {                                                                          // 15304
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                    // 15305
                base, sqrtBase,                                                                                        // 15306
                x = this,                                                                                              // 15307
                xc = x.c,                                                                                              // 15308
                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                         // 15309
                                                                                                                       // 15310
            // Either NaN, ±Infinity or ±0?                                                                            // 15311
            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                    // 15312
                                                                                                                       // 15313
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                                 // 15314
                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                    // 15315
                    y.c = y.e = y.s = null;                                                                            // 15316
                } else {                                                                                               // 15317
                    y.s *= x.s;                                                                                        // 15318
                                                                                                                       // 15319
                    // Return ±Infinity if either is ±Infinity.                                                        // 15320
                    if ( !xc || !yc ) {                                                                                // 15321
                        y.c = y.e = null;                                                                              // 15322
                                                                                                                       // 15323
                    // Return ±0 if either is ±0.                                                                      // 15324
                    } else {                                                                                           // 15325
                        y.c = [0];                                                                                     // 15326
                        y.e = 0;                                                                                       // 15327
                    }                                                                                                  // 15328
                }                                                                                                      // 15329
                                                                                                                       // 15330
                return y;                                                                                              // 15331
            }                                                                                                          // 15332
                                                                                                                       // 15333
            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                               // 15334
            y.s *= x.s;                                                                                                // 15335
            xcL = xc.length;                                                                                           // 15336
            ycL = yc.length;                                                                                           // 15337
                                                                                                                       // 15338
            // Ensure xc points to longer array and xcL to its length.                                                 // 15339
            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                   // 15340
                                                                                                                       // 15341
            // Initialise the result array with zeros.                                                                 // 15342
            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                           // 15343
                                                                                                                       // 15344
            base = BASE;                                                                                               // 15345
            sqrtBase = SQRT_BASE;                                                                                      // 15346
                                                                                                                       // 15347
            for ( i = ycL; --i >= 0; ) {                                                                               // 15348
                c = 0;                                                                                                 // 15349
                ylo = yc[i] % sqrtBase;                                                                                // 15350
                yhi = yc[i] / sqrtBase | 0;                                                                            // 15351
                                                                                                                       // 15352
                for ( k = xcL, j = i + k; j > i; ) {                                                                   // 15353
                    xlo = xc[--k] % sqrtBase;                                                                          // 15354
                    xhi = xc[k] / sqrtBase | 0;                                                                        // 15355
                    m = yhi * xlo + xhi * ylo;                                                                         // 15356
                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                     // 15357
                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                         // 15358
                    zc[j--] = xlo % base;                                                                              // 15359
                }                                                                                                      // 15360
                                                                                                                       // 15361
                zc[j] = c;                                                                                             // 15362
            }                                                                                                          // 15363
                                                                                                                       // 15364
            if (c) {                                                                                                   // 15365
                ++e;                                                                                                   // 15366
            } else {                                                                                                   // 15367
                zc.shift();                                                                                            // 15368
            }                                                                                                          // 15369
                                                                                                                       // 15370
            return normalise( y, zc, e );                                                                              // 15371
        };                                                                                                             // 15372
                                                                                                                       // 15373
                                                                                                                       // 15374
        /*                                                                                                             // 15375
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 15376
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                            // 15377
         *                                                                                                             // 15378
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15379
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15380
         *                                                                                                             // 15381
         * 'toDigits() precision out of range: {sd}'                                                                   // 15382
         * 'toDigits() precision not an integer: {sd}'                                                                 // 15383
         * 'toDigits() rounding mode not an integer: {rm}'                                                             // 15384
         * 'toDigits() rounding mode out of range: {rm}'                                                               // 15385
         */                                                                                                            // 15386
        P.toDigits = function ( sd, rm ) {                                                                             // 15387
            var n = new BigNumber(this);                                                                               // 15388
            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                             // 15389
            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                     // 15390
            return sd ? round( n, sd, rm ) : n;                                                                        // 15391
        };                                                                                                             // 15392
                                                                                                                       // 15393
                                                                                                                       // 15394
        /*                                                                                                             // 15395
         * Return a string representing the value of this BigNumber in exponential notation and                        // 15396
         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                     // 15397
         *                                                                                                             // 15398
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15399
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15400
         *                                                                                                             // 15401
         * 'toExponential() decimal places not an integer: {dp}'                                                       // 15402
         * 'toExponential() decimal places out of range: {dp}'                                                         // 15403
         * 'toExponential() rounding mode not an integer: {rm}'                                                        // 15404
         * 'toExponential() rounding mode out of range: {rm}'                                                          // 15405
         */                                                                                                            // 15406
        P.toExponential = function ( dp, rm ) {                                                                        // 15407
            return format( this,                                                                                       // 15408
              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                  // 15409
        };                                                                                                             // 15410
                                                                                                                       // 15411
                                                                                                                       // 15412
        /*                                                                                                             // 15413
         * Return a string representing the value of this BigNumber in fixed-point notation rounding                   // 15414
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                       // 15415
         *                                                                                                             // 15416
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                             // 15417
         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                     // 15418
         *                                                                                                             // 15419
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15420
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15421
         *                                                                                                             // 15422
         * 'toFixed() decimal places not an integer: {dp}'                                                             // 15423
         * 'toFixed() decimal places out of range: {dp}'                                                               // 15424
         * 'toFixed() rounding mode not an integer: {rm}'                                                              // 15425
         * 'toFixed() rounding mode out of range: {rm}'                                                                // 15426
         */                                                                                                            // 15427
        P.toFixed = function ( dp, rm ) {                                                                              // 15428
            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                            // 15429
              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                    // 15430
        };                                                                                                             // 15431
                                                                                                                       // 15432
                                                                                                                       // 15433
        /*                                                                                                             // 15434
         * Return a string representing the value of this BigNumber in fixed-point notation rounded                    // 15435
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                   // 15436
         * of the FORMAT object (see BigNumber.config).                                                                // 15437
         *                                                                                                             // 15438
         * FORMAT = {                                                                                                  // 15439
         *      decimalSeparator : '.',                                                                                // 15440
         *      groupSeparator : ',',                                                                                  // 15441
         *      groupSize : 3,                                                                                         // 15442
         *      secondaryGroupSize : 0,                                                                                // 15443
         *      fractionGroupSeparator : '\xA0',    // non-breaking space                                              // 15444
         *      fractionGroupSize : 0                                                                                  // 15445
         * };                                                                                                          // 15446
         *                                                                                                             // 15447
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15448
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15449
         *                                                                                                             // 15450
         * 'toFormat() decimal places not an integer: {dp}'                                                            // 15451
         * 'toFormat() decimal places out of range: {dp}'                                                              // 15452
         * 'toFormat() rounding mode not an integer: {rm}'                                                             // 15453
         * 'toFormat() rounding mode out of range: {rm}'                                                               // 15454
         */                                                                                                            // 15455
        P.toFormat = function ( dp, rm ) {                                                                             // 15456
            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                         // 15457
              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                    // 15458
                                                                                                                       // 15459
            if ( this.c ) {                                                                                            // 15460
                var i,                                                                                                 // 15461
                    arr = str.split('.'),                                                                              // 15462
                    g1 = +FORMAT.groupSize,                                                                            // 15463
                    g2 = +FORMAT.secondaryGroupSize,                                                                   // 15464
                    groupSeparator = FORMAT.groupSeparator,                                                            // 15465
                    intPart = arr[0],                                                                                  // 15466
                    fractionPart = arr[1],                                                                             // 15467
                    isNeg = this.s < 0,                                                                                // 15468
                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                    // 15469
                    len = intDigits.length;                                                                            // 15470
                                                                                                                       // 15471
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                             // 15472
                                                                                                                       // 15473
                if ( g1 > 0 && len > 0 ) {                                                                             // 15474
                    i = len % g1 || g1;                                                                                // 15475
                    intPart = intDigits.substr( 0, i );                                                                // 15476
                                                                                                                       // 15477
                    for ( ; i < len; i += g1 ) {                                                                       // 15478
                        intPart += groupSeparator + intDigits.substr( i, g1 );                                         // 15479
                    }                                                                                                  // 15480
                                                                                                                       // 15481
                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                      // 15482
                    if (isNeg) intPart = '-' + intPart;                                                                // 15483
                }                                                                                                      // 15484
                                                                                                                       // 15485
                str = fractionPart                                                                                     // 15486
                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                           // 15487
                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),                                   // 15488
                      '$&' + FORMAT.fractionGroupSeparator )                                                           // 15489
                    : fractionPart )                                                                                   // 15490
                  : intPart;                                                                                           // 15491
            }                                                                                                          // 15492
                                                                                                                       // 15493
            return str;                                                                                                // 15494
        };                                                                                                             // 15495
                                                                                                                       // 15496
                                                                                                                       // 15497
        /*                                                                                                             // 15498
         * Return a string array representing the value of this BigNumber as a simple fraction with                    // 15499
         * an integer numerator and an integer denominator. The denominator will be a positive                         // 15500
         * non-zero value less than or equal to the specified maximum denominator. If a maximum                        // 15501
         * denominator is not specified, the denominator will be the lowest value necessary to                         // 15502
         * represent the number exactly.                                                                               // 15503
         *                                                                                                             // 15504
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                        // 15505
         *                                                                                                             // 15506
         * 'toFraction() max denominator not an integer: {md}'                                                         // 15507
         * 'toFraction() max denominator out of range: {md}'                                                           // 15508
         */                                                                                                            // 15509
        P.toFraction = function (md) {                                                                                 // 15510
            var arr, d0, d2, e, exp, n, n0, q, s,                                                                      // 15511
                k = ERRORS,                                                                                            // 15512
                x = this,                                                                                              // 15513
                xc = x.c,                                                                                              // 15514
                d = new BigNumber(ONE),                                                                                // 15515
                n1 = d0 = new BigNumber(ONE),                                                                          // 15516
                d1 = n0 = new BigNumber(ONE);                                                                          // 15517
                                                                                                                       // 15518
            if ( md != null ) {                                                                                        // 15519
                ERRORS = false;                                                                                        // 15520
                n = new BigNumber(md);                                                                                 // 15521
                ERRORS = k;                                                                                            // 15522
                                                                                                                       // 15523
                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                               // 15524
                                                                                                                       // 15525
                    if (ERRORS) {                                                                                      // 15526
                        raise( 22,                                                                                     // 15527
                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                        // 15528
                    }                                                                                                  // 15529
                                                                                                                       // 15530
                    // ERRORS is false:                                                                                // 15531
                    // If md is a finite non-integer >= 1, round it to an integer and use it.                          // 15532
                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                      // 15533
                }                                                                                                      // 15534
            }                                                                                                          // 15535
                                                                                                                       // 15536
            if ( !xc ) return x.toString();                                                                            // 15537
            s = coeffToString(xc);                                                                                     // 15538
                                                                                                                       // 15539
            // Determine initial denominator.                                                                          // 15540
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                    // 15541
            e = d.e = s.length - x.e - 1;                                                                              // 15542
            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                    // 15543
            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                         // 15544
                                                                                                                       // 15545
            exp = MAX_EXP;                                                                                             // 15546
            MAX_EXP = 1 / 0;                                                                                           // 15547
            n = new BigNumber(s);                                                                                      // 15548
                                                                                                                       // 15549
            // n0 = d1 = 0                                                                                             // 15550
            n0.c[0] = 0;                                                                                               // 15551
                                                                                                                       // 15552
            for ( ; ; )  {                                                                                             // 15553
                q = div( n, d, 0, 1 );                                                                                 // 15554
                d2 = d0.plus( q.times(d1) );                                                                           // 15555
                if ( d2.cmp(md) == 1 ) break;                                                                          // 15556
                d0 = d1;                                                                                               // 15557
                d1 = d2;                                                                                               // 15558
                n1 = n0.plus( q.times( d2 = n1 ) );                                                                    // 15559
                n0 = d2;                                                                                               // 15560
                d = n.minus( q.times( d2 = d ) );                                                                      // 15561
                n = d2;                                                                                                // 15562
            }                                                                                                          // 15563
                                                                                                                       // 15564
            d2 = div( md.minus(d0), d1, 0, 1 );                                                                        // 15565
            n0 = n0.plus( d2.times(n1) );                                                                              // 15566
            d0 = d0.plus( d2.times(d1) );                                                                              // 15567
            n0.s = n1.s = x.s;                                                                                         // 15568
            e *= 2;                                                                                                    // 15569
                                                                                                                       // 15570
            // Determine which fraction is closer to x, n0/d0 or n1/d1                                                 // 15571
            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                  // 15572
                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                                 // 15573
                    ? [ n1.toString(), d1.toString() ]                                                                 // 15574
                    : [ n0.toString(), d0.toString() ];                                                                // 15575
                                                                                                                       // 15576
            MAX_EXP = exp;                                                                                             // 15577
            return arr;                                                                                                // 15578
        };                                                                                                             // 15579
                                                                                                                       // 15580
                                                                                                                       // 15581
        /*                                                                                                             // 15582
         * Return the value of this BigNumber converted to a number primitive.                                         // 15583
         */                                                                                                            // 15584
        P.toNumber = function () {                                                                                     // 15585
            var x = this;                                                                                              // 15586
                                                                                                                       // 15587
            // Ensure zero has correct sign.                                                                           // 15588
            return +x || ( x.s ? x.s * 0 : NaN );                                                                      // 15589
        };                                                                                                             // 15590
                                                                                                                       // 15591
                                                                                                                       // 15592
        /*                                                                                                             // 15593
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                        // 15594
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                       // 15595
         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.                                      // 15596
         *                                                                                                             // 15597
         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.                                        // 15598
         * (Performs 54 loop iterations for n of 9007199254740992.)                                                    // 15599
         *                                                                                                             // 15600
         * 'pow() exponent not an integer: {n}'                                                                        // 15601
         * 'pow() exponent out of range: {n}'                                                                          // 15602
         */                                                                                                            // 15603
        P.toPower = P.pow = function (n) {                                                                             // 15604
            var k, y,                                                                                                  // 15605
                i = mathfloor( n < 0 ? -n : +n ),                                                                      // 15606
                x = this;                                                                                              // 15607
                                                                                                                       // 15608
            // Pass ±Infinity to Math.pow if exponent is out of range.                                                 // 15609
            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                              // 15610
              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                  // 15611
                parseFloat(n) != n && !( n = NaN ) ) ) {                                                               // 15612
                return new BigNumber( Math.pow( +x, n ) );                                                             // 15613
            }                                                                                                          // 15614
                                                                                                                       // 15615
            // Truncating each coefficient array to a length of k after each multiplication equates                    // 15616
            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a                      // 15617
            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)                     // 15618
            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;                                          // 15619
            y = new BigNumber(ONE);                                                                                    // 15620
                                                                                                                       // 15621
            for ( ; ; ) {                                                                                              // 15622
                                                                                                                       // 15623
                if ( i % 2 ) {                                                                                         // 15624
                    y = y.times(x);                                                                                    // 15625
                    if ( !y.c ) break;                                                                                 // 15626
                    if ( k && y.c.length > k ) y.c.length = k;                                                         // 15627
                }                                                                                                      // 15628
                                                                                                                       // 15629
                i = mathfloor( i / 2 );                                                                                // 15630
                if ( !i ) break;                                                                                       // 15631
                                                                                                                       // 15632
                x = x.times(x);                                                                                        // 15633
                if ( k && x.c && x.c.length > k ) x.c.length = k;                                                      // 15634
            }                                                                                                          // 15635
                                                                                                                       // 15636
            if ( n < 0 ) y = ONE.div(y);                                                                               // 15637
            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                                   // 15638
        };                                                                                                             // 15639
                                                                                                                       // 15640
                                                                                                                       // 15641
        /*                                                                                                             // 15642
         * Return a string representing the value of this BigNumber rounded to sd significant digits                   // 15643
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                            // 15644
         * necessary to represent the integer part of the value in fixed-point notation, then use                      // 15645
         * exponential notation.                                                                                       // 15646
         *                                                                                                             // 15647
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15648
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15649
         *                                                                                                             // 15650
         * 'toPrecision() precision not an integer: {sd}'                                                              // 15651
         * 'toPrecision() precision out of range: {sd}'                                                                // 15652
         * 'toPrecision() rounding mode not an integer: {rm}'                                                          // 15653
         * 'toPrecision() rounding mode out of range: {rm}'                                                            // 15654
         */                                                                                                            // 15655
        P.toPrecision = function ( sd, rm ) {                                                                          // 15656
            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                               // 15657
              ? sd | 0 : null, rm, 24 );                                                                               // 15658
        };                                                                                                             // 15659
                                                                                                                       // 15660
                                                                                                                       // 15661
        /*                                                                                                             // 15662
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                      // 15663
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                   // 15664
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                       // 15665
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                   // 15666
         * TO_EXP_NEG, return exponential notation.                                                                    // 15667
         *                                                                                                             // 15668
         * [b] {number} Integer, 2 to 64 inclusive.                                                                    // 15669
         *                                                                                                             // 15670
         * 'toString() base not an integer: {b}'                                                                       // 15671
         * 'toString() base out of range: {b}'                                                                         // 15672
         */                                                                                                            // 15673
        P.toString = function (b) {                                                                                    // 15674
            var str,                                                                                                   // 15675
                n = this,                                                                                              // 15676
                s = n.s,                                                                                               // 15677
                e = n.e;                                                                                               // 15678
                                                                                                                       // 15679
            // Infinity or NaN?                                                                                        // 15680
            if ( e === null ) {                                                                                        // 15681
                                                                                                                       // 15682
                if (s) {                                                                                               // 15683
                    str = 'Infinity';                                                                                  // 15684
                    if ( s < 0 ) str = '-' + str;                                                                      // 15685
                } else {                                                                                               // 15686
                    str = 'NaN';                                                                                       // 15687
                }                                                                                                      // 15688
            } else {                                                                                                   // 15689
                str = coeffToString( n.c );                                                                            // 15690
                                                                                                                       // 15691
                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                              // 15692
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                           // 15693
                      ? toExponential( str, e )                                                                        // 15694
                      : toFixedPoint( str, e );                                                                        // 15695
                } else {                                                                                               // 15696
                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                         // 15697
                }                                                                                                      // 15698
                                                                                                                       // 15699
                if ( s < 0 && n.c[0] ) str = '-' + str;                                                                // 15700
            }                                                                                                          // 15701
                                                                                                                       // 15702
            return str;                                                                                                // 15703
        };                                                                                                             // 15704
                                                                                                                       // 15705
                                                                                                                       // 15706
        /*                                                                                                             // 15707
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                      // 15708
         * number.                                                                                                     // 15709
         */                                                                                                            // 15710
        P.truncated = P.trunc = function () {                                                                          // 15711
            return round( new BigNumber(this), this.e + 1, 1 );                                                        // 15712
        };                                                                                                             // 15713
                                                                                                                       // 15714
                                                                                                                       // 15715
                                                                                                                       // 15716
        /*                                                                                                             // 15717
         * Return as toString, but do not accept a base argument.                                                      // 15718
         */                                                                                                            // 15719
        P.valueOf = P.toJSON = function () {                                                                           // 15720
            return this.toString();                                                                                    // 15721
        };                                                                                                             // 15722
                                                                                                                       // 15723
                                                                                                                       // 15724
        // Aliases for BigDecimal methods.                                                                             // 15725
        //P.add = P.plus;         // P.add included above                                                              // 15726
        //P.subtract = P.minus;   // P.sub included above                                                              // 15727
        //P.multiply = P.times;   // P.mul included above                                                              // 15728
        //P.divide = P.div;                                                                                            // 15729
        //P.remainder = P.mod;                                                                                         // 15730
        //P.compareTo = P.cmp;                                                                                         // 15731
        //P.negate = P.neg;                                                                                            // 15732
                                                                                                                       // 15733
                                                                                                                       // 15734
        if ( configObj != null ) BigNumber.config(configObj);                                                          // 15735
                                                                                                                       // 15736
        return BigNumber;                                                                                              // 15737
    }                                                                                                                  // 15738
                                                                                                                       // 15739
                                                                                                                       // 15740
    // PRIVATE HELPER FUNCTIONS                                                                                        // 15741
                                                                                                                       // 15742
                                                                                                                       // 15743
    function bitFloor(n) {                                                                                             // 15744
        var i = n | 0;                                                                                                 // 15745
        return n > 0 || n === i ? i : i - 1;                                                                           // 15746
    }                                                                                                                  // 15747
                                                                                                                       // 15748
                                                                                                                       // 15749
    // Return a coefficient array as a string of base 10 digits.                                                       // 15750
    function coeffToString(a) {                                                                                        // 15751
        var s, z,                                                                                                      // 15752
            i = 1,                                                                                                     // 15753
            j = a.length,                                                                                              // 15754
            r = a[0] + '';                                                                                             // 15755
                                                                                                                       // 15756
        for ( ; i < j; ) {                                                                                             // 15757
            s = a[i++] + '';                                                                                           // 15758
            z = LOG_BASE - s.length;                                                                                   // 15759
            for ( ; z--; s = '0' + s );                                                                                // 15760
            r += s;                                                                                                    // 15761
        }                                                                                                              // 15762
                                                                                                                       // 15763
        // Determine trailing zeros.                                                                                   // 15764
        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                               // 15765
        return r.slice( 0, j + 1 || 1 );                                                                               // 15766
    }                                                                                                                  // 15767
                                                                                                                       // 15768
                                                                                                                       // 15769
    // Compare the value of BigNumbers x and y.                                                                        // 15770
    function compare( x, y ) {                                                                                         // 15771
        var a, b,                                                                                                      // 15772
            xc = x.c,                                                                                                  // 15773
            yc = y.c,                                                                                                  // 15774
            i = x.s,                                                                                                   // 15775
            j = y.s,                                                                                                   // 15776
            k = x.e,                                                                                                   // 15777
            l = y.e;                                                                                                   // 15778
                                                                                                                       // 15779
        // Either NaN?                                                                                                 // 15780
        if ( !i || !j ) return null;                                                                                   // 15781
                                                                                                                       // 15782
        a = xc && !xc[0];                                                                                              // 15783
        b = yc && !yc[0];                                                                                              // 15784
                                                                                                                       // 15785
        // Either zero?                                                                                                // 15786
        if ( a || b ) return a ? b ? 0 : -j : i;                                                                       // 15787
                                                                                                                       // 15788
        // Signs differ?                                                                                               // 15789
        if ( i != j ) return i;                                                                                        // 15790
                                                                                                                       // 15791
        a = i < 0;                                                                                                     // 15792
        b = k == l;                                                                                                    // 15793
                                                                                                                       // 15794
        // Either Infinity?                                                                                            // 15795
        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                             // 15796
                                                                                                                       // 15797
        // Compare exponents.                                                                                          // 15798
        if ( !b ) return k > l ^ a ? 1 : -1;                                                                           // 15799
                                                                                                                       // 15800
        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                             // 15801
                                                                                                                       // 15802
        // Compare digit by digit.                                                                                     // 15803
        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                             // 15804
                                                                                                                       // 15805
        // Compare lengths.                                                                                            // 15806
        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                        // 15807
    }                                                                                                                  // 15808
                                                                                                                       // 15809
                                                                                                                       // 15810
    /*                                                                                                                 // 15811
     * Return true if n is a valid number in range, otherwise false.                                                   // 15812
     * Use for argument validation when ERRORS is false.                                                               // 15813
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                       // 15814
     */                                                                                                                // 15815
    function intValidatorNoErrors( n, min, max ) {                                                                     // 15816
        return ( n = truncate(n) ) >= min && n <= max;                                                                 // 15817
    }                                                                                                                  // 15818
                                                                                                                       // 15819
                                                                                                                       // 15820
    function isArray(obj) {                                                                                            // 15821
        return Object.prototype.toString.call(obj) == '[object Array]';                                                // 15822
    }                                                                                                                  // 15823
                                                                                                                       // 15824
                                                                                                                       // 15825
    /*                                                                                                                 // 15826
     * Convert string of baseIn to an array of numbers of baseOut.                                                     // 15827
     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                                // 15828
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                                // 15829
     */                                                                                                                // 15830
    function toBaseOut( str, baseIn, baseOut ) {                                                                       // 15831
        var j,                                                                                                         // 15832
            arr = [0],                                                                                                 // 15833
            arrL,                                                                                                      // 15834
            i = 0,                                                                                                     // 15835
            len = str.length;                                                                                          // 15836
                                                                                                                       // 15837
        for ( ; i < len; ) {                                                                                           // 15838
            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                    // 15839
            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                     // 15840
                                                                                                                       // 15841
            for ( ; j < arr.length; j++ ) {                                                                            // 15842
                                                                                                                       // 15843
                if ( arr[j] > baseOut - 1 ) {                                                                          // 15844
                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                          // 15845
                    arr[j + 1] += arr[j] / baseOut | 0;                                                                // 15846
                    arr[j] %= baseOut;                                                                                 // 15847
                }                                                                                                      // 15848
            }                                                                                                          // 15849
        }                                                                                                              // 15850
                                                                                                                       // 15851
        return arr.reverse();                                                                                          // 15852
    }                                                                                                                  // 15853
                                                                                                                       // 15854
                                                                                                                       // 15855
    function toExponential( str, e ) {                                                                                 // 15856
        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                         // 15857
          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                  // 15858
    }                                                                                                                  // 15859
                                                                                                                       // 15860
                                                                                                                       // 15861
    function toFixedPoint( str, e ) {                                                                                  // 15862
        var len, z;                                                                                                    // 15863
                                                                                                                       // 15864
        // Negative exponent?                                                                                          // 15865
        if ( e < 0 ) {                                                                                                 // 15866
                                                                                                                       // 15867
            // Prepend zeros.                                                                                          // 15868
            for ( z = '0.'; ++e; z += '0' );                                                                           // 15869
            str = z + str;                                                                                             // 15870
                                                                                                                       // 15871
        // Positive exponent                                                                                           // 15872
        } else {                                                                                                       // 15873
            len = str.length;                                                                                          // 15874
                                                                                                                       // 15875
            // Append zeros.                                                                                           // 15876
            if ( ++e > len ) {                                                                                         // 15877
                for ( z = '0', e -= len; --e; z += '0' );                                                              // 15878
                str += z;                                                                                              // 15879
            } else if ( e < len ) {                                                                                    // 15880
                str = str.slice( 0, e ) + '.' + str.slice(e);                                                          // 15881
            }                                                                                                          // 15882
        }                                                                                                              // 15883
                                                                                                                       // 15884
        return str;                                                                                                    // 15885
    }                                                                                                                  // 15886
                                                                                                                       // 15887
                                                                                                                       // 15888
    function truncate(n) {                                                                                             // 15889
        n = parseFloat(n);                                                                                             // 15890
        return n < 0 ? mathceil(n) : mathfloor(n);                                                                     // 15891
    }                                                                                                                  // 15892
                                                                                                                       // 15893
                                                                                                                       // 15894
    // EXPORT                                                                                                          // 15895
                                                                                                                       // 15896
                                                                                                                       // 15897
    BigNumber = another();                                                                                             // 15898
                                                                                                                       // 15899
    // AMD.                                                                                                            // 15900
    if ( typeof define == 'function' && define.amd ) {                                                                 // 15901
        define( function () { return BigNumber; } );                                                                   // 15902
                                                                                                                       // 15903
    // Node and other environments that support module.exports.                                                        // 15904
    } else if ( typeof module != 'undefined' && module.exports ) {                                                     // 15905
        module.exports = BigNumber;                                                                                    // 15906
        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}                                                // 15907
                                                                                                                       // 15908
    // Browser.                                                                                                        // 15909
    } else {                                                                                                           // 15910
        global.BigNumber = BigNumber;                                                                                  // 15911
    }                                                                                                                  // 15912
})(this);                                                                                                              // 15913
                                                                                                                       // 15914
},{"crypto":49}],"web3":[function(require,module,exports){                                                             // 15915
var Web3 = require('./lib/web3');                                                                                      // 15916
                                                                                                                       // 15917
// dont override global variable                                                                                       // 15918
if (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {                                             // 15919
    window.Web3 = Web3;                                                                                                // 15920
}                                                                                                                      // 15921
                                                                                                                       // 15922
module.exports = Web3;                                                                                                 // 15923
                                                                                                                       // 15924
},{"./lib/web3":22}]},{},["web3"])                                                                                     // 15925
//# sourceMappingURL=web3.js.map                                                                                       // 15926
                                                                                                                       // 15927
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ethereum_web3/package-init.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* jshint ignore:start */                                                                                              // 1
                                                                                                                       // 2
                                                                                                                       // 3
// Browser environment                                                                                                 // 4
if(typeof window !== 'undefined') {                                                                                    // 5
    Web3 = (typeof window.Web3 !== 'undefined') ? window.Web3 : require('web3');                                       // 6
    BigNumber = (typeof window.BigNumber !== 'undefined') ? window.BigNumber : require('bignumber.js');                // 7
}                                                                                                                      // 8
                                                                                                                       // 9
                                                                                                                       // 10
// Node environment                                                                                                    // 11
if(typeof global !== 'undefined') {                                                                                    // 12
    Web3 = (typeof global.Web3 !== 'undefined') ? global.Web3 : require('web3');                                       // 13
    BigNumber = (typeof global.BigNumber !== 'undefined') ? global.BigNumber : require('bignumber.js');                // 14
}                                                                                                                      // 15
                                                                                                                       // 16
/* jshint ignore:end */                                                                                                // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);
